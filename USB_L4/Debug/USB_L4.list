
USB_L4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007834  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080079bc  080079bc  000179bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a60  08007a60  00020280  2**0
                  CONTENTS
  4 .ARM          00000008  08007a60  08007a60  00017a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a68  08007a68  00020280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a68  08007a68  00017a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a6c  08007a6c  00017a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000280  20000000  08007a70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008ec  20000280  08007cf0  00020280  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20000b6c  08007cf0  00020b6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e7b  00000000  00000000  000202b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030b8  00000000  00000000  0003712b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f88  00000000  00000000  0003a1e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e10  00000000  00000000  0003b170  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002944e  00000000  00000000  0003bf80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ecf1  00000000  00000000  000653ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ed069  00000000  00000000  000740bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00161128  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004004  00000000  00000000  001611a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000280 	.word	0x20000280
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080079a4 	.word	0x080079a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000284 	.word	0x20000284
 80001c4:	080079a4 	.word	0x080079a4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004ce:	2300      	movs	r3, #0
 80004d0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004d2:	2003      	movs	r0, #3
 80004d4:	f000 f95e 	bl	8000794 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004d8:	2000      	movs	r0, #0
 80004da:	f000 f80d 	bl	80004f8 <HAL_InitTick>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d002      	beq.n	80004ea <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80004e4:	2301      	movs	r3, #1
 80004e6:	71fb      	strb	r3, [r7, #7]
 80004e8:	e001      	b.n	80004ee <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004ea:	f006 fac7 	bl	8006a7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80004ee:	79fb      	ldrb	r3, [r7, #7]
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	3708      	adds	r7, #8
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000500:	2300      	movs	r3, #0
 8000502:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000504:	4b17      	ldr	r3, [pc, #92]	; (8000564 <HAL_InitTick+0x6c>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d023      	beq.n	8000554 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800050c:	4b16      	ldr	r3, [pc, #88]	; (8000568 <HAL_InitTick+0x70>)
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	4b14      	ldr	r3, [pc, #80]	; (8000564 <HAL_InitTick+0x6c>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	4619      	mov	r1, r3
 8000516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800051a:	fbb3 f3f1 	udiv	r3, r3, r1
 800051e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000522:	4618      	mov	r0, r3
 8000524:	f000 f96b 	bl	80007fe <HAL_SYSTICK_Config>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d10f      	bne.n	800054e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	2b0f      	cmp	r3, #15
 8000532:	d809      	bhi.n	8000548 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000534:	2200      	movs	r2, #0
 8000536:	6879      	ldr	r1, [r7, #4]
 8000538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800053c:	f000 f935 	bl	80007aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000540:	4a0a      	ldr	r2, [pc, #40]	; (800056c <HAL_InitTick+0x74>)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	6013      	str	r3, [r2, #0]
 8000546:	e007      	b.n	8000558 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000548:	2301      	movs	r3, #1
 800054a:	73fb      	strb	r3, [r7, #15]
 800054c:	e004      	b.n	8000558 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800054e:	2301      	movs	r3, #1
 8000550:	73fb      	strb	r3, [r7, #15]
 8000552:	e001      	b.n	8000558 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000554:	2301      	movs	r3, #1
 8000556:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000558:	7bfb      	ldrb	r3, [r7, #15]
}
 800055a:	4618      	mov	r0, r3
 800055c:	3710      	adds	r7, #16
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000004 	.word	0x20000004
 8000568:	200001b8 	.word	0x200001b8
 800056c:	20000000 	.word	0x20000000

08000570 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_IncTick+0x20>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	461a      	mov	r2, r3
 800057a:	4b06      	ldr	r3, [pc, #24]	; (8000594 <HAL_IncTick+0x24>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4413      	add	r3, r2
 8000580:	4a04      	ldr	r2, [pc, #16]	; (8000594 <HAL_IncTick+0x24>)
 8000582:	6013      	str	r3, [r2, #0]
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	20000004 	.word	0x20000004
 8000594:	200002c4 	.word	0x200002c4

08000598 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  return uwTick;
 800059c:	4b03      	ldr	r3, [pc, #12]	; (80005ac <HAL_GetTick+0x14>)
 800059e:	681b      	ldr	r3, [r3, #0]
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	200002c4 	.word	0x200002c4

080005b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005b8:	f7ff ffee 	bl	8000598 <HAL_GetTick>
 80005bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005c8:	d005      	beq.n	80005d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80005ca:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <HAL_Delay+0x40>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	461a      	mov	r2, r3
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	4413      	add	r3, r2
 80005d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005d6:	bf00      	nop
 80005d8:	f7ff ffde 	bl	8000598 <HAL_GetTick>
 80005dc:	4602      	mov	r2, r0
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	1ad3      	subs	r3, r2, r3
 80005e2:	68fa      	ldr	r2, [r7, #12]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	d8f7      	bhi.n	80005d8 <HAL_Delay+0x28>
  {
  }
}
 80005e8:	bf00      	nop
 80005ea:	3710      	adds	r7, #16
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20000004 	.word	0x20000004

080005f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f003 0307 	and.w	r3, r3, #7
 8000602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000604:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <__NVIC_SetPriorityGrouping+0x44>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800060a:	68ba      	ldr	r2, [r7, #8]
 800060c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000610:	4013      	ands	r3, r2
 8000612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800061c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000626:	4a04      	ldr	r2, [pc, #16]	; (8000638 <__NVIC_SetPriorityGrouping+0x44>)
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	60d3      	str	r3, [r2, #12]
}
 800062c:	bf00      	nop
 800062e:	3714      	adds	r7, #20
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	e000ed00 	.word	0xe000ed00

0800063c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <__NVIC_GetPriorityGrouping+0x18>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	0a1b      	lsrs	r3, r3, #8
 8000646:	f003 0307 	and.w	r3, r3, #7
}
 800064a:	4618      	mov	r0, r3
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000666:	2b00      	cmp	r3, #0
 8000668:	db0b      	blt.n	8000682 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	f003 021f 	and.w	r2, r3, #31
 8000670:	4907      	ldr	r1, [pc, #28]	; (8000690 <__NVIC_EnableIRQ+0x38>)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	095b      	lsrs	r3, r3, #5
 8000678:	2001      	movs	r0, #1
 800067a:	fa00 f202 	lsl.w	r2, r0, r2
 800067e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	e000e100 	.word	0xe000e100

08000694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	6039      	str	r1, [r7, #0]
 800069e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	db0a      	blt.n	80006be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	490c      	ldr	r1, [pc, #48]	; (80006e0 <__NVIC_SetPriority+0x4c>)
 80006ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b2:	0112      	lsls	r2, r2, #4
 80006b4:	b2d2      	uxtb	r2, r2
 80006b6:	440b      	add	r3, r1
 80006b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006bc:	e00a      	b.n	80006d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4908      	ldr	r1, [pc, #32]	; (80006e4 <__NVIC_SetPriority+0x50>)
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	f003 030f 	and.w	r3, r3, #15
 80006ca:	3b04      	subs	r3, #4
 80006cc:	0112      	lsls	r2, r2, #4
 80006ce:	b2d2      	uxtb	r2, r2
 80006d0:	440b      	add	r3, r1
 80006d2:	761a      	strb	r2, [r3, #24]
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	e000e100 	.word	0xe000e100
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b089      	sub	sp, #36	; 0x24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	f003 0307 	and.w	r3, r3, #7
 80006fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006fc:	69fb      	ldr	r3, [r7, #28]
 80006fe:	f1c3 0307 	rsb	r3, r3, #7
 8000702:	2b04      	cmp	r3, #4
 8000704:	bf28      	it	cs
 8000706:	2304      	movcs	r3, #4
 8000708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	3304      	adds	r3, #4
 800070e:	2b06      	cmp	r3, #6
 8000710:	d902      	bls.n	8000718 <NVIC_EncodePriority+0x30>
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	3b03      	subs	r3, #3
 8000716:	e000      	b.n	800071a <NVIC_EncodePriority+0x32>
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800071c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000720:	69bb      	ldr	r3, [r7, #24]
 8000722:	fa02 f303 	lsl.w	r3, r2, r3
 8000726:	43da      	mvns	r2, r3
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	401a      	ands	r2, r3
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000730:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	fa01 f303 	lsl.w	r3, r1, r3
 800073a:	43d9      	mvns	r1, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000740:	4313      	orrs	r3, r2
         );
}
 8000742:	4618      	mov	r0, r3
 8000744:	3724      	adds	r7, #36	; 0x24
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
	...

08000750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3b01      	subs	r3, #1
 800075c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000760:	d301      	bcc.n	8000766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000762:	2301      	movs	r3, #1
 8000764:	e00f      	b.n	8000786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000766:	4a0a      	ldr	r2, [pc, #40]	; (8000790 <SysTick_Config+0x40>)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3b01      	subs	r3, #1
 800076c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800076e:	210f      	movs	r1, #15
 8000770:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000774:	f7ff ff8e 	bl	8000694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <SysTick_Config+0x40>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077e:	4b04      	ldr	r3, [pc, #16]	; (8000790 <SysTick_Config+0x40>)
 8000780:	2207      	movs	r2, #7
 8000782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	e000e010 	.word	0xe000e010

08000794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f7ff ff29 	bl	80005f4 <__NVIC_SetPriorityGrouping>
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b086      	sub	sp, #24
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	4603      	mov	r3, r0
 80007b2:	60b9      	str	r1, [r7, #8]
 80007b4:	607a      	str	r2, [r7, #4]
 80007b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007bc:	f7ff ff3e 	bl	800063c <__NVIC_GetPriorityGrouping>
 80007c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	68b9      	ldr	r1, [r7, #8]
 80007c6:	6978      	ldr	r0, [r7, #20]
 80007c8:	f7ff ff8e 	bl	80006e8 <NVIC_EncodePriority>
 80007cc:	4602      	mov	r2, r0
 80007ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff ff5d 	bl	8000694 <__NVIC_SetPriority>
}
 80007da:	bf00      	nop
 80007dc:	3718      	adds	r7, #24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b082      	sub	sp, #8
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	4603      	mov	r3, r0
 80007ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ff31 	bl	8000658 <__NVIC_EnableIRQ>
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b082      	sub	sp, #8
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff ffa2 	bl	8000750 <SysTick_Config>
 800080c:	4603      	mov	r3, r0
}
 800080e:	4618      	mov	r0, r3
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000818:	b480      	push	{r7}
 800081a:	b087      	sub	sp, #28
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000826:	e17f      	b.n	8000b28 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	2101      	movs	r1, #1
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	fa01 f303 	lsl.w	r3, r1, r3
 8000834:	4013      	ands	r3, r2
 8000836:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	2b00      	cmp	r3, #0
 800083c:	f000 8171 	beq.w	8000b22 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	2b01      	cmp	r3, #1
 8000846:	d00b      	beq.n	8000860 <HAL_GPIO_Init+0x48>
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	2b02      	cmp	r3, #2
 800084e:	d007      	beq.n	8000860 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000854:	2b11      	cmp	r3, #17
 8000856:	d003      	beq.n	8000860 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	2b12      	cmp	r3, #18
 800085e:	d130      	bne.n	80008c2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	689b      	ldr	r3, [r3, #8]
 8000864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	2203      	movs	r2, #3
 800086c:	fa02 f303 	lsl.w	r3, r2, r3
 8000870:	43db      	mvns	r3, r3
 8000872:	693a      	ldr	r2, [r7, #16]
 8000874:	4013      	ands	r3, r2
 8000876:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	68da      	ldr	r2, [r3, #12]
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	005b      	lsls	r3, r3, #1
 8000880:	fa02 f303 	lsl.w	r3, r2, r3
 8000884:	693a      	ldr	r2, [r7, #16]
 8000886:	4313      	orrs	r3, r2
 8000888:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	693a      	ldr	r2, [r7, #16]
 800088e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000896:	2201      	movs	r2, #1
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	fa02 f303 	lsl.w	r3, r2, r3
 800089e:	43db      	mvns	r3, r3
 80008a0:	693a      	ldr	r2, [r7, #16]
 80008a2:	4013      	ands	r3, r2
 80008a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	091b      	lsrs	r3, r3, #4
 80008ac:	f003 0201 	and.w	r2, r3, #1
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	fa02 f303 	lsl.w	r3, r2, r3
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	4313      	orrs	r3, r2
 80008ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	693a      	ldr	r2, [r7, #16]
 80008c0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	f003 0303 	and.w	r3, r3, #3
 80008ca:	2b03      	cmp	r3, #3
 80008cc:	d118      	bne.n	8000900 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80008d4:	2201      	movs	r2, #1
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	fa02 f303 	lsl.w	r3, r2, r3
 80008dc:	43db      	mvns	r3, r3
 80008de:	693a      	ldr	r2, [r7, #16]
 80008e0:	4013      	ands	r3, r2
 80008e2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	08db      	lsrs	r3, r3, #3
 80008ea:	f003 0201 	and.w	r2, r3, #1
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	fa02 f303 	lsl.w	r3, r2, r3
 80008f4:	693a      	ldr	r2, [r7, #16]
 80008f6:	4313      	orrs	r3, r2
 80008f8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	693a      	ldr	r2, [r7, #16]
 80008fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	68db      	ldr	r3, [r3, #12]
 8000904:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	2203      	movs	r2, #3
 800090c:	fa02 f303 	lsl.w	r3, r2, r3
 8000910:	43db      	mvns	r3, r3
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	4013      	ands	r3, r2
 8000916:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	689a      	ldr	r2, [r3, #8]
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	693a      	ldr	r2, [r7, #16]
 8000926:	4313      	orrs	r3, r2
 8000928:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	693a      	ldr	r2, [r7, #16]
 800092e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	2b02      	cmp	r3, #2
 8000936:	d003      	beq.n	8000940 <HAL_GPIO_Init+0x128>
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	2b12      	cmp	r3, #18
 800093e:	d123      	bne.n	8000988 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	08da      	lsrs	r2, r3, #3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	3208      	adds	r2, #8
 8000948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800094c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	f003 0307 	and.w	r3, r3, #7
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	220f      	movs	r2, #15
 8000958:	fa02 f303 	lsl.w	r3, r2, r3
 800095c:	43db      	mvns	r3, r3
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	4013      	ands	r3, r2
 8000962:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	691a      	ldr	r2, [r3, #16]
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	f003 0307 	and.w	r3, r3, #7
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	fa02 f303 	lsl.w	r3, r2, r3
 8000974:	693a      	ldr	r2, [r7, #16]
 8000976:	4313      	orrs	r3, r2
 8000978:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	08da      	lsrs	r2, r3, #3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	3208      	adds	r2, #8
 8000982:	6939      	ldr	r1, [r7, #16]
 8000984:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	2203      	movs	r2, #3
 8000994:	fa02 f303 	lsl.w	r3, r2, r3
 8000998:	43db      	mvns	r3, r3
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	4013      	ands	r3, r2
 800099e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	f003 0203 	and.w	r2, r3, #3
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	fa02 f303 	lsl.w	r3, r2, r3
 80009b0:	693a      	ldr	r2, [r7, #16]
 80009b2:	4313      	orrs	r3, r2
 80009b4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	693a      	ldr	r2, [r7, #16]
 80009ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	f000 80ac 	beq.w	8000b22 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ca:	4b5e      	ldr	r3, [pc, #376]	; (8000b44 <HAL_GPIO_Init+0x32c>)
 80009cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ce:	4a5d      	ldr	r2, [pc, #372]	; (8000b44 <HAL_GPIO_Init+0x32c>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6613      	str	r3, [r2, #96]	; 0x60
 80009d6:	4b5b      	ldr	r3, [pc, #364]	; (8000b44 <HAL_GPIO_Init+0x32c>)
 80009d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009e2:	4a59      	ldr	r2, [pc, #356]	; (8000b48 <HAL_GPIO_Init+0x330>)
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	089b      	lsrs	r3, r3, #2
 80009e8:	3302      	adds	r3, #2
 80009ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	f003 0303 	and.w	r3, r3, #3
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	220f      	movs	r2, #15
 80009fa:	fa02 f303 	lsl.w	r3, r2, r3
 80009fe:	43db      	mvns	r3, r3
 8000a00:	693a      	ldr	r2, [r7, #16]
 8000a02:	4013      	ands	r3, r2
 8000a04:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a0c:	d025      	beq.n	8000a5a <HAL_GPIO_Init+0x242>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a4e      	ldr	r2, [pc, #312]	; (8000b4c <HAL_GPIO_Init+0x334>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d01f      	beq.n	8000a56 <HAL_GPIO_Init+0x23e>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a4d      	ldr	r2, [pc, #308]	; (8000b50 <HAL_GPIO_Init+0x338>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d019      	beq.n	8000a52 <HAL_GPIO_Init+0x23a>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a4c      	ldr	r2, [pc, #304]	; (8000b54 <HAL_GPIO_Init+0x33c>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d013      	beq.n	8000a4e <HAL_GPIO_Init+0x236>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a4b      	ldr	r2, [pc, #300]	; (8000b58 <HAL_GPIO_Init+0x340>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d00d      	beq.n	8000a4a <HAL_GPIO_Init+0x232>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a4a      	ldr	r2, [pc, #296]	; (8000b5c <HAL_GPIO_Init+0x344>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d007      	beq.n	8000a46 <HAL_GPIO_Init+0x22e>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4a49      	ldr	r2, [pc, #292]	; (8000b60 <HAL_GPIO_Init+0x348>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d101      	bne.n	8000a42 <HAL_GPIO_Init+0x22a>
 8000a3e:	2306      	movs	r3, #6
 8000a40:	e00c      	b.n	8000a5c <HAL_GPIO_Init+0x244>
 8000a42:	2307      	movs	r3, #7
 8000a44:	e00a      	b.n	8000a5c <HAL_GPIO_Init+0x244>
 8000a46:	2305      	movs	r3, #5
 8000a48:	e008      	b.n	8000a5c <HAL_GPIO_Init+0x244>
 8000a4a:	2304      	movs	r3, #4
 8000a4c:	e006      	b.n	8000a5c <HAL_GPIO_Init+0x244>
 8000a4e:	2303      	movs	r3, #3
 8000a50:	e004      	b.n	8000a5c <HAL_GPIO_Init+0x244>
 8000a52:	2302      	movs	r3, #2
 8000a54:	e002      	b.n	8000a5c <HAL_GPIO_Init+0x244>
 8000a56:	2301      	movs	r3, #1
 8000a58:	e000      	b.n	8000a5c <HAL_GPIO_Init+0x244>
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	697a      	ldr	r2, [r7, #20]
 8000a5e:	f002 0203 	and.w	r2, r2, #3
 8000a62:	0092      	lsls	r2, r2, #2
 8000a64:	4093      	lsls	r3, r2
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a6c:	4936      	ldr	r1, [pc, #216]	; (8000b48 <HAL_GPIO_Init+0x330>)
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	089b      	lsrs	r3, r3, #2
 8000a72:	3302      	adds	r3, #2
 8000a74:	693a      	ldr	r2, [r7, #16]
 8000a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000a7a:	4b3a      	ldr	r3, [pc, #232]	; (8000b64 <HAL_GPIO_Init+0x34c>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	43db      	mvns	r3, r3
 8000a84:	693a      	ldr	r2, [r7, #16]
 8000a86:	4013      	ands	r3, r2
 8000a88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d003      	beq.n	8000a9e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a9e:	4a31      	ldr	r2, [pc, #196]	; (8000b64 <HAL_GPIO_Init+0x34c>)
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000aa4:	4b2f      	ldr	r3, [pc, #188]	; (8000b64 <HAL_GPIO_Init+0x34c>)
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	43db      	mvns	r3, r3
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d003      	beq.n	8000ac8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ac8:	4a26      	ldr	r2, [pc, #152]	; (8000b64 <HAL_GPIO_Init+0x34c>)
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ace:	4b25      	ldr	r3, [pc, #148]	; (8000b64 <HAL_GPIO_Init+0x34c>)
 8000ad0:	689b      	ldr	r3, [r3, #8]
 8000ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	43db      	mvns	r3, r3
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	4013      	ands	r3, r2
 8000adc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d003      	beq.n	8000af2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000af2:	4a1c      	ldr	r2, [pc, #112]	; (8000b64 <HAL_GPIO_Init+0x34c>)
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000af8:	4b1a      	ldr	r3, [pc, #104]	; (8000b64 <HAL_GPIO_Init+0x34c>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	43db      	mvns	r3, r3
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	4013      	ands	r3, r2
 8000b06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d003      	beq.n	8000b1c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000b14:	693a      	ldr	r2, [r7, #16]
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b1c:	4a11      	ldr	r2, [pc, #68]	; (8000b64 <HAL_GPIO_Init+0x34c>)
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	3301      	adds	r3, #1
 8000b26:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	f47f ae78 	bne.w	8000828 <HAL_GPIO_Init+0x10>
  }
}
 8000b38:	bf00      	nop
 8000b3a:	371c      	adds	r7, #28
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	40021000 	.word	0x40021000
 8000b48:	40010000 	.word	0x40010000
 8000b4c:	48000400 	.word	0x48000400
 8000b50:	48000800 	.word	0x48000800
 8000b54:	48000c00 	.word	0x48000c00
 8000b58:	48001000 	.word	0x48001000
 8000b5c:	48001400 	.word	0x48001400
 8000b60:	48001800 	.word	0x48001800
 8000b64:	40010400 	.word	0x40010400

08000b68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	460b      	mov	r3, r1
 8000b72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	691a      	ldr	r2, [r3, #16]
 8000b78:	887b      	ldrh	r3, [r7, #2]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d002      	beq.n	8000b86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000b80:	2301      	movs	r3, #1
 8000b82:	73fb      	strb	r3, [r7, #15]
 8000b84:	e001      	b.n	8000b8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b86:	2300      	movs	r3, #0
 8000b88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	807b      	strh	r3, [r7, #2]
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ba8:	787b      	ldrb	r3, [r7, #1]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d003      	beq.n	8000bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bae:	887a      	ldrh	r2, [r7, #2]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000bb4:	e002      	b.n	8000bbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bb6:	887a      	ldrh	r2, [r7, #2]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000bbc:	bf00      	nop
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bca:	b08f      	sub	sp, #60	; 0x3c
 8000bcc:	af0a      	add	r7, sp, #40	; 0x28
 8000bce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d101      	bne.n	8000bda <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e116      	b.n	8000e08 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d106      	bne.n	8000bfa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f006 f8a3 	bl	8006d40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2203      	movs	r2, #3
 8000bfe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d102      	bne.n	8000c14 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f003 f8a4 	bl	8003d66 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	687e      	ldr	r6, [r7, #4]
 8000c26:	466d      	mov	r5, sp
 8000c28:	f106 0410 	add.w	r4, r6, #16
 8000c2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c34:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c38:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c3c:	1d33      	adds	r3, r6, #4
 8000c3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c40:	6838      	ldr	r0, [r7, #0]
 8000c42:	f002 ff91 	bl	8003b68 <USB_CoreInit>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d005      	beq.n	8000c58 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2202      	movs	r2, #2
 8000c50:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000c54:	2301      	movs	r3, #1
 8000c56:	e0d7      	b.n	8000e08 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f003 f892 	bl	8003d88 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c64:	2300      	movs	r3, #0
 8000c66:	73fb      	strb	r3, [r7, #15]
 8000c68:	e04a      	b.n	8000d00 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000c6a:	7bfa      	ldrb	r2, [r7, #15]
 8000c6c:	6879      	ldr	r1, [r7, #4]
 8000c6e:	4613      	mov	r3, r2
 8000c70:	00db      	lsls	r3, r3, #3
 8000c72:	1a9b      	subs	r3, r3, r2
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	440b      	add	r3, r1
 8000c78:	333d      	adds	r3, #61	; 0x3d
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000c7e:	7bfa      	ldrb	r2, [r7, #15]
 8000c80:	6879      	ldr	r1, [r7, #4]
 8000c82:	4613      	mov	r3, r2
 8000c84:	00db      	lsls	r3, r3, #3
 8000c86:	1a9b      	subs	r3, r3, r2
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	440b      	add	r3, r1
 8000c8c:	333c      	adds	r3, #60	; 0x3c
 8000c8e:	7bfa      	ldrb	r2, [r7, #15]
 8000c90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000c92:	7bfa      	ldrb	r2, [r7, #15]
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
 8000c96:	b298      	uxth	r0, r3
 8000c98:	6879      	ldr	r1, [r7, #4]
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	00db      	lsls	r3, r3, #3
 8000c9e:	1a9b      	subs	r3, r3, r2
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	440b      	add	r3, r1
 8000ca4:	3342      	adds	r3, #66	; 0x42
 8000ca6:	4602      	mov	r2, r0
 8000ca8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000caa:	7bfa      	ldrb	r2, [r7, #15]
 8000cac:	6879      	ldr	r1, [r7, #4]
 8000cae:	4613      	mov	r3, r2
 8000cb0:	00db      	lsls	r3, r3, #3
 8000cb2:	1a9b      	subs	r3, r3, r2
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	440b      	add	r3, r1
 8000cb8:	333f      	adds	r3, #63	; 0x3f
 8000cba:	2200      	movs	r2, #0
 8000cbc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000cbe:	7bfa      	ldrb	r2, [r7, #15]
 8000cc0:	6879      	ldr	r1, [r7, #4]
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	00db      	lsls	r3, r3, #3
 8000cc6:	1a9b      	subs	r3, r3, r2
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	440b      	add	r3, r1
 8000ccc:	3344      	adds	r3, #68	; 0x44
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000cd2:	7bfa      	ldrb	r2, [r7, #15]
 8000cd4:	6879      	ldr	r1, [r7, #4]
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	00db      	lsls	r3, r3, #3
 8000cda:	1a9b      	subs	r3, r3, r2
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	440b      	add	r3, r1
 8000ce0:	3348      	adds	r3, #72	; 0x48
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000ce6:	7bfa      	ldrb	r2, [r7, #15]
 8000ce8:	6879      	ldr	r1, [r7, #4]
 8000cea:	4613      	mov	r3, r2
 8000cec:	00db      	lsls	r3, r3, #3
 8000cee:	1a9b      	subs	r3, r3, r2
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	3350      	adds	r3, #80	; 0x50
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cfa:	7bfb      	ldrb	r3, [r7, #15]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	73fb      	strb	r3, [r7, #15]
 8000d00:	7bfa      	ldrb	r2, [r7, #15]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d3af      	bcc.n	8000c6a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	73fb      	strb	r3, [r7, #15]
 8000d0e:	e044      	b.n	8000d9a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000d10:	7bfa      	ldrb	r2, [r7, #15]
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	4613      	mov	r3, r2
 8000d16:	00db      	lsls	r3, r3, #3
 8000d18:	1a9b      	subs	r3, r3, r2
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	440b      	add	r3, r1
 8000d1e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000d22:	2200      	movs	r2, #0
 8000d24:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000d26:	7bfa      	ldrb	r2, [r7, #15]
 8000d28:	6879      	ldr	r1, [r7, #4]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	00db      	lsls	r3, r3, #3
 8000d2e:	1a9b      	subs	r3, r3, r2
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	440b      	add	r3, r1
 8000d34:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000d38:	7bfa      	ldrb	r2, [r7, #15]
 8000d3a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000d3c:	7bfa      	ldrb	r2, [r7, #15]
 8000d3e:	6879      	ldr	r1, [r7, #4]
 8000d40:	4613      	mov	r3, r2
 8000d42:	00db      	lsls	r3, r3, #3
 8000d44:	1a9b      	subs	r3, r3, r2
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	440b      	add	r3, r1
 8000d4a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000d4e:	2200      	movs	r2, #0
 8000d50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000d52:	7bfa      	ldrb	r2, [r7, #15]
 8000d54:	6879      	ldr	r1, [r7, #4]
 8000d56:	4613      	mov	r3, r2
 8000d58:	00db      	lsls	r3, r3, #3
 8000d5a:	1a9b      	subs	r3, r3, r2
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	440b      	add	r3, r1
 8000d60:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d68:	7bfa      	ldrb	r2, [r7, #15]
 8000d6a:	6879      	ldr	r1, [r7, #4]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	00db      	lsls	r3, r3, #3
 8000d70:	1a9b      	subs	r3, r3, r2
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	440b      	add	r3, r1
 8000d76:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d7e:	7bfa      	ldrb	r2, [r7, #15]
 8000d80:	6879      	ldr	r1, [r7, #4]
 8000d82:	4613      	mov	r3, r2
 8000d84:	00db      	lsls	r3, r3, #3
 8000d86:	1a9b      	subs	r3, r3, r2
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	440b      	add	r3, r1
 8000d8c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
 8000d96:	3301      	adds	r3, #1
 8000d98:	73fb      	strb	r3, [r7, #15]
 8000d9a:	7bfa      	ldrb	r2, [r7, #15]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d3b5      	bcc.n	8000d10 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	603b      	str	r3, [r7, #0]
 8000daa:	687e      	ldr	r6, [r7, #4]
 8000dac:	466d      	mov	r5, sp
 8000dae:	f106 0410 	add.w	r4, r6, #16
 8000db2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000db4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000db6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000db8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dba:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000dbe:	e885 0003 	stmia.w	r5, {r0, r1}
 8000dc2:	1d33      	adds	r3, r6, #4
 8000dc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dc6:	6838      	ldr	r0, [r7, #0]
 8000dc8:	f003 f808 	bl	8003ddc <USB_DevInit>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d005      	beq.n	8000dde <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2202      	movs	r2, #2
 8000dd6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e014      	b.n	8000e08 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2200      	movs	r2, #0
 8000de2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2201      	movs	r2, #1
 8000dea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d102      	bne.n	8000dfc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f000 ff4a 	bl	8001c90 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f003 ff8a 	bl	8004d1a <USB_DevDisconnect>

  return HAL_OK;
 8000e06:	2300      	movs	r3, #0
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3714      	adds	r7, #20
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e10 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d101      	bne.n	8000e2c <HAL_PCD_Start+0x1c>
 8000e28:	2302      	movs	r3, #2
 8000e2a:	e01c      	b.n	8000e66 <HAL_PCD_Start+0x56>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2201      	movs	r2, #1
 8000e30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d105      	bne.n	8000e48 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e40:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f002 ff79 	bl	8003d44 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4618      	mov	r0, r3
 8000e58:	f003 ff3e 	bl	8004cd8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000e6e:	b590      	push	{r4, r7, lr}
 8000e70:	b08d      	sub	sp, #52	; 0x34
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000e7c:	6a3b      	ldr	r3, [r7, #32]
 8000e7e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f003 fffc 	bl	8004e82 <USB_GetMode>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	f040 838f 	bne.w	80015b0 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f003 ff60 	bl	8004d5c <USB_ReadInterrupts>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	f000 8385 	beq.w	80015ae <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f003 ff57 	bl	8004d5c <USB_ReadInterrupts>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	f003 0302 	and.w	r3, r3, #2
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d107      	bne.n	8000ec8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	695a      	ldr	r2, [r3, #20]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f002 0202 	and.w	r2, r2, #2
 8000ec6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f003 ff45 	bl	8004d5c <USB_ReadInterrupts>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	f003 0310 	and.w	r3, r3, #16
 8000ed8:	2b10      	cmp	r3, #16
 8000eda:	d161      	bne.n	8000fa0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	699a      	ldr	r2, [r3, #24]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f022 0210 	bic.w	r2, r2, #16
 8000eea:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8000eec:	6a3b      	ldr	r3, [r7, #32]
 8000eee:	6a1b      	ldr	r3, [r3, #32]
 8000ef0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	f003 020f 	and.w	r2, r3, #15
 8000ef8:	4613      	mov	r3, r2
 8000efa:	00db      	lsls	r3, r3, #3
 8000efc:	1a9b      	subs	r3, r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	4413      	add	r3, r2
 8000f08:	3304      	adds	r3, #4
 8000f0a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	0c5b      	lsrs	r3, r3, #17
 8000f10:	f003 030f 	and.w	r3, r3, #15
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d124      	bne.n	8000f62 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000f1e:	4013      	ands	r3, r2
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d035      	beq.n	8000f90 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	091b      	lsrs	r3, r3, #4
 8000f2c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000f2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	461a      	mov	r2, r3
 8000f36:	6a38      	ldr	r0, [r7, #32]
 8000f38:	f003 fdab 	bl	8004a92 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	68da      	ldr	r2, [r3, #12]
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	091b      	lsrs	r3, r3, #4
 8000f44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f48:	441a      	add	r2, r3
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	699a      	ldr	r2, [r3, #24]
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	091b      	lsrs	r3, r3, #4
 8000f56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f5a:	441a      	add	r2, r3
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	619a      	str	r2, [r3, #24]
 8000f60:	e016      	b.n	8000f90 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	0c5b      	lsrs	r3, r3, #17
 8000f66:	f003 030f 	and.w	r3, r3, #15
 8000f6a:	2b06      	cmp	r3, #6
 8000f6c:	d110      	bne.n	8000f90 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8000f74:	2208      	movs	r2, #8
 8000f76:	4619      	mov	r1, r3
 8000f78:	6a38      	ldr	r0, [r7, #32]
 8000f7a:	f003 fd8a 	bl	8004a92 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	699a      	ldr	r2, [r3, #24]
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	091b      	lsrs	r3, r3, #4
 8000f86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f8a:	441a      	add	r2, r3
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	699a      	ldr	r2, [r3, #24]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f042 0210 	orr.w	r2, r2, #16
 8000f9e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f003 fed9 	bl	8004d5c <USB_ReadInterrupts>
 8000faa:	4603      	mov	r3, r0
 8000fac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fb0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000fb4:	d16e      	bne.n	8001094 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f003 fedf 	bl	8004d82 <USB_ReadDevAllOutEpInterrupt>
 8000fc4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8000fc6:	e062      	b.n	800108e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8000fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d057      	beq.n	8001082 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fd8:	b2d2      	uxtb	r2, r2
 8000fda:	4611      	mov	r1, r2
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f003 ff04 	bl	8004dea <USB_ReadDevOutEPInterrupt>
 8000fe2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d00c      	beq.n	8001008 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff0:	015a      	lsls	r2, r3, #5
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001000:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f000 fd6a 	bl	8001adc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	f003 0308 	and.w	r3, r3, #8
 800100e:	2b00      	cmp	r3, #0
 8001010:	d00c      	beq.n	800102c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001014:	015a      	lsls	r2, r3, #5
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	4413      	add	r3, r2
 800101a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800101e:	461a      	mov	r2, r3
 8001020:	2308      	movs	r3, #8
 8001022:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001024:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f000 fda6 	bl	8001b78 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	f003 0310 	and.w	r3, r3, #16
 8001032:	2b00      	cmp	r3, #0
 8001034:	d008      	beq.n	8001048 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001038:	015a      	lsls	r2, r3, #5
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	4413      	add	r3, r2
 800103e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001042:	461a      	mov	r2, r3
 8001044:	2310      	movs	r3, #16
 8001046:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	f003 0320 	and.w	r3, r3, #32
 800104e:	2b00      	cmp	r3, #0
 8001050:	d008      	beq.n	8001064 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001054:	015a      	lsls	r2, r3, #5
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	4413      	add	r3, r2
 800105a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800105e:	461a      	mov	r2, r3
 8001060:	2320      	movs	r3, #32
 8001062:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d009      	beq.n	8001082 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800106e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001070:	015a      	lsls	r2, r3, #5
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	4413      	add	r3, r2
 8001076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800107a:	461a      	mov	r2, r3
 800107c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001080:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001084:	3301      	adds	r3, #1
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800108a:	085b      	lsrs	r3, r3, #1
 800108c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800108e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001090:	2b00      	cmp	r3, #0
 8001092:	d199      	bne.n	8000fc8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4618      	mov	r0, r3
 800109a:	f003 fe5f 	bl	8004d5c <USB_ReadInterrupts>
 800109e:	4603      	mov	r3, r0
 80010a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80010a8:	f040 8087 	bne.w	80011ba <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f003 fe80 	bl	8004db6 <USB_ReadDevAllInEpInterrupt>
 80010b6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80010b8:	2300      	movs	r3, #0
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80010bc:	e07a      	b.n	80011b4 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80010be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d06f      	beq.n	80011a8 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	4611      	mov	r1, r2
 80010d2:	4618      	mov	r0, r3
 80010d4:	f003 fea7 	bl	8004e26 <USB_ReadDevInEPInterrupt>
 80010d8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d020      	beq.n	8001126 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80010e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e6:	f003 030f 	and.w	r3, r3, #15
 80010ea:	2201      	movs	r2, #1
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80010f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69f9      	ldr	r1, [r7, #28]
 8001100:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001104:	4013      	ands	r3, r2
 8001106:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110a:	015a      	lsls	r2, r3, #5
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	4413      	add	r3, r2
 8001110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001114:	461a      	mov	r2, r3
 8001116:	2301      	movs	r3, #1
 8001118:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800111a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111c:	b2db      	uxtb	r3, r3
 800111e:	4619      	mov	r1, r3
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f005 fea0 	bl	8006e66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	f003 0308 	and.w	r3, r3, #8
 800112c:	2b00      	cmp	r3, #0
 800112e:	d008      	beq.n	8001142 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001132:	015a      	lsls	r2, r3, #5
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	4413      	add	r3, r2
 8001138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800113c:	461a      	mov	r2, r3
 800113e:	2308      	movs	r3, #8
 8001140:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	f003 0310 	and.w	r3, r3, #16
 8001148:	2b00      	cmp	r3, #0
 800114a:	d008      	beq.n	800115e <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800114c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114e:	015a      	lsls	r2, r3, #5
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	4413      	add	r3, r2
 8001154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001158:	461a      	mov	r2, r3
 800115a:	2310      	movs	r3, #16
 800115c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001164:	2b00      	cmp	r3, #0
 8001166:	d008      	beq.n	800117a <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116a:	015a      	lsls	r2, r3, #5
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	4413      	add	r3, r2
 8001170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001174:	461a      	mov	r2, r3
 8001176:	2340      	movs	r3, #64	; 0x40
 8001178:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	f003 0302 	and.w	r3, r3, #2
 8001180:	2b00      	cmp	r3, #0
 8001182:	d008      	beq.n	8001196 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001186:	015a      	lsls	r2, r3, #5
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	4413      	add	r3, r2
 800118c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001190:	461a      	mov	r2, r3
 8001192:	2302      	movs	r3, #2
 8001194:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80011a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f000 fc11 	bl	80019ca <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80011a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011aa:	3301      	adds	r3, #1
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80011ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011b0:	085b      	lsrs	r3, r3, #1
 80011b2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80011b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d181      	bne.n	80010be <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f003 fdcc 	bl	8004d5c <USB_ReadInterrupts>
 80011c4:	4603      	mov	r3, r0
 80011c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80011ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80011ce:	d122      	bne.n	8001216 <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	69fa      	ldr	r2, [r7, #28]
 80011da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80011de:	f023 0301 	bic.w	r3, r3, #1
 80011e2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d108      	bne.n	8001200 <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80011f6:	2100      	movs	r1, #0
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f006 f939 	bl	8007470 <HAL_PCDEx_LPM_Callback>
 80011fe:	e002      	b.n	8001206 <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f005 fe9d 	bl	8006f40 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	695a      	ldr	r2, [r3, #20]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001214:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f003 fd9e 	bl	8004d5c <USB_ReadInterrupts>
 8001220:	4603      	mov	r3, r0
 8001222:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001226:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800122a:	d112      	bne.n	8001252 <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	2b01      	cmp	r3, #1
 800123a:	d102      	bne.n	8001242 <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f005 fe59 	bl	8006ef4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	695a      	ldr	r2, [r3, #20]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001250:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f003 fd80 	bl	8004d5c <USB_ReadInterrupts>
 800125c:	4603      	mov	r3, r0
 800125e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001262:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001266:	d121      	bne.n	80012ac <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	695a      	ldr	r2, [r3, #20]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001276:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800127e:	2b00      	cmp	r3, #0
 8001280:	d111      	bne.n	80012a6 <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2201      	movs	r2, #1
 8001286:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001290:	089b      	lsrs	r3, r3, #2
 8001292:	f003 020f 	and.w	r2, r3, #15
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800129c:	2101      	movs	r1, #1
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f006 f8e6 	bl	8007470 <HAL_PCDEx_LPM_Callback>
 80012a4:	e002      	b.n	80012ac <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f005 fe24 	bl	8006ef4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f003 fd53 	bl	8004d5c <USB_ReadInterrupts>
 80012b6:	4603      	mov	r3, r0
 80012b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012c0:	f040 80c5 	bne.w	800144e <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	69fa      	ldr	r2, [r7, #28]
 80012ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80012d2:	f023 0301 	bic.w	r3, r3, #1
 80012d6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2110      	movs	r1, #16
 80012de:	4618      	mov	r0, r3
 80012e0:	f002 fec8 	bl	8004074 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012e4:	2300      	movs	r3, #0
 80012e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012e8:	e056      	b.n	8001398 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80012ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ec:	015a      	lsls	r2, r3, #5
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	4413      	add	r3, r2
 80012f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80012f6:	461a      	mov	r2, r3
 80012f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80012fc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80012fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001300:	015a      	lsls	r2, r3, #5
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	4413      	add	r3, r2
 8001306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800130e:	0151      	lsls	r1, r2, #5
 8001310:	69fa      	ldr	r2, [r7, #28]
 8001312:	440a      	add	r2, r1
 8001314:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001318:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800131c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800131e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001320:	015a      	lsls	r2, r3, #5
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	4413      	add	r3, r2
 8001326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800132e:	0151      	lsls	r1, r2, #5
 8001330:	69fa      	ldr	r2, [r7, #28]
 8001332:	440a      	add	r2, r1
 8001334:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001338:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800133c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800133e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001340:	015a      	lsls	r2, r3, #5
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	4413      	add	r3, r2
 8001346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800134a:	461a      	mov	r2, r3
 800134c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001350:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001354:	015a      	lsls	r2, r3, #5
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	4413      	add	r3, r2
 800135a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001362:	0151      	lsls	r1, r2, #5
 8001364:	69fa      	ldr	r2, [r7, #28]
 8001366:	440a      	add	r2, r1
 8001368:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800136c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001370:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001374:	015a      	lsls	r2, r3, #5
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	4413      	add	r3, r2
 800137a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001382:	0151      	lsls	r1, r2, #5
 8001384:	69fa      	ldr	r2, [r7, #28]
 8001386:	440a      	add	r2, r1
 8001388:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800138c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001390:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001394:	3301      	adds	r3, #1
 8001396:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800139e:	429a      	cmp	r2, r3
 80013a0:	d3a3      	bcc.n	80012ea <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	69fa      	ldr	r2, [r7, #28]
 80013ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013b0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80013b4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d016      	beq.n	80013ec <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013c8:	69fa      	ldr	r2, [r7, #28]
 80013ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013ce:	f043 030b 	orr.w	r3, r3, #11
 80013d2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013de:	69fa      	ldr	r2, [r7, #28]
 80013e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013e4:	f043 030b 	orr.w	r3, r3, #11
 80013e8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ea:	e015      	b.n	8001418 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013f2:	695b      	ldr	r3, [r3, #20]
 80013f4:	69fa      	ldr	r2, [r7, #28]
 80013f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013fe:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001402:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800140a:	691b      	ldr	r3, [r3, #16]
 800140c:	69fa      	ldr	r2, [r7, #28]
 800140e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001412:	f043 030b 	orr.w	r3, r3, #11
 8001416:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	69fa      	ldr	r2, [r7, #28]
 8001422:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001426:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800142a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001436:	4619      	mov	r1, r3
 8001438:	4610      	mov	r0, r2
 800143a:	f003 fd53 	bl	8004ee4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	695a      	ldr	r2, [r3, #20]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800144c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4618      	mov	r0, r3
 8001454:	f003 fc82 	bl	8004d5c <USB_ReadInterrupts>
 8001458:	4603      	mov	r3, r0
 800145a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800145e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001462:	d124      	bne.n	80014ae <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f003 fd18 	bl	8004e9e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f002 fe5f 	bl	8004136 <USB_GetDevSpeed>
 8001478:	4603      	mov	r3, r0
 800147a:	461a      	mov	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681c      	ldr	r4, [r3, #0]
 8001484:	f001 f9ee 	bl	8002864 <HAL_RCC_GetHCLKFreq>
 8001488:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800148e:	b2db      	uxtb	r3, r3
 8001490:	461a      	mov	r2, r3
 8001492:	4620      	mov	r0, r4
 8001494:	f002 fbba 	bl	8003c0c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f005 fd0c 	bl	8006eb6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	695a      	ldr	r2, [r3, #20]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80014ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f003 fc52 	bl	8004d5c <USB_ReadInterrupts>
 80014b8:	4603      	mov	r3, r0
 80014ba:	f003 0308 	and.w	r3, r3, #8
 80014be:	2b08      	cmp	r3, #8
 80014c0:	d10a      	bne.n	80014d8 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f005 fce9 	bl	8006e9a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	695a      	ldr	r2, [r3, #20]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f002 0208 	and.w	r2, r2, #8
 80014d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f003 fc3d 	bl	8004d5c <USB_ReadInterrupts>
 80014e2:	4603      	mov	r3, r0
 80014e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80014ec:	d10f      	bne.n	800150e <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80014ee:	2300      	movs	r3, #0
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	4619      	mov	r1, r3
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f005 fd5b 	bl	8006fb4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	695a      	ldr	r2, [r3, #20]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800150c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f003 fc22 	bl	8004d5c <USB_ReadInterrupts>
 8001518:	4603      	mov	r3, r0
 800151a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800151e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001522:	d10f      	bne.n	8001544 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001524:	2300      	movs	r3, #0
 8001526:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152a:	b2db      	uxtb	r3, r3
 800152c:	4619      	mov	r1, r3
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f005 fd2e 	bl	8006f90 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	695a      	ldr	r2, [r3, #20]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001542:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f003 fc07 	bl	8004d5c <USB_ReadInterrupts>
 800154e:	4603      	mov	r3, r0
 8001550:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001558:	d10a      	bne.n	8001570 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f005 fd3c 	bl	8006fd8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	695a      	ldr	r2, [r3, #20]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800156e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4618      	mov	r0, r3
 8001576:	f003 fbf1 	bl	8004d5c <USB_ReadInterrupts>
 800157a:	4603      	mov	r3, r0
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	2b04      	cmp	r3, #4
 8001582:	d115      	bne.n	80015b0 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	f003 0304 	and.w	r3, r3, #4
 8001592:	2b00      	cmp	r3, #0
 8001594:	d002      	beq.n	800159c <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f005 fd2c 	bl	8006ff4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6859      	ldr	r1, [r3, #4]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	430a      	orrs	r2, r1
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	e000      	b.n	80015b0 <HAL_PCD_IRQHandler+0x742>
      return;
 80015ae:	bf00      	nop
    }
  }
}
 80015b0:	3734      	adds	r7, #52	; 0x34
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd90      	pop	{r4, r7, pc}

080015b6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
 80015be:	460b      	mov	r3, r1
 80015c0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d101      	bne.n	80015d0 <HAL_PCD_SetAddress+0x1a>
 80015cc:	2302      	movs	r3, #2
 80015ce:	e013      	b.n	80015f8 <HAL_PCD_SetAddress+0x42>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2201      	movs	r2, #1
 80015d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	78fa      	ldrb	r2, [r7, #3]
 80015dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	78fa      	ldrb	r2, [r7, #3]
 80015e6:	4611      	mov	r1, r2
 80015e8:	4618      	mov	r0, r3
 80015ea:	f003 fb4f 	bl	8004c8c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	4608      	mov	r0, r1
 800160a:	4611      	mov	r1, r2
 800160c:	461a      	mov	r2, r3
 800160e:	4603      	mov	r3, r0
 8001610:	70fb      	strb	r3, [r7, #3]
 8001612:	460b      	mov	r3, r1
 8001614:	803b      	strh	r3, [r7, #0]
 8001616:	4613      	mov	r3, r2
 8001618:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800161a:	2300      	movs	r3, #0
 800161c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800161e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001622:	2b00      	cmp	r3, #0
 8001624:	da0f      	bge.n	8001646 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001626:	78fb      	ldrb	r3, [r7, #3]
 8001628:	f003 020f 	and.w	r2, r3, #15
 800162c:	4613      	mov	r3, r2
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	1a9b      	subs	r3, r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	3338      	adds	r3, #56	; 0x38
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	4413      	add	r3, r2
 800163a:	3304      	adds	r3, #4
 800163c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2201      	movs	r2, #1
 8001642:	705a      	strb	r2, [r3, #1]
 8001644:	e00f      	b.n	8001666 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001646:	78fb      	ldrb	r3, [r7, #3]
 8001648:	f003 020f 	and.w	r2, r3, #15
 800164c:	4613      	mov	r3, r2
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	1a9b      	subs	r3, r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	4413      	add	r3, r2
 800165c:	3304      	adds	r3, #4
 800165e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2200      	movs	r2, #0
 8001664:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001666:	78fb      	ldrb	r3, [r7, #3]
 8001668:	f003 030f 	and.w	r3, r3, #15
 800166c:	b2da      	uxtb	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001672:	883a      	ldrh	r2, [r7, #0]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	78ba      	ldrb	r2, [r7, #2]
 800167c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	785b      	ldrb	r3, [r3, #1]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d004      	beq.n	8001690 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	b29a      	uxth	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001690:	78bb      	ldrb	r3, [r7, #2]
 8001692:	2b02      	cmp	r3, #2
 8001694:	d102      	bne.n	800169c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2200      	movs	r2, #0
 800169a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d101      	bne.n	80016aa <HAL_PCD_EP_Open+0xaa>
 80016a6:	2302      	movs	r3, #2
 80016a8:	e00e      	b.n	80016c8 <HAL_PCD_EP_Open+0xc8>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2201      	movs	r2, #1
 80016ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	68f9      	ldr	r1, [r7, #12]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f002 fd5b 	bl	8004174 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80016c6:	7afb      	ldrb	r3, [r7, #11]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	460b      	mov	r3, r1
 80016da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80016dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	da0f      	bge.n	8001704 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016e4:	78fb      	ldrb	r3, [r7, #3]
 80016e6:	f003 020f 	and.w	r2, r3, #15
 80016ea:	4613      	mov	r3, r2
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	1a9b      	subs	r3, r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	3338      	adds	r3, #56	; 0x38
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	4413      	add	r3, r2
 80016f8:	3304      	adds	r3, #4
 80016fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2201      	movs	r2, #1
 8001700:	705a      	strb	r2, [r3, #1]
 8001702:	e00f      	b.n	8001724 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001704:	78fb      	ldrb	r3, [r7, #3]
 8001706:	f003 020f 	and.w	r2, r3, #15
 800170a:	4613      	mov	r3, r2
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	1a9b      	subs	r3, r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	3304      	adds	r3, #4
 800171c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2200      	movs	r2, #0
 8001722:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001724:	78fb      	ldrb	r3, [r7, #3]
 8001726:	f003 030f 	and.w	r3, r3, #15
 800172a:	b2da      	uxtb	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001736:	2b01      	cmp	r3, #1
 8001738:	d101      	bne.n	800173e <HAL_PCD_EP_Close+0x6e>
 800173a:	2302      	movs	r3, #2
 800173c:	e00e      	b.n	800175c <HAL_PCD_EP_Close+0x8c>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2201      	movs	r2, #1
 8001742:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	68f9      	ldr	r1, [r7, #12]
 800174c:	4618      	mov	r0, r3
 800174e:	f002 fd99 	bl	8004284 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	607a      	str	r2, [r7, #4]
 800176e:	603b      	str	r3, [r7, #0]
 8001770:	460b      	mov	r3, r1
 8001772:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001774:	7afb      	ldrb	r3, [r7, #11]
 8001776:	f003 020f 	and.w	r2, r3, #15
 800177a:	4613      	mov	r3, r2
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	1a9b      	subs	r3, r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	4413      	add	r3, r2
 800178a:	3304      	adds	r3, #4
 800178c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	2200      	movs	r2, #0
 800179e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	2200      	movs	r2, #0
 80017a4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017a6:	7afb      	ldrb	r3, [r7, #11]
 80017a8:	f003 030f 	and.w	r3, r3, #15
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80017b2:	7afb      	ldrb	r3, [r7, #11]
 80017b4:	f003 030f 	and.w	r3, r3, #15
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d106      	bne.n	80017ca <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6979      	ldr	r1, [r7, #20]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f003 f816 	bl	80047f4 <USB_EP0StartXfer>
 80017c8:	e005      	b.n	80017d6 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6979      	ldr	r1, [r7, #20]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f002 fe33 	bl	800443c <USB_EPStartXfer>
  }

  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3718      	adds	r7, #24
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	607a      	str	r2, [r7, #4]
 80017ea:	603b      	str	r3, [r7, #0]
 80017ec:	460b      	mov	r3, r1
 80017ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017f0:	7afb      	ldrb	r3, [r7, #11]
 80017f2:	f003 020f 	and.w	r2, r3, #15
 80017f6:	4613      	mov	r3, r2
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	1a9b      	subs	r3, r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	3338      	adds	r3, #56	; 0x38
 8001800:	68fa      	ldr	r2, [r7, #12]
 8001802:	4413      	add	r3, r2
 8001804:	3304      	adds	r3, #4
 8001806:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	2200      	movs	r2, #0
 8001818:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	2201      	movs	r2, #1
 800181e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001820:	7afb      	ldrb	r3, [r7, #11]
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	b2da      	uxtb	r2, r3
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800182c:	7afb      	ldrb	r3, [r7, #11]
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	2b00      	cmp	r3, #0
 8001834:	d106      	bne.n	8001844 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6979      	ldr	r1, [r7, #20]
 800183c:	4618      	mov	r0, r3
 800183e:	f002 ffd9 	bl	80047f4 <USB_EP0StartXfer>
 8001842:	e005      	b.n	8001850 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6979      	ldr	r1, [r7, #20]
 800184a:	4618      	mov	r0, r3
 800184c:	f002 fdf6 	bl	800443c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3718      	adds	r7, #24
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b084      	sub	sp, #16
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
 8001862:	460b      	mov	r3, r1
 8001864:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001866:	78fb      	ldrb	r3, [r7, #3]
 8001868:	f003 020f 	and.w	r2, r3, #15
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	429a      	cmp	r2, r3
 8001872:	d901      	bls.n	8001878 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e04e      	b.n	8001916 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001878:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800187c:	2b00      	cmp	r3, #0
 800187e:	da0f      	bge.n	80018a0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001880:	78fb      	ldrb	r3, [r7, #3]
 8001882:	f003 020f 	and.w	r2, r3, #15
 8001886:	4613      	mov	r3, r2
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	1a9b      	subs	r3, r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	3338      	adds	r3, #56	; 0x38
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	4413      	add	r3, r2
 8001894:	3304      	adds	r3, #4
 8001896:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2201      	movs	r2, #1
 800189c:	705a      	strb	r2, [r3, #1]
 800189e:	e00d      	b.n	80018bc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80018a0:	78fa      	ldrb	r2, [r7, #3]
 80018a2:	4613      	mov	r3, r2
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	1a9b      	subs	r3, r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	4413      	add	r3, r2
 80018b2:	3304      	adds	r3, #4
 80018b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2200      	movs	r2, #0
 80018ba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2201      	movs	r2, #1
 80018c0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018c2:	78fb      	ldrb	r3, [r7, #3]
 80018c4:	f003 030f 	and.w	r3, r3, #15
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d101      	bne.n	80018dc <HAL_PCD_EP_SetStall+0x82>
 80018d8:	2302      	movs	r3, #2
 80018da:	e01c      	b.n	8001916 <HAL_PCD_EP_SetStall+0xbc>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	68f9      	ldr	r1, [r7, #12]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f003 f8fa 	bl	8004ae4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80018f0:	78fb      	ldrb	r3, [r7, #3]
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d108      	bne.n	800190c <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001904:	4619      	mov	r1, r3
 8001906:	4610      	mov	r0, r2
 8001908:	f003 faec 	bl	8004ee4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b084      	sub	sp, #16
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
 8001926:	460b      	mov	r3, r1
 8001928:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800192a:	78fb      	ldrb	r3, [r7, #3]
 800192c:	f003 020f 	and.w	r2, r3, #15
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	429a      	cmp	r2, r3
 8001936:	d901      	bls.n	800193c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e042      	b.n	80019c2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800193c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001940:	2b00      	cmp	r3, #0
 8001942:	da0f      	bge.n	8001964 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001944:	78fb      	ldrb	r3, [r7, #3]
 8001946:	f003 020f 	and.w	r2, r3, #15
 800194a:	4613      	mov	r3, r2
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	1a9b      	subs	r3, r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	3338      	adds	r3, #56	; 0x38
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	4413      	add	r3, r2
 8001958:	3304      	adds	r3, #4
 800195a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2201      	movs	r2, #1
 8001960:	705a      	strb	r2, [r3, #1]
 8001962:	e00f      	b.n	8001984 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001964:	78fb      	ldrb	r3, [r7, #3]
 8001966:	f003 020f 	and.w	r2, r3, #15
 800196a:	4613      	mov	r3, r2
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	1a9b      	subs	r3, r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	4413      	add	r3, r2
 800197a:	3304      	adds	r3, #4
 800197c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2200      	movs	r2, #0
 8001982:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2200      	movs	r2, #0
 8001988:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800198a:	78fb      	ldrb	r3, [r7, #3]
 800198c:	f003 030f 	and.w	r3, r3, #15
 8001990:	b2da      	uxtb	r2, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800199c:	2b01      	cmp	r3, #1
 800199e:	d101      	bne.n	80019a4 <HAL_PCD_EP_ClrStall+0x86>
 80019a0:	2302      	movs	r3, #2
 80019a2:	e00e      	b.n	80019c2 <HAL_PCD_EP_ClrStall+0xa4>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	68f9      	ldr	r1, [r7, #12]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f003 f904 	bl	8004bc0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b088      	sub	sp, #32
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
 80019d2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	4613      	mov	r3, r2
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	1a9b      	subs	r3, r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	3338      	adds	r3, #56	; 0x38
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	4413      	add	r3, r2
 80019ee:	3304      	adds	r3, #4
 80019f0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	699a      	ldr	r2, [r3, #24]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d901      	bls.n	8001a02 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e067      	b.n	8001ad2 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	695a      	ldr	r2, [r3, #20]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	69fa      	ldr	r2, [r7, #28]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d902      	bls.n	8001a1e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3303      	adds	r3, #3
 8001a22:	089b      	lsrs	r3, r3, #2
 8001a24:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001a26:	e026      	b.n	8001a76 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	695a      	ldr	r2, [r3, #20]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	69fa      	ldr	r2, [r7, #28]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d902      	bls.n	8001a44 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	3303      	adds	r3, #3
 8001a48:	089b      	lsrs	r3, r3, #2
 8001a4a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	68d9      	ldr	r1, [r3, #12]
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	6978      	ldr	r0, [r7, #20]
 8001a5a:	f002 ffe9 	bl	8004a30 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	68da      	ldr	r2, [r3, #12]
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	441a      	add	r2, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	699a      	ldr	r2, [r3, #24]
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	441a      	add	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	015a      	lsls	r2, r3, #5
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d809      	bhi.n	8001aa0 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	699a      	ldr	r2, [r3, #24]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d203      	bcs.n	8001aa0 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1c3      	bne.n	8001a28 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	695a      	ldr	r2, [r3, #20]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d811      	bhi.n	8001ad0 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ac0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	6939      	ldr	r1, [r7, #16]
 8001ac8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001acc:	4013      	ands	r3, r2
 8001ace:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3720      	adds	r7, #32
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	333c      	adds	r3, #60	; 0x3c
 8001af4:	3304      	adds	r3, #4
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	015a      	lsls	r2, r3, #5
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	4413      	add	r3, r2
 8001b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	4a19      	ldr	r2, [pc, #100]	; (8001b74 <PCD_EP_OutXfrComplete_int+0x98>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d124      	bne.n	8001b5c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d00a      	beq.n	8001b32 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	015a      	lsls	r2, r3, #5
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	4413      	add	r3, r2
 8001b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b28:	461a      	mov	r2, r3
 8001b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b2e:	6093      	str	r3, [r2, #8]
 8001b30:	e01a      	b.n	8001b68 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	f003 0320 	and.w	r3, r3, #32
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d008      	beq.n	8001b4e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	015a      	lsls	r2, r3, #5
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	4413      	add	r3, r2
 8001b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b48:	461a      	mov	r2, r3
 8001b4a:	2320      	movs	r3, #32
 8001b4c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	4619      	mov	r1, r3
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f005 f96b 	bl	8006e30 <HAL_PCD_DataOutStageCallback>
 8001b5a:	e005      	b.n	8001b68 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	4619      	mov	r1, r3
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f005 f964 	bl	8006e30 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	4f54310a 	.word	0x4f54310a

08001b78 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	333c      	adds	r3, #60	; 0x3c
 8001b90:	3304      	adds	r3, #4
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	015a      	lsls	r2, r3, #5
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	4a0c      	ldr	r2, [pc, #48]	; (8001bdc <PCD_EP_OutSetupPacket_int+0x64>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d90e      	bls.n	8001bcc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d009      	beq.n	8001bcc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	015a      	lsls	r2, r3, #5
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f005 f91d 	bl	8006e0c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	4f54300a 	.word	0x4f54300a

08001be0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	460b      	mov	r3, r1
 8001bea:	70fb      	strb	r3, [r7, #3]
 8001bec:	4613      	mov	r3, r2
 8001bee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8001bf8:	78fb      	ldrb	r3, [r7, #3]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d107      	bne.n	8001c0e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001bfe:	883b      	ldrh	r3, [r7, #0]
 8001c00:	0419      	lsls	r1, r3, #16
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68ba      	ldr	r2, [r7, #8]
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	629a      	str	r2, [r3, #40]	; 0x28
 8001c0c:	e028      	b.n	8001c60 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c14:	0c1b      	lsrs	r3, r3, #16
 8001c16:	68ba      	ldr	r2, [r7, #8]
 8001c18:	4413      	add	r3, r2
 8001c1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	73fb      	strb	r3, [r7, #15]
 8001c20:	e00d      	b.n	8001c3e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	7bfb      	ldrb	r3, [r7, #15]
 8001c28:	3340      	adds	r3, #64	; 0x40
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	0c1b      	lsrs	r3, r3, #16
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	4413      	add	r3, r2
 8001c36:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	73fb      	strb	r3, [r7, #15]
 8001c3e:	7bfa      	ldrb	r2, [r7, #15]
 8001c40:	78fb      	ldrb	r3, [r7, #3]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d3ec      	bcc.n	8001c22 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001c48:	883b      	ldrh	r3, [r7, #0]
 8001c4a:	0418      	lsls	r0, r3, #16
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6819      	ldr	r1, [r3, #0]
 8001c50:	78fb      	ldrb	r3, [r7, #3]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	68ba      	ldr	r2, [r7, #8]
 8001c56:	4302      	orrs	r2, r0
 8001c58:	3340      	adds	r3, #64	; 0x40
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	440b      	add	r3, r1
 8001c5e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
 8001c76:	460b      	mov	r3, r1
 8001c78:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	887a      	ldrh	r2, [r7, #2]
 8001c80:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc2:	f043 0303 	orr.w	r3, r3, #3
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001cdc:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <HAL_PWREx_GetVoltageRange+0x18>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	40007000 	.word	0x40007000

08001cf4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d02:	d130      	bne.n	8001d66 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d04:	4b23      	ldr	r3, [pc, #140]	; (8001d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d10:	d038      	beq.n	8001d84 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d12:	4b20      	ldr	r3, [pc, #128]	; (8001d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d1a:	4a1e      	ldr	r2, [pc, #120]	; (8001d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d20:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d22:	4b1d      	ldr	r3, [pc, #116]	; (8001d98 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2232      	movs	r2, #50	; 0x32
 8001d28:	fb02 f303 	mul.w	r3, r2, r3
 8001d2c:	4a1b      	ldr	r2, [pc, #108]	; (8001d9c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d32:	0c9b      	lsrs	r3, r3, #18
 8001d34:	3301      	adds	r3, #1
 8001d36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d38:	e002      	b.n	8001d40 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d40:	4b14      	ldr	r3, [pc, #80]	; (8001d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d42:	695b      	ldr	r3, [r3, #20]
 8001d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d4c:	d102      	bne.n	8001d54 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1f2      	bne.n	8001d3a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d54:	4b0f      	ldr	r3, [pc, #60]	; (8001d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d56:	695b      	ldr	r3, [r3, #20]
 8001d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d60:	d110      	bne.n	8001d84 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e00f      	b.n	8001d86 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d66:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d72:	d007      	beq.n	8001d84 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d74:	4b07      	ldr	r3, [pc, #28]	; (8001d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d7c:	4a05      	ldr	r2, [pc, #20]	; (8001d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d82:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	40007000 	.word	0x40007000
 8001d98:	200001b8 	.word	0x200001b8
 8001d9c:	431bde83 	.word	0x431bde83

08001da0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001da4:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <HAL_PWREx_EnableVddUSB+0x1c>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	4a04      	ldr	r2, [pc, #16]	; (8001dbc <HAL_PWREx_EnableVddUSB+0x1c>)
 8001daa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dae:	6053      	str	r3, [r2, #4]
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	40007000 	.word	0x40007000

08001dc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b088      	sub	sp, #32
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e3d4      	b.n	800257c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dd2:	4ba1      	ldr	r3, [pc, #644]	; (8002058 <HAL_RCC_OscConfig+0x298>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f003 030c 	and.w	r3, r3, #12
 8001dda:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ddc:	4b9e      	ldr	r3, [pc, #632]	; (8002058 <HAL_RCC_OscConfig+0x298>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	f003 0303 	and.w	r3, r3, #3
 8001de4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0310 	and.w	r3, r3, #16
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f000 80e4 	beq.w	8001fbc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d007      	beq.n	8001e0a <HAL_RCC_OscConfig+0x4a>
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	2b0c      	cmp	r3, #12
 8001dfe:	f040 808b 	bne.w	8001f18 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	f040 8087 	bne.w	8001f18 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e0a:	4b93      	ldr	r3, [pc, #588]	; (8002058 <HAL_RCC_OscConfig+0x298>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d005      	beq.n	8001e22 <HAL_RCC_OscConfig+0x62>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e3ac      	b.n	800257c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a1a      	ldr	r2, [r3, #32]
 8001e26:	4b8c      	ldr	r3, [pc, #560]	; (8002058 <HAL_RCC_OscConfig+0x298>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0308 	and.w	r3, r3, #8
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d004      	beq.n	8001e3c <HAL_RCC_OscConfig+0x7c>
 8001e32:	4b89      	ldr	r3, [pc, #548]	; (8002058 <HAL_RCC_OscConfig+0x298>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e3a:	e005      	b.n	8001e48 <HAL_RCC_OscConfig+0x88>
 8001e3c:	4b86      	ldr	r3, [pc, #536]	; (8002058 <HAL_RCC_OscConfig+0x298>)
 8001e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e42:	091b      	lsrs	r3, r3, #4
 8001e44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d223      	bcs.n	8001e94 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f000 fd3f 	bl	80028d4 <RCC_SetFlashLatencyFromMSIRange>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e38d      	b.n	800257c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e60:	4b7d      	ldr	r3, [pc, #500]	; (8002058 <HAL_RCC_OscConfig+0x298>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a7c      	ldr	r2, [pc, #496]	; (8002058 <HAL_RCC_OscConfig+0x298>)
 8001e66:	f043 0308 	orr.w	r3, r3, #8
 8001e6a:	6013      	str	r3, [r2, #0]
 8001e6c:	4b7a      	ldr	r3, [pc, #488]	; (8002058 <HAL_RCC_OscConfig+0x298>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	4977      	ldr	r1, [pc, #476]	; (8002058 <HAL_RCC_OscConfig+0x298>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e7e:	4b76      	ldr	r3, [pc, #472]	; (8002058 <HAL_RCC_OscConfig+0x298>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	021b      	lsls	r3, r3, #8
 8001e8c:	4972      	ldr	r1, [pc, #456]	; (8002058 <HAL_RCC_OscConfig+0x298>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	604b      	str	r3, [r1, #4]
 8001e92:	e025      	b.n	8001ee0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e94:	4b70      	ldr	r3, [pc, #448]	; (8002058 <HAL_RCC_OscConfig+0x298>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a6f      	ldr	r2, [pc, #444]	; (8002058 <HAL_RCC_OscConfig+0x298>)
 8001e9a:	f043 0308 	orr.w	r3, r3, #8
 8001e9e:	6013      	str	r3, [r2, #0]
 8001ea0:	4b6d      	ldr	r3, [pc, #436]	; (8002058 <HAL_RCC_OscConfig+0x298>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	496a      	ldr	r1, [pc, #424]	; (8002058 <HAL_RCC_OscConfig+0x298>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eb2:	4b69      	ldr	r3, [pc, #420]	; (8002058 <HAL_RCC_OscConfig+0x298>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	021b      	lsls	r3, r3, #8
 8001ec0:	4965      	ldr	r1, [pc, #404]	; (8002058 <HAL_RCC_OscConfig+0x298>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d109      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f000 fcff 	bl	80028d4 <RCC_SetFlashLatencyFromMSIRange>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e34d      	b.n	800257c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ee0:	f000 fc36 	bl	8002750 <HAL_RCC_GetSysClockFreq>
 8001ee4:	4601      	mov	r1, r0
 8001ee6:	4b5c      	ldr	r3, [pc, #368]	; (8002058 <HAL_RCC_OscConfig+0x298>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	091b      	lsrs	r3, r3, #4
 8001eec:	f003 030f 	and.w	r3, r3, #15
 8001ef0:	4a5a      	ldr	r2, [pc, #360]	; (800205c <HAL_RCC_OscConfig+0x29c>)
 8001ef2:	5cd3      	ldrb	r3, [r2, r3]
 8001ef4:	f003 031f 	and.w	r3, r3, #31
 8001ef8:	fa21 f303 	lsr.w	r3, r1, r3
 8001efc:	4a58      	ldr	r2, [pc, #352]	; (8002060 <HAL_RCC_OscConfig+0x2a0>)
 8001efe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f00:	4b58      	ldr	r3, [pc, #352]	; (8002064 <HAL_RCC_OscConfig+0x2a4>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7fe faf7 	bl	80004f8 <HAL_InitTick>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f0e:	7bfb      	ldrb	r3, [r7, #15]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d052      	beq.n	8001fba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
 8001f16:	e331      	b.n	800257c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d032      	beq.n	8001f86 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f20:	4b4d      	ldr	r3, [pc, #308]	; (8002058 <HAL_RCC_OscConfig+0x298>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a4c      	ldr	r2, [pc, #304]	; (8002058 <HAL_RCC_OscConfig+0x298>)
 8001f26:	f043 0301 	orr.w	r3, r3, #1
 8001f2a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f2c:	f7fe fb34 	bl	8000598 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f34:	f7fe fb30 	bl	8000598 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e31a      	b.n	800257c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f46:	4b44      	ldr	r3, [pc, #272]	; (8002058 <HAL_RCC_OscConfig+0x298>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0f0      	beq.n	8001f34 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f52:	4b41      	ldr	r3, [pc, #260]	; (8002058 <HAL_RCC_OscConfig+0x298>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a40      	ldr	r2, [pc, #256]	; (8002058 <HAL_RCC_OscConfig+0x298>)
 8001f58:	f043 0308 	orr.w	r3, r3, #8
 8001f5c:	6013      	str	r3, [r2, #0]
 8001f5e:	4b3e      	ldr	r3, [pc, #248]	; (8002058 <HAL_RCC_OscConfig+0x298>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	493b      	ldr	r1, [pc, #236]	; (8002058 <HAL_RCC_OscConfig+0x298>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f70:	4b39      	ldr	r3, [pc, #228]	; (8002058 <HAL_RCC_OscConfig+0x298>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	69db      	ldr	r3, [r3, #28]
 8001f7c:	021b      	lsls	r3, r3, #8
 8001f7e:	4936      	ldr	r1, [pc, #216]	; (8002058 <HAL_RCC_OscConfig+0x298>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	604b      	str	r3, [r1, #4]
 8001f84:	e01a      	b.n	8001fbc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f86:	4b34      	ldr	r3, [pc, #208]	; (8002058 <HAL_RCC_OscConfig+0x298>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a33      	ldr	r2, [pc, #204]	; (8002058 <HAL_RCC_OscConfig+0x298>)
 8001f8c:	f023 0301 	bic.w	r3, r3, #1
 8001f90:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f92:	f7fe fb01 	bl	8000598 <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f9a:	f7fe fafd 	bl	8000598 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e2e7      	b.n	800257c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fac:	4b2a      	ldr	r3, [pc, #168]	; (8002058 <HAL_RCC_OscConfig+0x298>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1f0      	bne.n	8001f9a <HAL_RCC_OscConfig+0x1da>
 8001fb8:	e000      	b.n	8001fbc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d074      	beq.n	80020b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	2b08      	cmp	r3, #8
 8001fcc:	d005      	beq.n	8001fda <HAL_RCC_OscConfig+0x21a>
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	2b0c      	cmp	r3, #12
 8001fd2:	d10e      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	2b03      	cmp	r3, #3
 8001fd8:	d10b      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fda:	4b1f      	ldr	r3, [pc, #124]	; (8002058 <HAL_RCC_OscConfig+0x298>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d064      	beq.n	80020b0 <HAL_RCC_OscConfig+0x2f0>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d160      	bne.n	80020b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e2c4      	b.n	800257c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ffa:	d106      	bne.n	800200a <HAL_RCC_OscConfig+0x24a>
 8001ffc:	4b16      	ldr	r3, [pc, #88]	; (8002058 <HAL_RCC_OscConfig+0x298>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a15      	ldr	r2, [pc, #84]	; (8002058 <HAL_RCC_OscConfig+0x298>)
 8002002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002006:	6013      	str	r3, [r2, #0]
 8002008:	e01d      	b.n	8002046 <HAL_RCC_OscConfig+0x286>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002012:	d10c      	bne.n	800202e <HAL_RCC_OscConfig+0x26e>
 8002014:	4b10      	ldr	r3, [pc, #64]	; (8002058 <HAL_RCC_OscConfig+0x298>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a0f      	ldr	r2, [pc, #60]	; (8002058 <HAL_RCC_OscConfig+0x298>)
 800201a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800201e:	6013      	str	r3, [r2, #0]
 8002020:	4b0d      	ldr	r3, [pc, #52]	; (8002058 <HAL_RCC_OscConfig+0x298>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a0c      	ldr	r2, [pc, #48]	; (8002058 <HAL_RCC_OscConfig+0x298>)
 8002026:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800202a:	6013      	str	r3, [r2, #0]
 800202c:	e00b      	b.n	8002046 <HAL_RCC_OscConfig+0x286>
 800202e:	4b0a      	ldr	r3, [pc, #40]	; (8002058 <HAL_RCC_OscConfig+0x298>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a09      	ldr	r2, [pc, #36]	; (8002058 <HAL_RCC_OscConfig+0x298>)
 8002034:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002038:	6013      	str	r3, [r2, #0]
 800203a:	4b07      	ldr	r3, [pc, #28]	; (8002058 <HAL_RCC_OscConfig+0x298>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a06      	ldr	r2, [pc, #24]	; (8002058 <HAL_RCC_OscConfig+0x298>)
 8002040:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002044:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d01c      	beq.n	8002088 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204e:	f7fe faa3 	bl	8000598 <HAL_GetTick>
 8002052:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002054:	e011      	b.n	800207a <HAL_RCC_OscConfig+0x2ba>
 8002056:	bf00      	nop
 8002058:	40021000 	.word	0x40021000
 800205c:	08007a18 	.word	0x08007a18
 8002060:	200001b8 	.word	0x200001b8
 8002064:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002068:	f7fe fa96 	bl	8000598 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b64      	cmp	r3, #100	; 0x64
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e280      	b.n	800257c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800207a:	4baf      	ldr	r3, [pc, #700]	; (8002338 <HAL_RCC_OscConfig+0x578>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d0f0      	beq.n	8002068 <HAL_RCC_OscConfig+0x2a8>
 8002086:	e014      	b.n	80020b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002088:	f7fe fa86 	bl	8000598 <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002090:	f7fe fa82 	bl	8000598 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b64      	cmp	r3, #100	; 0x64
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e26c      	b.n	800257c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020a2:	4ba5      	ldr	r3, [pc, #660]	; (8002338 <HAL_RCC_OscConfig+0x578>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f0      	bne.n	8002090 <HAL_RCC_OscConfig+0x2d0>
 80020ae:	e000      	b.n	80020b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d060      	beq.n	8002180 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	d005      	beq.n	80020d0 <HAL_RCC_OscConfig+0x310>
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	2b0c      	cmp	r3, #12
 80020c8:	d119      	bne.n	80020fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d116      	bne.n	80020fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020d0:	4b99      	ldr	r3, [pc, #612]	; (8002338 <HAL_RCC_OscConfig+0x578>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d005      	beq.n	80020e8 <HAL_RCC_OscConfig+0x328>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e249      	b.n	800257c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e8:	4b93      	ldr	r3, [pc, #588]	; (8002338 <HAL_RCC_OscConfig+0x578>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	061b      	lsls	r3, r3, #24
 80020f6:	4990      	ldr	r1, [pc, #576]	; (8002338 <HAL_RCC_OscConfig+0x578>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020fc:	e040      	b.n	8002180 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d023      	beq.n	800214e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002106:	4b8c      	ldr	r3, [pc, #560]	; (8002338 <HAL_RCC_OscConfig+0x578>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a8b      	ldr	r2, [pc, #556]	; (8002338 <HAL_RCC_OscConfig+0x578>)
 800210c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002110:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002112:	f7fe fa41 	bl	8000598 <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002118:	e008      	b.n	800212c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800211a:	f7fe fa3d 	bl	8000598 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e227      	b.n	800257c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800212c:	4b82      	ldr	r3, [pc, #520]	; (8002338 <HAL_RCC_OscConfig+0x578>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0f0      	beq.n	800211a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002138:	4b7f      	ldr	r3, [pc, #508]	; (8002338 <HAL_RCC_OscConfig+0x578>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	061b      	lsls	r3, r3, #24
 8002146:	497c      	ldr	r1, [pc, #496]	; (8002338 <HAL_RCC_OscConfig+0x578>)
 8002148:	4313      	orrs	r3, r2
 800214a:	604b      	str	r3, [r1, #4]
 800214c:	e018      	b.n	8002180 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800214e:	4b7a      	ldr	r3, [pc, #488]	; (8002338 <HAL_RCC_OscConfig+0x578>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a79      	ldr	r2, [pc, #484]	; (8002338 <HAL_RCC_OscConfig+0x578>)
 8002154:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002158:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215a:	f7fe fa1d 	bl	8000598 <HAL_GetTick>
 800215e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002160:	e008      	b.n	8002174 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002162:	f7fe fa19 	bl	8000598 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e203      	b.n	800257c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002174:	4b70      	ldr	r3, [pc, #448]	; (8002338 <HAL_RCC_OscConfig+0x578>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1f0      	bne.n	8002162 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0308 	and.w	r3, r3, #8
 8002188:	2b00      	cmp	r3, #0
 800218a:	d03c      	beq.n	8002206 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d01c      	beq.n	80021ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002194:	4b68      	ldr	r3, [pc, #416]	; (8002338 <HAL_RCC_OscConfig+0x578>)
 8002196:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800219a:	4a67      	ldr	r2, [pc, #412]	; (8002338 <HAL_RCC_OscConfig+0x578>)
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a4:	f7fe f9f8 	bl	8000598 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ac:	f7fe f9f4 	bl	8000598 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e1de      	b.n	800257c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021be:	4b5e      	ldr	r3, [pc, #376]	; (8002338 <HAL_RCC_OscConfig+0x578>)
 80021c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0ef      	beq.n	80021ac <HAL_RCC_OscConfig+0x3ec>
 80021cc:	e01b      	b.n	8002206 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021ce:	4b5a      	ldr	r3, [pc, #360]	; (8002338 <HAL_RCC_OscConfig+0x578>)
 80021d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021d4:	4a58      	ldr	r2, [pc, #352]	; (8002338 <HAL_RCC_OscConfig+0x578>)
 80021d6:	f023 0301 	bic.w	r3, r3, #1
 80021da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021de:	f7fe f9db 	bl	8000598 <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021e6:	f7fe f9d7 	bl	8000598 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e1c1      	b.n	800257c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021f8:	4b4f      	ldr	r3, [pc, #316]	; (8002338 <HAL_RCC_OscConfig+0x578>)
 80021fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1ef      	bne.n	80021e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0304 	and.w	r3, r3, #4
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 80a6 	beq.w	8002360 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002214:	2300      	movs	r3, #0
 8002216:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002218:	4b47      	ldr	r3, [pc, #284]	; (8002338 <HAL_RCC_OscConfig+0x578>)
 800221a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10d      	bne.n	8002240 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002224:	4b44      	ldr	r3, [pc, #272]	; (8002338 <HAL_RCC_OscConfig+0x578>)
 8002226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002228:	4a43      	ldr	r2, [pc, #268]	; (8002338 <HAL_RCC_OscConfig+0x578>)
 800222a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800222e:	6593      	str	r3, [r2, #88]	; 0x58
 8002230:	4b41      	ldr	r3, [pc, #260]	; (8002338 <HAL_RCC_OscConfig+0x578>)
 8002232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800223c:	2301      	movs	r3, #1
 800223e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002240:	4b3e      	ldr	r3, [pc, #248]	; (800233c <HAL_RCC_OscConfig+0x57c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002248:	2b00      	cmp	r3, #0
 800224a:	d118      	bne.n	800227e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800224c:	4b3b      	ldr	r3, [pc, #236]	; (800233c <HAL_RCC_OscConfig+0x57c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a3a      	ldr	r2, [pc, #232]	; (800233c <HAL_RCC_OscConfig+0x57c>)
 8002252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002256:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002258:	f7fe f99e 	bl	8000598 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002260:	f7fe f99a 	bl	8000598 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e184      	b.n	800257c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002272:	4b32      	ldr	r3, [pc, #200]	; (800233c <HAL_RCC_OscConfig+0x57c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0f0      	beq.n	8002260 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d108      	bne.n	8002298 <HAL_RCC_OscConfig+0x4d8>
 8002286:	4b2c      	ldr	r3, [pc, #176]	; (8002338 <HAL_RCC_OscConfig+0x578>)
 8002288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800228c:	4a2a      	ldr	r2, [pc, #168]	; (8002338 <HAL_RCC_OscConfig+0x578>)
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002296:	e024      	b.n	80022e2 <HAL_RCC_OscConfig+0x522>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	2b05      	cmp	r3, #5
 800229e:	d110      	bne.n	80022c2 <HAL_RCC_OscConfig+0x502>
 80022a0:	4b25      	ldr	r3, [pc, #148]	; (8002338 <HAL_RCC_OscConfig+0x578>)
 80022a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a6:	4a24      	ldr	r2, [pc, #144]	; (8002338 <HAL_RCC_OscConfig+0x578>)
 80022a8:	f043 0304 	orr.w	r3, r3, #4
 80022ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022b0:	4b21      	ldr	r3, [pc, #132]	; (8002338 <HAL_RCC_OscConfig+0x578>)
 80022b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b6:	4a20      	ldr	r2, [pc, #128]	; (8002338 <HAL_RCC_OscConfig+0x578>)
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022c0:	e00f      	b.n	80022e2 <HAL_RCC_OscConfig+0x522>
 80022c2:	4b1d      	ldr	r3, [pc, #116]	; (8002338 <HAL_RCC_OscConfig+0x578>)
 80022c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c8:	4a1b      	ldr	r2, [pc, #108]	; (8002338 <HAL_RCC_OscConfig+0x578>)
 80022ca:	f023 0301 	bic.w	r3, r3, #1
 80022ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022d2:	4b19      	ldr	r3, [pc, #100]	; (8002338 <HAL_RCC_OscConfig+0x578>)
 80022d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d8:	4a17      	ldr	r2, [pc, #92]	; (8002338 <HAL_RCC_OscConfig+0x578>)
 80022da:	f023 0304 	bic.w	r3, r3, #4
 80022de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d016      	beq.n	8002318 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ea:	f7fe f955 	bl	8000598 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022f0:	e00a      	b.n	8002308 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f2:	f7fe f951 	bl	8000598 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002300:	4293      	cmp	r3, r2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e139      	b.n	800257c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002308:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <HAL_RCC_OscConfig+0x578>)
 800230a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d0ed      	beq.n	80022f2 <HAL_RCC_OscConfig+0x532>
 8002316:	e01a      	b.n	800234e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002318:	f7fe f93e 	bl	8000598 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800231e:	e00f      	b.n	8002340 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002320:	f7fe f93a 	bl	8000598 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	f241 3288 	movw	r2, #5000	; 0x1388
 800232e:	4293      	cmp	r3, r2
 8002330:	d906      	bls.n	8002340 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e122      	b.n	800257c <HAL_RCC_OscConfig+0x7bc>
 8002336:	bf00      	nop
 8002338:	40021000 	.word	0x40021000
 800233c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002340:	4b90      	ldr	r3, [pc, #576]	; (8002584 <HAL_RCC_OscConfig+0x7c4>)
 8002342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1e8      	bne.n	8002320 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800234e:	7ffb      	ldrb	r3, [r7, #31]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d105      	bne.n	8002360 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002354:	4b8b      	ldr	r3, [pc, #556]	; (8002584 <HAL_RCC_OscConfig+0x7c4>)
 8002356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002358:	4a8a      	ldr	r2, [pc, #552]	; (8002584 <HAL_RCC_OscConfig+0x7c4>)
 800235a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800235e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002364:	2b00      	cmp	r3, #0
 8002366:	f000 8108 	beq.w	800257a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236e:	2b02      	cmp	r3, #2
 8002370:	f040 80d0 	bne.w	8002514 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002374:	4b83      	ldr	r3, [pc, #524]	; (8002584 <HAL_RCC_OscConfig+0x7c4>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	f003 0203 	and.w	r2, r3, #3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002384:	429a      	cmp	r2, r3
 8002386:	d130      	bne.n	80023ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	3b01      	subs	r3, #1
 8002394:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002396:	429a      	cmp	r2, r3
 8002398:	d127      	bne.n	80023ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d11f      	bne.n	80023ea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023b4:	2a07      	cmp	r2, #7
 80023b6:	bf14      	ite	ne
 80023b8:	2201      	movne	r2, #1
 80023ba:	2200      	moveq	r2, #0
 80023bc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023be:	4293      	cmp	r3, r2
 80023c0:	d113      	bne.n	80023ea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023cc:	085b      	lsrs	r3, r3, #1
 80023ce:	3b01      	subs	r3, #1
 80023d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d109      	bne.n	80023ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e0:	085b      	lsrs	r3, r3, #1
 80023e2:	3b01      	subs	r3, #1
 80023e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d06e      	beq.n	80024c8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	2b0c      	cmp	r3, #12
 80023ee:	d069      	beq.n	80024c4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80023f0:	4b64      	ldr	r3, [pc, #400]	; (8002584 <HAL_RCC_OscConfig+0x7c4>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d105      	bne.n	8002408 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80023fc:	4b61      	ldr	r3, [pc, #388]	; (8002584 <HAL_RCC_OscConfig+0x7c4>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e0b7      	b.n	800257c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800240c:	4b5d      	ldr	r3, [pc, #372]	; (8002584 <HAL_RCC_OscConfig+0x7c4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a5c      	ldr	r2, [pc, #368]	; (8002584 <HAL_RCC_OscConfig+0x7c4>)
 8002412:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002416:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002418:	f7fe f8be 	bl	8000598 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002420:	f7fe f8ba 	bl	8000598 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e0a4      	b.n	800257c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002432:	4b54      	ldr	r3, [pc, #336]	; (8002584 <HAL_RCC_OscConfig+0x7c4>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800243e:	4b51      	ldr	r3, [pc, #324]	; (8002584 <HAL_RCC_OscConfig+0x7c4>)
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	4b51      	ldr	r3, [pc, #324]	; (8002588 <HAL_RCC_OscConfig+0x7c8>)
 8002444:	4013      	ands	r3, r2
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800244e:	3a01      	subs	r2, #1
 8002450:	0112      	lsls	r2, r2, #4
 8002452:	4311      	orrs	r1, r2
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002458:	0212      	lsls	r2, r2, #8
 800245a:	4311      	orrs	r1, r2
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002460:	0852      	lsrs	r2, r2, #1
 8002462:	3a01      	subs	r2, #1
 8002464:	0552      	lsls	r2, r2, #21
 8002466:	4311      	orrs	r1, r2
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800246c:	0852      	lsrs	r2, r2, #1
 800246e:	3a01      	subs	r2, #1
 8002470:	0652      	lsls	r2, r2, #25
 8002472:	4311      	orrs	r1, r2
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002478:	0912      	lsrs	r2, r2, #4
 800247a:	0452      	lsls	r2, r2, #17
 800247c:	430a      	orrs	r2, r1
 800247e:	4941      	ldr	r1, [pc, #260]	; (8002584 <HAL_RCC_OscConfig+0x7c4>)
 8002480:	4313      	orrs	r3, r2
 8002482:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002484:	4b3f      	ldr	r3, [pc, #252]	; (8002584 <HAL_RCC_OscConfig+0x7c4>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a3e      	ldr	r2, [pc, #248]	; (8002584 <HAL_RCC_OscConfig+0x7c4>)
 800248a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800248e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002490:	4b3c      	ldr	r3, [pc, #240]	; (8002584 <HAL_RCC_OscConfig+0x7c4>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	4a3b      	ldr	r2, [pc, #236]	; (8002584 <HAL_RCC_OscConfig+0x7c4>)
 8002496:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800249a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800249c:	f7fe f87c 	bl	8000598 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a4:	f7fe f878 	bl	8000598 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e062      	b.n	800257c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024b6:	4b33      	ldr	r3, [pc, #204]	; (8002584 <HAL_RCC_OscConfig+0x7c4>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0f0      	beq.n	80024a4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024c2:	e05a      	b.n	800257a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e059      	b.n	800257c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024c8:	4b2e      	ldr	r3, [pc, #184]	; (8002584 <HAL_RCC_OscConfig+0x7c4>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d152      	bne.n	800257a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80024d4:	4b2b      	ldr	r3, [pc, #172]	; (8002584 <HAL_RCC_OscConfig+0x7c4>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a2a      	ldr	r2, [pc, #168]	; (8002584 <HAL_RCC_OscConfig+0x7c4>)
 80024da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024e0:	4b28      	ldr	r3, [pc, #160]	; (8002584 <HAL_RCC_OscConfig+0x7c4>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	4a27      	ldr	r2, [pc, #156]	; (8002584 <HAL_RCC_OscConfig+0x7c4>)
 80024e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024ec:	f7fe f854 	bl	8000598 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f4:	f7fe f850 	bl	8000598 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e03a      	b.n	800257c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002506:	4b1f      	ldr	r3, [pc, #124]	; (8002584 <HAL_RCC_OscConfig+0x7c4>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0f0      	beq.n	80024f4 <HAL_RCC_OscConfig+0x734>
 8002512:	e032      	b.n	800257a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	2b0c      	cmp	r3, #12
 8002518:	d02d      	beq.n	8002576 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800251a:	4b1a      	ldr	r3, [pc, #104]	; (8002584 <HAL_RCC_OscConfig+0x7c4>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a19      	ldr	r2, [pc, #100]	; (8002584 <HAL_RCC_OscConfig+0x7c4>)
 8002520:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002524:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002526:	4b17      	ldr	r3, [pc, #92]	; (8002584 <HAL_RCC_OscConfig+0x7c4>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d105      	bne.n	800253e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002532:	4b14      	ldr	r3, [pc, #80]	; (8002584 <HAL_RCC_OscConfig+0x7c4>)
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	4a13      	ldr	r2, [pc, #76]	; (8002584 <HAL_RCC_OscConfig+0x7c4>)
 8002538:	f023 0303 	bic.w	r3, r3, #3
 800253c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800253e:	4b11      	ldr	r3, [pc, #68]	; (8002584 <HAL_RCC_OscConfig+0x7c4>)
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	4a10      	ldr	r2, [pc, #64]	; (8002584 <HAL_RCC_OscConfig+0x7c4>)
 8002544:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002548:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800254c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254e:	f7fe f823 	bl	8000598 <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002554:	e008      	b.n	8002568 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002556:	f7fe f81f 	bl	8000598 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e009      	b.n	800257c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002568:	4b06      	ldr	r3, [pc, #24]	; (8002584 <HAL_RCC_OscConfig+0x7c4>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1f0      	bne.n	8002556 <HAL_RCC_OscConfig+0x796>
 8002574:	e001      	b.n	800257a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e000      	b.n	800257c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3720      	adds	r7, #32
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40021000 	.word	0x40021000
 8002588:	f99d808c 	.word	0xf99d808c

0800258c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e0c8      	b.n	8002732 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025a0:	4b66      	ldr	r3, [pc, #408]	; (800273c <HAL_RCC_ClockConfig+0x1b0>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d910      	bls.n	80025d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ae:	4b63      	ldr	r3, [pc, #396]	; (800273c <HAL_RCC_ClockConfig+0x1b0>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f023 0207 	bic.w	r2, r3, #7
 80025b6:	4961      	ldr	r1, [pc, #388]	; (800273c <HAL_RCC_ClockConfig+0x1b0>)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025be:	4b5f      	ldr	r3, [pc, #380]	; (800273c <HAL_RCC_ClockConfig+0x1b0>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d001      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e0b0      	b.n	8002732 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d04c      	beq.n	8002676 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	2b03      	cmp	r3, #3
 80025e2:	d107      	bne.n	80025f4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025e4:	4b56      	ldr	r3, [pc, #344]	; (8002740 <HAL_RCC_ClockConfig+0x1b4>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d121      	bne.n	8002634 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e09e      	b.n	8002732 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d107      	bne.n	800260c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025fc:	4b50      	ldr	r3, [pc, #320]	; (8002740 <HAL_RCC_ClockConfig+0x1b4>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d115      	bne.n	8002634 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e092      	b.n	8002732 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d107      	bne.n	8002624 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002614:	4b4a      	ldr	r3, [pc, #296]	; (8002740 <HAL_RCC_ClockConfig+0x1b4>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d109      	bne.n	8002634 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e086      	b.n	8002732 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002624:	4b46      	ldr	r3, [pc, #280]	; (8002740 <HAL_RCC_ClockConfig+0x1b4>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e07e      	b.n	8002732 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002634:	4b42      	ldr	r3, [pc, #264]	; (8002740 <HAL_RCC_ClockConfig+0x1b4>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f023 0203 	bic.w	r2, r3, #3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	493f      	ldr	r1, [pc, #252]	; (8002740 <HAL_RCC_ClockConfig+0x1b4>)
 8002642:	4313      	orrs	r3, r2
 8002644:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002646:	f7fd ffa7 	bl	8000598 <HAL_GetTick>
 800264a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800264c:	e00a      	b.n	8002664 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800264e:	f7fd ffa3 	bl	8000598 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	f241 3288 	movw	r2, #5000	; 0x1388
 800265c:	4293      	cmp	r3, r2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e066      	b.n	8002732 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002664:	4b36      	ldr	r3, [pc, #216]	; (8002740 <HAL_RCC_ClockConfig+0x1b4>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f003 020c 	and.w	r2, r3, #12
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	429a      	cmp	r2, r3
 8002674:	d1eb      	bne.n	800264e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d008      	beq.n	8002694 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002682:	4b2f      	ldr	r3, [pc, #188]	; (8002740 <HAL_RCC_ClockConfig+0x1b4>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	492c      	ldr	r1, [pc, #176]	; (8002740 <HAL_RCC_ClockConfig+0x1b4>)
 8002690:	4313      	orrs	r3, r2
 8002692:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002694:	4b29      	ldr	r3, [pc, #164]	; (800273c <HAL_RCC_ClockConfig+0x1b0>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d210      	bcs.n	80026c4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a2:	4b26      	ldr	r3, [pc, #152]	; (800273c <HAL_RCC_ClockConfig+0x1b0>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f023 0207 	bic.w	r2, r3, #7
 80026aa:	4924      	ldr	r1, [pc, #144]	; (800273c <HAL_RCC_ClockConfig+0x1b0>)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b2:	4b22      	ldr	r3, [pc, #136]	; (800273c <HAL_RCC_ClockConfig+0x1b0>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d001      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e036      	b.n	8002732 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d008      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026d0:	4b1b      	ldr	r3, [pc, #108]	; (8002740 <HAL_RCC_ClockConfig+0x1b4>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	4918      	ldr	r1, [pc, #96]	; (8002740 <HAL_RCC_ClockConfig+0x1b4>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d009      	beq.n	8002702 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026ee:	4b14      	ldr	r3, [pc, #80]	; (8002740 <HAL_RCC_ClockConfig+0x1b4>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	4910      	ldr	r1, [pc, #64]	; (8002740 <HAL_RCC_ClockConfig+0x1b4>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002702:	f000 f825 	bl	8002750 <HAL_RCC_GetSysClockFreq>
 8002706:	4601      	mov	r1, r0
 8002708:	4b0d      	ldr	r3, [pc, #52]	; (8002740 <HAL_RCC_ClockConfig+0x1b4>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	091b      	lsrs	r3, r3, #4
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	4a0c      	ldr	r2, [pc, #48]	; (8002744 <HAL_RCC_ClockConfig+0x1b8>)
 8002714:	5cd3      	ldrb	r3, [r2, r3]
 8002716:	f003 031f 	and.w	r3, r3, #31
 800271a:	fa21 f303 	lsr.w	r3, r1, r3
 800271e:	4a0a      	ldr	r2, [pc, #40]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 8002720:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002722:	4b0a      	ldr	r3, [pc, #40]	; (800274c <HAL_RCC_ClockConfig+0x1c0>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f7fd fee6 	bl	80004f8 <HAL_InitTick>
 800272c:	4603      	mov	r3, r0
 800272e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002730:	7afb      	ldrb	r3, [r7, #11]
}
 8002732:	4618      	mov	r0, r3
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40022000 	.word	0x40022000
 8002740:	40021000 	.word	0x40021000
 8002744:	08007a18 	.word	0x08007a18
 8002748:	200001b8 	.word	0x200001b8
 800274c:	20000000 	.word	0x20000000

08002750 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002750:	b480      	push	{r7}
 8002752:	b089      	sub	sp, #36	; 0x24
 8002754:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002756:	2300      	movs	r3, #0
 8002758:	61fb      	str	r3, [r7, #28]
 800275a:	2300      	movs	r3, #0
 800275c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800275e:	4b3d      	ldr	r3, [pc, #244]	; (8002854 <HAL_RCC_GetSysClockFreq+0x104>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 030c 	and.w	r3, r3, #12
 8002766:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002768:	4b3a      	ldr	r3, [pc, #232]	; (8002854 <HAL_RCC_GetSysClockFreq+0x104>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d005      	beq.n	8002784 <HAL_RCC_GetSysClockFreq+0x34>
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	2b0c      	cmp	r3, #12
 800277c:	d121      	bne.n	80027c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d11e      	bne.n	80027c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002784:	4b33      	ldr	r3, [pc, #204]	; (8002854 <HAL_RCC_GetSysClockFreq+0x104>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0308 	and.w	r3, r3, #8
 800278c:	2b00      	cmp	r3, #0
 800278e:	d107      	bne.n	80027a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002790:	4b30      	ldr	r3, [pc, #192]	; (8002854 <HAL_RCC_GetSysClockFreq+0x104>)
 8002792:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002796:	0a1b      	lsrs	r3, r3, #8
 8002798:	f003 030f 	and.w	r3, r3, #15
 800279c:	61fb      	str	r3, [r7, #28]
 800279e:	e005      	b.n	80027ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80027a0:	4b2c      	ldr	r3, [pc, #176]	; (8002854 <HAL_RCC_GetSysClockFreq+0x104>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	091b      	lsrs	r3, r3, #4
 80027a6:	f003 030f 	and.w	r3, r3, #15
 80027aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80027ac:	4a2a      	ldr	r2, [pc, #168]	; (8002858 <HAL_RCC_GetSysClockFreq+0x108>)
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d10d      	bne.n	80027d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027c0:	e00a      	b.n	80027d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	d102      	bne.n	80027ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027c8:	4b24      	ldr	r3, [pc, #144]	; (800285c <HAL_RCC_GetSysClockFreq+0x10c>)
 80027ca:	61bb      	str	r3, [r7, #24]
 80027cc:	e004      	b.n	80027d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d101      	bne.n	80027d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027d4:	4b22      	ldr	r3, [pc, #136]	; (8002860 <HAL_RCC_GetSysClockFreq+0x110>)
 80027d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	2b0c      	cmp	r3, #12
 80027dc:	d133      	bne.n	8002846 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027de:	4b1d      	ldr	r3, [pc, #116]	; (8002854 <HAL_RCC_GetSysClockFreq+0x104>)
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	f003 0303 	and.w	r3, r3, #3
 80027e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d002      	beq.n	80027f4 <HAL_RCC_GetSysClockFreq+0xa4>
 80027ee:	2b03      	cmp	r3, #3
 80027f0:	d003      	beq.n	80027fa <HAL_RCC_GetSysClockFreq+0xaa>
 80027f2:	e005      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80027f4:	4b19      	ldr	r3, [pc, #100]	; (800285c <HAL_RCC_GetSysClockFreq+0x10c>)
 80027f6:	617b      	str	r3, [r7, #20]
      break;
 80027f8:	e005      	b.n	8002806 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80027fa:	4b19      	ldr	r3, [pc, #100]	; (8002860 <HAL_RCC_GetSysClockFreq+0x110>)
 80027fc:	617b      	str	r3, [r7, #20]
      break;
 80027fe:	e002      	b.n	8002806 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	617b      	str	r3, [r7, #20]
      break;
 8002804:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002806:	4b13      	ldr	r3, [pc, #76]	; (8002854 <HAL_RCC_GetSysClockFreq+0x104>)
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	091b      	lsrs	r3, r3, #4
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	3301      	adds	r3, #1
 8002812:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002814:	4b0f      	ldr	r3, [pc, #60]	; (8002854 <HAL_RCC_GetSysClockFreq+0x104>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	0a1b      	lsrs	r3, r3, #8
 800281a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	fb02 f203 	mul.w	r2, r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	fbb2 f3f3 	udiv	r3, r2, r3
 800282a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800282c:	4b09      	ldr	r3, [pc, #36]	; (8002854 <HAL_RCC_GetSysClockFreq+0x104>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	0e5b      	lsrs	r3, r3, #25
 8002832:	f003 0303 	and.w	r3, r3, #3
 8002836:	3301      	adds	r3, #1
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	fbb2 f3f3 	udiv	r3, r2, r3
 8002844:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002846:	69bb      	ldr	r3, [r7, #24]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3724      	adds	r7, #36	; 0x24
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	40021000 	.word	0x40021000
 8002858:	08007a30 	.word	0x08007a30
 800285c:	00f42400 	.word	0x00f42400
 8002860:	007a1200 	.word	0x007a1200

08002864 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002868:	4b03      	ldr	r3, [pc, #12]	; (8002878 <HAL_RCC_GetHCLKFreq+0x14>)
 800286a:	681b      	ldr	r3, [r3, #0]
}
 800286c:	4618      	mov	r0, r3
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	200001b8 	.word	0x200001b8

0800287c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002880:	f7ff fff0 	bl	8002864 <HAL_RCC_GetHCLKFreq>
 8002884:	4601      	mov	r1, r0
 8002886:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	0a1b      	lsrs	r3, r3, #8
 800288c:	f003 0307 	and.w	r3, r3, #7
 8002890:	4a04      	ldr	r2, [pc, #16]	; (80028a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002892:	5cd3      	ldrb	r3, [r2, r3]
 8002894:	f003 031f 	and.w	r3, r3, #31
 8002898:	fa21 f303 	lsr.w	r3, r1, r3
}
 800289c:	4618      	mov	r0, r3
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40021000 	.word	0x40021000
 80028a4:	08007a28 	.word	0x08007a28

080028a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80028ac:	f7ff ffda 	bl	8002864 <HAL_RCC_GetHCLKFreq>
 80028b0:	4601      	mov	r1, r0
 80028b2:	4b06      	ldr	r3, [pc, #24]	; (80028cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	0adb      	lsrs	r3, r3, #11
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	4a04      	ldr	r2, [pc, #16]	; (80028d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80028be:	5cd3      	ldrb	r3, [r2, r3]
 80028c0:	f003 031f 	and.w	r3, r3, #31
 80028c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40021000 	.word	0x40021000
 80028d0:	08007a28 	.word	0x08007a28

080028d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80028dc:	2300      	movs	r3, #0
 80028de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80028e0:	4b2a      	ldr	r3, [pc, #168]	; (800298c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80028ec:	f7ff f9f4 	bl	8001cd8 <HAL_PWREx_GetVoltageRange>
 80028f0:	6178      	str	r0, [r7, #20]
 80028f2:	e014      	b.n	800291e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80028f4:	4b25      	ldr	r3, [pc, #148]	; (800298c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f8:	4a24      	ldr	r2, [pc, #144]	; (800298c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028fe:	6593      	str	r3, [r2, #88]	; 0x58
 8002900:	4b22      	ldr	r3, [pc, #136]	; (800298c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002908:	60fb      	str	r3, [r7, #12]
 800290a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800290c:	f7ff f9e4 	bl	8001cd8 <HAL_PWREx_GetVoltageRange>
 8002910:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002912:	4b1e      	ldr	r3, [pc, #120]	; (800298c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002916:	4a1d      	ldr	r2, [pc, #116]	; (800298c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002918:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800291c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002924:	d10b      	bne.n	800293e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b80      	cmp	r3, #128	; 0x80
 800292a:	d919      	bls.n	8002960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2ba0      	cmp	r3, #160	; 0xa0
 8002930:	d902      	bls.n	8002938 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002932:	2302      	movs	r3, #2
 8002934:	613b      	str	r3, [r7, #16]
 8002936:	e013      	b.n	8002960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002938:	2301      	movs	r3, #1
 800293a:	613b      	str	r3, [r7, #16]
 800293c:	e010      	b.n	8002960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b80      	cmp	r3, #128	; 0x80
 8002942:	d902      	bls.n	800294a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002944:	2303      	movs	r3, #3
 8002946:	613b      	str	r3, [r7, #16]
 8002948:	e00a      	b.n	8002960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b80      	cmp	r3, #128	; 0x80
 800294e:	d102      	bne.n	8002956 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002950:	2302      	movs	r3, #2
 8002952:	613b      	str	r3, [r7, #16]
 8002954:	e004      	b.n	8002960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2b70      	cmp	r3, #112	; 0x70
 800295a:	d101      	bne.n	8002960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800295c:	2301      	movs	r3, #1
 800295e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002960:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f023 0207 	bic.w	r2, r3, #7
 8002968:	4909      	ldr	r1, [pc, #36]	; (8002990 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	4313      	orrs	r3, r2
 800296e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002970:	4b07      	ldr	r3, [pc, #28]	; (8002990 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	429a      	cmp	r2, r3
 800297c:	d001      	beq.n	8002982 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3718      	adds	r7, #24
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40021000 	.word	0x40021000
 8002990:	40022000 	.word	0x40022000

08002994 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800299c:	2300      	movs	r3, #0
 800299e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029a0:	2300      	movs	r3, #0
 80029a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d03f      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029b8:	d01c      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80029ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029be:	d802      	bhi.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00e      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80029c4:	e01f      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80029c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029ca:	d003      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80029cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80029d0:	d01c      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x78>
 80029d2:	e018      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029d4:	4b85      	ldr	r3, [pc, #532]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	4a84      	ldr	r2, [pc, #528]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029de:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029e0:	e015      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	3304      	adds	r3, #4
 80029e6:	2100      	movs	r1, #0
 80029e8:	4618      	mov	r0, r3
 80029ea:	f000 fab9 	bl	8002f60 <RCCEx_PLLSAI1_Config>
 80029ee:	4603      	mov	r3, r0
 80029f0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029f2:	e00c      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3320      	adds	r3, #32
 80029f8:	2100      	movs	r1, #0
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 fba0 	bl	8003140 <RCCEx_PLLSAI2_Config>
 8002a00:	4603      	mov	r3, r0
 8002a02:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a04:	e003      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	74fb      	strb	r3, [r7, #19]
      break;
 8002a0a:	e000      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002a0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a0e:	7cfb      	ldrb	r3, [r7, #19]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10b      	bne.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a14:	4b75      	ldr	r3, [pc, #468]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a1a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a22:	4972      	ldr	r1, [pc, #456]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a2a:	e001      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a2c:	7cfb      	ldrb	r3, [r7, #19]
 8002a2e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d03f      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a44:	d01c      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002a46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a4a:	d802      	bhi.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00e      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002a50:	e01f      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002a52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a56:	d003      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002a58:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a5c:	d01c      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002a5e:	e018      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a60:	4b62      	ldr	r3, [pc, #392]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	4a61      	ldr	r2, [pc, #388]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a6a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a6c:	e015      	b.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	3304      	adds	r3, #4
 8002a72:	2100      	movs	r1, #0
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 fa73 	bl	8002f60 <RCCEx_PLLSAI1_Config>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a7e:	e00c      	b.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3320      	adds	r3, #32
 8002a84:	2100      	movs	r1, #0
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 fb5a 	bl	8003140 <RCCEx_PLLSAI2_Config>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a90:	e003      	b.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	74fb      	strb	r3, [r7, #19]
      break;
 8002a96:	e000      	b.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002a98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a9a:	7cfb      	ldrb	r3, [r7, #19]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10b      	bne.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002aa0:	4b52      	ldr	r3, [pc, #328]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002aae:	494f      	ldr	r1, [pc, #316]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002ab6:	e001      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ab8:	7cfb      	ldrb	r3, [r7, #19]
 8002aba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 80a0 	beq.w	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aca:	2300      	movs	r3, #0
 8002acc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ace:	4b47      	ldr	r3, [pc, #284]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002ada:	2301      	movs	r3, #1
 8002adc:	e000      	b.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002ade:	2300      	movs	r3, #0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00d      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ae4:	4b41      	ldr	r3, [pc, #260]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae8:	4a40      	ldr	r2, [pc, #256]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aee:	6593      	str	r3, [r2, #88]	; 0x58
 8002af0:	4b3e      	ldr	r3, [pc, #248]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af8:	60bb      	str	r3, [r7, #8]
 8002afa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002afc:	2301      	movs	r3, #1
 8002afe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b00:	4b3b      	ldr	r3, [pc, #236]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a3a      	ldr	r2, [pc, #232]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b0c:	f7fd fd44 	bl	8000598 <HAL_GetTick>
 8002b10:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b12:	e009      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b14:	f7fd fd40 	bl	8000598 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d902      	bls.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	74fb      	strb	r3, [r7, #19]
        break;
 8002b26:	e005      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b28:	4b31      	ldr	r3, [pc, #196]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d0ef      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002b34:	7cfb      	ldrb	r3, [r7, #19]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d15c      	bne.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b3a:	4b2c      	ldr	r3, [pc, #176]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b44:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d01f      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d019      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b58:	4b24      	ldr	r3, [pc, #144]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b64:	4b21      	ldr	r3, [pc, #132]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b6a:	4a20      	ldr	r2, [pc, #128]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b74:	4b1d      	ldr	r3, [pc, #116]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7a:	4a1c      	ldr	r2, [pc, #112]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b84:	4a19      	ldr	r2, [pc, #100]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d016      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b96:	f7fd fcff 	bl	8000598 <HAL_GetTick>
 8002b9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b9c:	e00b      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b9e:	f7fd fcfb 	bl	8000598 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d902      	bls.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	74fb      	strb	r3, [r7, #19]
            break;
 8002bb4:	e006      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bb6:	4b0d      	ldr	r3, [pc, #52]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d0ec      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002bc4:	7cfb      	ldrb	r3, [r7, #19]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10c      	bne.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bca:	4b08      	ldr	r3, [pc, #32]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bda:	4904      	ldr	r1, [pc, #16]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002be2:	e009      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002be4:	7cfb      	ldrb	r3, [r7, #19]
 8002be6:	74bb      	strb	r3, [r7, #18]
 8002be8:	e006      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002bea:	bf00      	nop
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bf4:	7cfb      	ldrb	r3, [r7, #19]
 8002bf6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bf8:	7c7b      	ldrb	r3, [r7, #17]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d105      	bne.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bfe:	4b9e      	ldr	r3, [pc, #632]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c02:	4a9d      	ldr	r2, [pc, #628]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c08:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00a      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c16:	4b98      	ldr	r3, [pc, #608]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1c:	f023 0203 	bic.w	r2, r3, #3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c24:	4994      	ldr	r1, [pc, #592]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00a      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c38:	4b8f      	ldr	r3, [pc, #572]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3e:	f023 020c 	bic.w	r2, r3, #12
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c46:	498c      	ldr	r1, [pc, #560]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0304 	and.w	r3, r3, #4
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00a      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c5a:	4b87      	ldr	r3, [pc, #540]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c60:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	4983      	ldr	r1, [pc, #524]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0308 	and.w	r3, r3, #8
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00a      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c7c:	4b7e      	ldr	r3, [pc, #504]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c82:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8a:	497b      	ldr	r1, [pc, #492]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0310 	and.w	r3, r3, #16
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00a      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c9e:	4b76      	ldr	r3, [pc, #472]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cac:	4972      	ldr	r1, [pc, #456]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0320 	and.w	r3, r3, #32
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00a      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cc0:	4b6d      	ldr	r3, [pc, #436]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cce:	496a      	ldr	r1, [pc, #424]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00a      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ce2:	4b65      	ldr	r3, [pc, #404]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf0:	4961      	ldr	r1, [pc, #388]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00a      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d04:	4b5c      	ldr	r3, [pc, #368]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d12:	4959      	ldr	r1, [pc, #356]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00a      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d26:	4b54      	ldr	r3, [pc, #336]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d2c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d34:	4950      	ldr	r1, [pc, #320]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00a      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d48:	4b4b      	ldr	r3, [pc, #300]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d56:	4948      	ldr	r1, [pc, #288]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00a      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d6a:	4b43      	ldr	r3, [pc, #268]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d78:	493f      	ldr	r1, [pc, #252]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d028      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d8c:	4b3a      	ldr	r3, [pc, #232]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d9a:	4937      	ldr	r1, [pc, #220]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002da6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002daa:	d106      	bne.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dac:	4b32      	ldr	r3, [pc, #200]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	4a31      	ldr	r2, [pc, #196]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002db2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002db6:	60d3      	str	r3, [r2, #12]
 8002db8:	e011      	b.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dc2:	d10c      	bne.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	3304      	adds	r3, #4
 8002dc8:	2101      	movs	r1, #1
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 f8c8 	bl	8002f60 <RCCEx_PLLSAI1_Config>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002dd4:	7cfb      	ldrb	r3, [r7, #19]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002dda:	7cfb      	ldrb	r3, [r7, #19]
 8002ddc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d028      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002dea:	4b23      	ldr	r3, [pc, #140]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df8:	491f      	ldr	r1, [pc, #124]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e08:	d106      	bne.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e0a:	4b1b      	ldr	r3, [pc, #108]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	4a1a      	ldr	r2, [pc, #104]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e14:	60d3      	str	r3, [r2, #12]
 8002e16:	e011      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e20:	d10c      	bne.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	3304      	adds	r3, #4
 8002e26:	2101      	movs	r1, #1
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 f899 	bl	8002f60 <RCCEx_PLLSAI1_Config>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e32:	7cfb      	ldrb	r3, [r7, #19]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002e38:	7cfb      	ldrb	r3, [r7, #19]
 8002e3a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d02b      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e48:	4b0b      	ldr	r3, [pc, #44]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e56:	4908      	ldr	r1, [pc, #32]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e66:	d109      	bne.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e68:	4b03      	ldr	r3, [pc, #12]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	4a02      	ldr	r2, [pc, #8]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e72:	60d3      	str	r3, [r2, #12]
 8002e74:	e014      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002e76:	bf00      	nop
 8002e78:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e84:	d10c      	bne.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	3304      	adds	r3, #4
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f000 f867 	bl	8002f60 <RCCEx_PLLSAI1_Config>
 8002e92:	4603      	mov	r3, r0
 8002e94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e96:	7cfb      	ldrb	r3, [r7, #19]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002e9c:	7cfb      	ldrb	r3, [r7, #19]
 8002e9e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d02f      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002eac:	4b2b      	ldr	r3, [pc, #172]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002eba:	4928      	ldr	r1, [pc, #160]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ec6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002eca:	d10d      	bne.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	3304      	adds	r3, #4
 8002ed0:	2102      	movs	r1, #2
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 f844 	bl	8002f60 <RCCEx_PLLSAI1_Config>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002edc:	7cfb      	ldrb	r3, [r7, #19]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d014      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002ee2:	7cfb      	ldrb	r3, [r7, #19]
 8002ee4:	74bb      	strb	r3, [r7, #18]
 8002ee6:	e011      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002eec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ef0:	d10c      	bne.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	3320      	adds	r3, #32
 8002ef6:	2102      	movs	r1, #2
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f000 f921 	bl	8003140 <RCCEx_PLLSAI2_Config>
 8002efe:	4603      	mov	r3, r0
 8002f00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f02:	7cfb      	ldrb	r3, [r7, #19]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002f08:	7cfb      	ldrb	r3, [r7, #19]
 8002f0a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00a      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f18:	4b10      	ldr	r3, [pc, #64]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f1e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f26:	490d      	ldr	r1, [pc, #52]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00b      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f3a:	4b08      	ldr	r3, [pc, #32]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f40:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f4a:	4904      	ldr	r1, [pc, #16]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f52:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3718      	adds	r7, #24
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40021000 	.word	0x40021000

08002f60 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f6e:	4b73      	ldr	r3, [pc, #460]	; (800313c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	f003 0303 	and.w	r3, r3, #3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d018      	beq.n	8002fac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f7a:	4b70      	ldr	r3, [pc, #448]	; (800313c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	f003 0203 	and.w	r2, r3, #3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d10d      	bne.n	8002fa6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
       ||
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d009      	beq.n	8002fa6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002f92:	4b6a      	ldr	r3, [pc, #424]	; (800313c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	091b      	lsrs	r3, r3, #4
 8002f98:	f003 0307 	and.w	r3, r3, #7
 8002f9c:	1c5a      	adds	r2, r3, #1
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
       ||
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d044      	beq.n	8003030 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	73fb      	strb	r3, [r7, #15]
 8002faa:	e041      	b.n	8003030 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d00c      	beq.n	8002fce <RCCEx_PLLSAI1_Config+0x6e>
 8002fb4:	2b03      	cmp	r3, #3
 8002fb6:	d013      	beq.n	8002fe0 <RCCEx_PLLSAI1_Config+0x80>
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d120      	bne.n	8002ffe <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fbc:	4b5f      	ldr	r3, [pc, #380]	; (800313c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d11d      	bne.n	8003004 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fcc:	e01a      	b.n	8003004 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002fce:	4b5b      	ldr	r3, [pc, #364]	; (800313c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d116      	bne.n	8003008 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fde:	e013      	b.n	8003008 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002fe0:	4b56      	ldr	r3, [pc, #344]	; (800313c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d10f      	bne.n	800300c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002fec:	4b53      	ldr	r3, [pc, #332]	; (800313c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d109      	bne.n	800300c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ffc:	e006      	b.n	800300c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	73fb      	strb	r3, [r7, #15]
      break;
 8003002:	e004      	b.n	800300e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003004:	bf00      	nop
 8003006:	e002      	b.n	800300e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003008:	bf00      	nop
 800300a:	e000      	b.n	800300e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800300c:	bf00      	nop
    }

    if(status == HAL_OK)
 800300e:	7bfb      	ldrb	r3, [r7, #15]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10d      	bne.n	8003030 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003014:	4b49      	ldr	r3, [pc, #292]	; (800313c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6819      	ldr	r1, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	3b01      	subs	r3, #1
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	430b      	orrs	r3, r1
 800302a:	4944      	ldr	r1, [pc, #272]	; (800313c <RCCEx_PLLSAI1_Config+0x1dc>)
 800302c:	4313      	orrs	r3, r2
 800302e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003030:	7bfb      	ldrb	r3, [r7, #15]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d17d      	bne.n	8003132 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003036:	4b41      	ldr	r3, [pc, #260]	; (800313c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a40      	ldr	r2, [pc, #256]	; (800313c <RCCEx_PLLSAI1_Config+0x1dc>)
 800303c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003040:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003042:	f7fd faa9 	bl	8000598 <HAL_GetTick>
 8003046:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003048:	e009      	b.n	800305e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800304a:	f7fd faa5 	bl	8000598 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d902      	bls.n	800305e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	73fb      	strb	r3, [r7, #15]
        break;
 800305c:	e005      	b.n	800306a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800305e:	4b37      	ldr	r3, [pc, #220]	; (800313c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1ef      	bne.n	800304a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800306a:	7bfb      	ldrb	r3, [r7, #15]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d160      	bne.n	8003132 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d111      	bne.n	800309a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003076:	4b31      	ldr	r3, [pc, #196]	; (800313c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800307e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6892      	ldr	r2, [r2, #8]
 8003086:	0211      	lsls	r1, r2, #8
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	68d2      	ldr	r2, [r2, #12]
 800308c:	0912      	lsrs	r2, r2, #4
 800308e:	0452      	lsls	r2, r2, #17
 8003090:	430a      	orrs	r2, r1
 8003092:	492a      	ldr	r1, [pc, #168]	; (800313c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003094:	4313      	orrs	r3, r2
 8003096:	610b      	str	r3, [r1, #16]
 8003098:	e027      	b.n	80030ea <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d112      	bne.n	80030c6 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030a0:	4b26      	ldr	r3, [pc, #152]	; (800313c <RCCEx_PLLSAI1_Config+0x1dc>)
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80030a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6892      	ldr	r2, [r2, #8]
 80030b0:	0211      	lsls	r1, r2, #8
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	6912      	ldr	r2, [r2, #16]
 80030b6:	0852      	lsrs	r2, r2, #1
 80030b8:	3a01      	subs	r2, #1
 80030ba:	0552      	lsls	r2, r2, #21
 80030bc:	430a      	orrs	r2, r1
 80030be:	491f      	ldr	r1, [pc, #124]	; (800313c <RCCEx_PLLSAI1_Config+0x1dc>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	610b      	str	r3, [r1, #16]
 80030c4:	e011      	b.n	80030ea <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030c6:	4b1d      	ldr	r3, [pc, #116]	; (800313c <RCCEx_PLLSAI1_Config+0x1dc>)
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80030ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6892      	ldr	r2, [r2, #8]
 80030d6:	0211      	lsls	r1, r2, #8
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6952      	ldr	r2, [r2, #20]
 80030dc:	0852      	lsrs	r2, r2, #1
 80030de:	3a01      	subs	r2, #1
 80030e0:	0652      	lsls	r2, r2, #25
 80030e2:	430a      	orrs	r2, r1
 80030e4:	4915      	ldr	r1, [pc, #84]	; (800313c <RCCEx_PLLSAI1_Config+0x1dc>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80030ea:	4b14      	ldr	r3, [pc, #80]	; (800313c <RCCEx_PLLSAI1_Config+0x1dc>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a13      	ldr	r2, [pc, #76]	; (800313c <RCCEx_PLLSAI1_Config+0x1dc>)
 80030f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030f4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f6:	f7fd fa4f 	bl	8000598 <HAL_GetTick>
 80030fa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030fc:	e009      	b.n	8003112 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030fe:	f7fd fa4b 	bl	8000598 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d902      	bls.n	8003112 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	73fb      	strb	r3, [r7, #15]
          break;
 8003110:	e005      	b.n	800311e <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003112:	4b0a      	ldr	r3, [pc, #40]	; (800313c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0ef      	beq.n	80030fe <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800311e:	7bfb      	ldrb	r3, [r7, #15]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d106      	bne.n	8003132 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003124:	4b05      	ldr	r3, [pc, #20]	; (800313c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003126:	691a      	ldr	r2, [r3, #16]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	4903      	ldr	r1, [pc, #12]	; (800313c <RCCEx_PLLSAI1_Config+0x1dc>)
 800312e:	4313      	orrs	r3, r2
 8003130:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003132:	7bfb      	ldrb	r3, [r7, #15]
}
 8003134:	4618      	mov	r0, r3
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	40021000 	.word	0x40021000

08003140 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800314a:	2300      	movs	r3, #0
 800314c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800314e:	4b68      	ldr	r3, [pc, #416]	; (80032f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	f003 0303 	and.w	r3, r3, #3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d018      	beq.n	800318c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800315a:	4b65      	ldr	r3, [pc, #404]	; (80032f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	f003 0203 	and.w	r2, r3, #3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	429a      	cmp	r2, r3
 8003168:	d10d      	bne.n	8003186 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
       ||
 800316e:	2b00      	cmp	r3, #0
 8003170:	d009      	beq.n	8003186 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003172:	4b5f      	ldr	r3, [pc, #380]	; (80032f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	091b      	lsrs	r3, r3, #4
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	1c5a      	adds	r2, r3, #1
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
       ||
 8003182:	429a      	cmp	r2, r3
 8003184:	d044      	beq.n	8003210 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	73fb      	strb	r3, [r7, #15]
 800318a:	e041      	b.n	8003210 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2b02      	cmp	r3, #2
 8003192:	d00c      	beq.n	80031ae <RCCEx_PLLSAI2_Config+0x6e>
 8003194:	2b03      	cmp	r3, #3
 8003196:	d013      	beq.n	80031c0 <RCCEx_PLLSAI2_Config+0x80>
 8003198:	2b01      	cmp	r3, #1
 800319a:	d120      	bne.n	80031de <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800319c:	4b54      	ldr	r3, [pc, #336]	; (80032f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d11d      	bne.n	80031e4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031ac:	e01a      	b.n	80031e4 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031ae:	4b50      	ldr	r3, [pc, #320]	; (80032f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d116      	bne.n	80031e8 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031be:	e013      	b.n	80031e8 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031c0:	4b4b      	ldr	r3, [pc, #300]	; (80032f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10f      	bne.n	80031ec <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031cc:	4b48      	ldr	r3, [pc, #288]	; (80032f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d109      	bne.n	80031ec <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80031dc:	e006      	b.n	80031ec <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	73fb      	strb	r3, [r7, #15]
      break;
 80031e2:	e004      	b.n	80031ee <RCCEx_PLLSAI2_Config+0xae>
      break;
 80031e4:	bf00      	nop
 80031e6:	e002      	b.n	80031ee <RCCEx_PLLSAI2_Config+0xae>
      break;
 80031e8:	bf00      	nop
 80031ea:	e000      	b.n	80031ee <RCCEx_PLLSAI2_Config+0xae>
      break;
 80031ec:	bf00      	nop
    }

    if(status == HAL_OK)
 80031ee:	7bfb      	ldrb	r3, [r7, #15]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d10d      	bne.n	8003210 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80031f4:	4b3e      	ldr	r3, [pc, #248]	; (80032f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6819      	ldr	r1, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	3b01      	subs	r3, #1
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	430b      	orrs	r3, r1
 800320a:	4939      	ldr	r1, [pc, #228]	; (80032f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800320c:	4313      	orrs	r3, r2
 800320e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003210:	7bfb      	ldrb	r3, [r7, #15]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d167      	bne.n	80032e6 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003216:	4b36      	ldr	r3, [pc, #216]	; (80032f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a35      	ldr	r2, [pc, #212]	; (80032f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800321c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003220:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003222:	f7fd f9b9 	bl	8000598 <HAL_GetTick>
 8003226:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003228:	e009      	b.n	800323e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800322a:	f7fd f9b5 	bl	8000598 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d902      	bls.n	800323e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	73fb      	strb	r3, [r7, #15]
        break;
 800323c:	e005      	b.n	800324a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800323e:	4b2c      	ldr	r3, [pc, #176]	; (80032f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1ef      	bne.n	800322a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800324a:	7bfb      	ldrb	r3, [r7, #15]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d14a      	bne.n	80032e6 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d111      	bne.n	800327a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003256:	4b26      	ldr	r3, [pc, #152]	; (80032f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800325e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	6892      	ldr	r2, [r2, #8]
 8003266:	0211      	lsls	r1, r2, #8
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	68d2      	ldr	r2, [r2, #12]
 800326c:	0912      	lsrs	r2, r2, #4
 800326e:	0452      	lsls	r2, r2, #17
 8003270:	430a      	orrs	r2, r1
 8003272:	491f      	ldr	r1, [pc, #124]	; (80032f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003274:	4313      	orrs	r3, r2
 8003276:	614b      	str	r3, [r1, #20]
 8003278:	e011      	b.n	800329e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800327a:	4b1d      	ldr	r3, [pc, #116]	; (80032f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003282:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6892      	ldr	r2, [r2, #8]
 800328a:	0211      	lsls	r1, r2, #8
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	6912      	ldr	r2, [r2, #16]
 8003290:	0852      	lsrs	r2, r2, #1
 8003292:	3a01      	subs	r2, #1
 8003294:	0652      	lsls	r2, r2, #25
 8003296:	430a      	orrs	r2, r1
 8003298:	4915      	ldr	r1, [pc, #84]	; (80032f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800329a:	4313      	orrs	r3, r2
 800329c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800329e:	4b14      	ldr	r3, [pc, #80]	; (80032f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a13      	ldr	r2, [pc, #76]	; (80032f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80032a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032a8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032aa:	f7fd f975 	bl	8000598 <HAL_GetTick>
 80032ae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032b0:	e009      	b.n	80032c6 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80032b2:	f7fd f971 	bl	8000598 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d902      	bls.n	80032c6 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	73fb      	strb	r3, [r7, #15]
          break;
 80032c4:	e005      	b.n	80032d2 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032c6:	4b0a      	ldr	r3, [pc, #40]	; (80032f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d0ef      	beq.n	80032b2 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80032d2:	7bfb      	ldrb	r3, [r7, #15]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d106      	bne.n	80032e6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80032d8:	4b05      	ldr	r3, [pc, #20]	; (80032f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80032da:	695a      	ldr	r2, [r3, #20]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	4903      	ldr	r1, [pc, #12]	; (80032f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80032e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40021000 	.word	0x40021000

080032f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e040      	b.n	8003388 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800330a:	2b00      	cmp	r3, #0
 800330c:	d106      	bne.n	800331c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f003 fbd4 	bl	8006ac4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2224      	movs	r2, #36	; 0x24
 8003320:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 0201 	bic.w	r2, r2, #1
 8003330:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f82c 	bl	8003390 <UART_SetConfig>
 8003338:	4603      	mov	r3, r0
 800333a:	2b01      	cmp	r3, #1
 800333c:	d101      	bne.n	8003342 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e022      	b.n	8003388 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	2b00      	cmp	r3, #0
 8003348:	d002      	beq.n	8003350 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 faaa 	bl	80038a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800335e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800336e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f042 0201 	orr.w	r2, r2, #1
 800337e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 fb31 	bl	80039e8 <UART_CheckIdleState>
 8003386:	4603      	mov	r3, r0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003390:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003394:	b088      	sub	sp, #32
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800339a:	2300      	movs	r3, #0
 800339c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689a      	ldr	r2, [r3, #8]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	431a      	orrs	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	4bac      	ldr	r3, [pc, #688]	; (8003670 <UART_SetConfig+0x2e0>)
 80033be:	4013      	ands	r3, r2
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	6812      	ldr	r2, [r2, #0]
 80033c4:	69f9      	ldr	r1, [r7, #28]
 80033c6:	430b      	orrs	r3, r1
 80033c8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68da      	ldr	r2, [r3, #12]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4aa2      	ldr	r2, [pc, #648]	; (8003674 <UART_SetConfig+0x2e4>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d004      	beq.n	80033fa <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	69fa      	ldr	r2, [r7, #28]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	69fa      	ldr	r2, [r7, #28]
 800340a:	430a      	orrs	r2, r1
 800340c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a99      	ldr	r2, [pc, #612]	; (8003678 <UART_SetConfig+0x2e8>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d121      	bne.n	800345c <UART_SetConfig+0xcc>
 8003418:	4b98      	ldr	r3, [pc, #608]	; (800367c <UART_SetConfig+0x2ec>)
 800341a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341e:	f003 0303 	and.w	r3, r3, #3
 8003422:	2b03      	cmp	r3, #3
 8003424:	d816      	bhi.n	8003454 <UART_SetConfig+0xc4>
 8003426:	a201      	add	r2, pc, #4	; (adr r2, 800342c <UART_SetConfig+0x9c>)
 8003428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800342c:	0800343d 	.word	0x0800343d
 8003430:	08003449 	.word	0x08003449
 8003434:	08003443 	.word	0x08003443
 8003438:	0800344f 	.word	0x0800344f
 800343c:	2301      	movs	r3, #1
 800343e:	76fb      	strb	r3, [r7, #27]
 8003440:	e0e8      	b.n	8003614 <UART_SetConfig+0x284>
 8003442:	2302      	movs	r3, #2
 8003444:	76fb      	strb	r3, [r7, #27]
 8003446:	e0e5      	b.n	8003614 <UART_SetConfig+0x284>
 8003448:	2304      	movs	r3, #4
 800344a:	76fb      	strb	r3, [r7, #27]
 800344c:	e0e2      	b.n	8003614 <UART_SetConfig+0x284>
 800344e:	2308      	movs	r3, #8
 8003450:	76fb      	strb	r3, [r7, #27]
 8003452:	e0df      	b.n	8003614 <UART_SetConfig+0x284>
 8003454:	2310      	movs	r3, #16
 8003456:	76fb      	strb	r3, [r7, #27]
 8003458:	bf00      	nop
 800345a:	e0db      	b.n	8003614 <UART_SetConfig+0x284>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a87      	ldr	r2, [pc, #540]	; (8003680 <UART_SetConfig+0x2f0>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d134      	bne.n	80034d0 <UART_SetConfig+0x140>
 8003466:	4b85      	ldr	r3, [pc, #532]	; (800367c <UART_SetConfig+0x2ec>)
 8003468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346c:	f003 030c 	and.w	r3, r3, #12
 8003470:	2b0c      	cmp	r3, #12
 8003472:	d829      	bhi.n	80034c8 <UART_SetConfig+0x138>
 8003474:	a201      	add	r2, pc, #4	; (adr r2, 800347c <UART_SetConfig+0xec>)
 8003476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800347a:	bf00      	nop
 800347c:	080034b1 	.word	0x080034b1
 8003480:	080034c9 	.word	0x080034c9
 8003484:	080034c9 	.word	0x080034c9
 8003488:	080034c9 	.word	0x080034c9
 800348c:	080034bd 	.word	0x080034bd
 8003490:	080034c9 	.word	0x080034c9
 8003494:	080034c9 	.word	0x080034c9
 8003498:	080034c9 	.word	0x080034c9
 800349c:	080034b7 	.word	0x080034b7
 80034a0:	080034c9 	.word	0x080034c9
 80034a4:	080034c9 	.word	0x080034c9
 80034a8:	080034c9 	.word	0x080034c9
 80034ac:	080034c3 	.word	0x080034c3
 80034b0:	2300      	movs	r3, #0
 80034b2:	76fb      	strb	r3, [r7, #27]
 80034b4:	e0ae      	b.n	8003614 <UART_SetConfig+0x284>
 80034b6:	2302      	movs	r3, #2
 80034b8:	76fb      	strb	r3, [r7, #27]
 80034ba:	e0ab      	b.n	8003614 <UART_SetConfig+0x284>
 80034bc:	2304      	movs	r3, #4
 80034be:	76fb      	strb	r3, [r7, #27]
 80034c0:	e0a8      	b.n	8003614 <UART_SetConfig+0x284>
 80034c2:	2308      	movs	r3, #8
 80034c4:	76fb      	strb	r3, [r7, #27]
 80034c6:	e0a5      	b.n	8003614 <UART_SetConfig+0x284>
 80034c8:	2310      	movs	r3, #16
 80034ca:	76fb      	strb	r3, [r7, #27]
 80034cc:	bf00      	nop
 80034ce:	e0a1      	b.n	8003614 <UART_SetConfig+0x284>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a6b      	ldr	r2, [pc, #428]	; (8003684 <UART_SetConfig+0x2f4>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d120      	bne.n	800351c <UART_SetConfig+0x18c>
 80034da:	4b68      	ldr	r3, [pc, #416]	; (800367c <UART_SetConfig+0x2ec>)
 80034dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80034e4:	2b10      	cmp	r3, #16
 80034e6:	d00f      	beq.n	8003508 <UART_SetConfig+0x178>
 80034e8:	2b10      	cmp	r3, #16
 80034ea:	d802      	bhi.n	80034f2 <UART_SetConfig+0x162>
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d005      	beq.n	80034fc <UART_SetConfig+0x16c>
 80034f0:	e010      	b.n	8003514 <UART_SetConfig+0x184>
 80034f2:	2b20      	cmp	r3, #32
 80034f4:	d005      	beq.n	8003502 <UART_SetConfig+0x172>
 80034f6:	2b30      	cmp	r3, #48	; 0x30
 80034f8:	d009      	beq.n	800350e <UART_SetConfig+0x17e>
 80034fa:	e00b      	b.n	8003514 <UART_SetConfig+0x184>
 80034fc:	2300      	movs	r3, #0
 80034fe:	76fb      	strb	r3, [r7, #27]
 8003500:	e088      	b.n	8003614 <UART_SetConfig+0x284>
 8003502:	2302      	movs	r3, #2
 8003504:	76fb      	strb	r3, [r7, #27]
 8003506:	e085      	b.n	8003614 <UART_SetConfig+0x284>
 8003508:	2304      	movs	r3, #4
 800350a:	76fb      	strb	r3, [r7, #27]
 800350c:	e082      	b.n	8003614 <UART_SetConfig+0x284>
 800350e:	2308      	movs	r3, #8
 8003510:	76fb      	strb	r3, [r7, #27]
 8003512:	e07f      	b.n	8003614 <UART_SetConfig+0x284>
 8003514:	2310      	movs	r3, #16
 8003516:	76fb      	strb	r3, [r7, #27]
 8003518:	bf00      	nop
 800351a:	e07b      	b.n	8003614 <UART_SetConfig+0x284>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a59      	ldr	r2, [pc, #356]	; (8003688 <UART_SetConfig+0x2f8>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d120      	bne.n	8003568 <UART_SetConfig+0x1d8>
 8003526:	4b55      	ldr	r3, [pc, #340]	; (800367c <UART_SetConfig+0x2ec>)
 8003528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003530:	2b40      	cmp	r3, #64	; 0x40
 8003532:	d00f      	beq.n	8003554 <UART_SetConfig+0x1c4>
 8003534:	2b40      	cmp	r3, #64	; 0x40
 8003536:	d802      	bhi.n	800353e <UART_SetConfig+0x1ae>
 8003538:	2b00      	cmp	r3, #0
 800353a:	d005      	beq.n	8003548 <UART_SetConfig+0x1b8>
 800353c:	e010      	b.n	8003560 <UART_SetConfig+0x1d0>
 800353e:	2b80      	cmp	r3, #128	; 0x80
 8003540:	d005      	beq.n	800354e <UART_SetConfig+0x1be>
 8003542:	2bc0      	cmp	r3, #192	; 0xc0
 8003544:	d009      	beq.n	800355a <UART_SetConfig+0x1ca>
 8003546:	e00b      	b.n	8003560 <UART_SetConfig+0x1d0>
 8003548:	2300      	movs	r3, #0
 800354a:	76fb      	strb	r3, [r7, #27]
 800354c:	e062      	b.n	8003614 <UART_SetConfig+0x284>
 800354e:	2302      	movs	r3, #2
 8003550:	76fb      	strb	r3, [r7, #27]
 8003552:	e05f      	b.n	8003614 <UART_SetConfig+0x284>
 8003554:	2304      	movs	r3, #4
 8003556:	76fb      	strb	r3, [r7, #27]
 8003558:	e05c      	b.n	8003614 <UART_SetConfig+0x284>
 800355a:	2308      	movs	r3, #8
 800355c:	76fb      	strb	r3, [r7, #27]
 800355e:	e059      	b.n	8003614 <UART_SetConfig+0x284>
 8003560:	2310      	movs	r3, #16
 8003562:	76fb      	strb	r3, [r7, #27]
 8003564:	bf00      	nop
 8003566:	e055      	b.n	8003614 <UART_SetConfig+0x284>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a47      	ldr	r2, [pc, #284]	; (800368c <UART_SetConfig+0x2fc>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d124      	bne.n	80035bc <UART_SetConfig+0x22c>
 8003572:	4b42      	ldr	r3, [pc, #264]	; (800367c <UART_SetConfig+0x2ec>)
 8003574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003578:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800357c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003580:	d012      	beq.n	80035a8 <UART_SetConfig+0x218>
 8003582:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003586:	d802      	bhi.n	800358e <UART_SetConfig+0x1fe>
 8003588:	2b00      	cmp	r3, #0
 800358a:	d007      	beq.n	800359c <UART_SetConfig+0x20c>
 800358c:	e012      	b.n	80035b4 <UART_SetConfig+0x224>
 800358e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003592:	d006      	beq.n	80035a2 <UART_SetConfig+0x212>
 8003594:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003598:	d009      	beq.n	80035ae <UART_SetConfig+0x21e>
 800359a:	e00b      	b.n	80035b4 <UART_SetConfig+0x224>
 800359c:	2300      	movs	r3, #0
 800359e:	76fb      	strb	r3, [r7, #27]
 80035a0:	e038      	b.n	8003614 <UART_SetConfig+0x284>
 80035a2:	2302      	movs	r3, #2
 80035a4:	76fb      	strb	r3, [r7, #27]
 80035a6:	e035      	b.n	8003614 <UART_SetConfig+0x284>
 80035a8:	2304      	movs	r3, #4
 80035aa:	76fb      	strb	r3, [r7, #27]
 80035ac:	e032      	b.n	8003614 <UART_SetConfig+0x284>
 80035ae:	2308      	movs	r3, #8
 80035b0:	76fb      	strb	r3, [r7, #27]
 80035b2:	e02f      	b.n	8003614 <UART_SetConfig+0x284>
 80035b4:	2310      	movs	r3, #16
 80035b6:	76fb      	strb	r3, [r7, #27]
 80035b8:	bf00      	nop
 80035ba:	e02b      	b.n	8003614 <UART_SetConfig+0x284>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a2c      	ldr	r2, [pc, #176]	; (8003674 <UART_SetConfig+0x2e4>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d124      	bne.n	8003610 <UART_SetConfig+0x280>
 80035c6:	4b2d      	ldr	r3, [pc, #180]	; (800367c <UART_SetConfig+0x2ec>)
 80035c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035d4:	d012      	beq.n	80035fc <UART_SetConfig+0x26c>
 80035d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035da:	d802      	bhi.n	80035e2 <UART_SetConfig+0x252>
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d007      	beq.n	80035f0 <UART_SetConfig+0x260>
 80035e0:	e012      	b.n	8003608 <UART_SetConfig+0x278>
 80035e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035e6:	d006      	beq.n	80035f6 <UART_SetConfig+0x266>
 80035e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035ec:	d009      	beq.n	8003602 <UART_SetConfig+0x272>
 80035ee:	e00b      	b.n	8003608 <UART_SetConfig+0x278>
 80035f0:	2300      	movs	r3, #0
 80035f2:	76fb      	strb	r3, [r7, #27]
 80035f4:	e00e      	b.n	8003614 <UART_SetConfig+0x284>
 80035f6:	2302      	movs	r3, #2
 80035f8:	76fb      	strb	r3, [r7, #27]
 80035fa:	e00b      	b.n	8003614 <UART_SetConfig+0x284>
 80035fc:	2304      	movs	r3, #4
 80035fe:	76fb      	strb	r3, [r7, #27]
 8003600:	e008      	b.n	8003614 <UART_SetConfig+0x284>
 8003602:	2308      	movs	r3, #8
 8003604:	76fb      	strb	r3, [r7, #27]
 8003606:	e005      	b.n	8003614 <UART_SetConfig+0x284>
 8003608:	2310      	movs	r3, #16
 800360a:	76fb      	strb	r3, [r7, #27]
 800360c:	bf00      	nop
 800360e:	e001      	b.n	8003614 <UART_SetConfig+0x284>
 8003610:	2310      	movs	r3, #16
 8003612:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a16      	ldr	r2, [pc, #88]	; (8003674 <UART_SetConfig+0x2e4>)
 800361a:	4293      	cmp	r3, r2
 800361c:	f040 8087 	bne.w	800372e <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003620:	7efb      	ldrb	r3, [r7, #27]
 8003622:	2b08      	cmp	r3, #8
 8003624:	d836      	bhi.n	8003694 <UART_SetConfig+0x304>
 8003626:	a201      	add	r2, pc, #4	; (adr r2, 800362c <UART_SetConfig+0x29c>)
 8003628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800362c:	08003651 	.word	0x08003651
 8003630:	08003695 	.word	0x08003695
 8003634:	08003659 	.word	0x08003659
 8003638:	08003695 	.word	0x08003695
 800363c:	0800365f 	.word	0x0800365f
 8003640:	08003695 	.word	0x08003695
 8003644:	08003695 	.word	0x08003695
 8003648:	08003695 	.word	0x08003695
 800364c:	08003667 	.word	0x08003667
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003650:	f7ff f914 	bl	800287c <HAL_RCC_GetPCLK1Freq>
 8003654:	6178      	str	r0, [r7, #20]
        break;
 8003656:	e022      	b.n	800369e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003658:	4b0d      	ldr	r3, [pc, #52]	; (8003690 <UART_SetConfig+0x300>)
 800365a:	617b      	str	r3, [r7, #20]
        break;
 800365c:	e01f      	b.n	800369e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800365e:	f7ff f877 	bl	8002750 <HAL_RCC_GetSysClockFreq>
 8003662:	6178      	str	r0, [r7, #20]
        break;
 8003664:	e01b      	b.n	800369e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003666:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800366a:	617b      	str	r3, [r7, #20]
        break;
 800366c:	e017      	b.n	800369e <UART_SetConfig+0x30e>
 800366e:	bf00      	nop
 8003670:	efff69f3 	.word	0xefff69f3
 8003674:	40008000 	.word	0x40008000
 8003678:	40013800 	.word	0x40013800
 800367c:	40021000 	.word	0x40021000
 8003680:	40004400 	.word	0x40004400
 8003684:	40004800 	.word	0x40004800
 8003688:	40004c00 	.word	0x40004c00
 800368c:	40005000 	.word	0x40005000
 8003690:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003694:	2300      	movs	r3, #0
 8003696:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	76bb      	strb	r3, [r7, #26]
        break;
 800369c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 80f1 	beq.w	8003888 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	4613      	mov	r3, r2
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	4413      	add	r3, r2
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d305      	bcc.n	80036c2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d902      	bls.n	80036c8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	76bb      	strb	r3, [r7, #26]
 80036c6:	e0df      	b.n	8003888 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	4619      	mov	r1, r3
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	f04f 0300 	mov.w	r3, #0
 80036d4:	f04f 0400 	mov.w	r4, #0
 80036d8:	0214      	lsls	r4, r2, #8
 80036da:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80036de:	020b      	lsls	r3, r1, #8
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6852      	ldr	r2, [r2, #4]
 80036e4:	0852      	lsrs	r2, r2, #1
 80036e6:	4611      	mov	r1, r2
 80036e8:	f04f 0200 	mov.w	r2, #0
 80036ec:	eb13 0b01 	adds.w	fp, r3, r1
 80036f0:	eb44 0c02 	adc.w	ip, r4, r2
 80036f4:	4658      	mov	r0, fp
 80036f6:	4661      	mov	r1, ip
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f04f 0400 	mov.w	r4, #0
 8003700:	461a      	mov	r2, r3
 8003702:	4623      	mov	r3, r4
 8003704:	f7fc fd60 	bl	80001c8 <__aeabi_uldivmod>
 8003708:	4603      	mov	r3, r0
 800370a:	460c      	mov	r4, r1
 800370c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003714:	d308      	bcc.n	8003728 <UART_SetConfig+0x398>
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800371c:	d204      	bcs.n	8003728 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	60da      	str	r2, [r3, #12]
 8003726:	e0af      	b.n	8003888 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	76bb      	strb	r3, [r7, #26]
 800372c:	e0ac      	b.n	8003888 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003736:	d15b      	bne.n	80037f0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003738:	7efb      	ldrb	r3, [r7, #27]
 800373a:	2b08      	cmp	r3, #8
 800373c:	d827      	bhi.n	800378e <UART_SetConfig+0x3fe>
 800373e:	a201      	add	r2, pc, #4	; (adr r2, 8003744 <UART_SetConfig+0x3b4>)
 8003740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003744:	08003769 	.word	0x08003769
 8003748:	08003771 	.word	0x08003771
 800374c:	08003779 	.word	0x08003779
 8003750:	0800378f 	.word	0x0800378f
 8003754:	0800377f 	.word	0x0800377f
 8003758:	0800378f 	.word	0x0800378f
 800375c:	0800378f 	.word	0x0800378f
 8003760:	0800378f 	.word	0x0800378f
 8003764:	08003787 	.word	0x08003787
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003768:	f7ff f888 	bl	800287c <HAL_RCC_GetPCLK1Freq>
 800376c:	6178      	str	r0, [r7, #20]
        break;
 800376e:	e013      	b.n	8003798 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003770:	f7ff f89a 	bl	80028a8 <HAL_RCC_GetPCLK2Freq>
 8003774:	6178      	str	r0, [r7, #20]
        break;
 8003776:	e00f      	b.n	8003798 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003778:	4b49      	ldr	r3, [pc, #292]	; (80038a0 <UART_SetConfig+0x510>)
 800377a:	617b      	str	r3, [r7, #20]
        break;
 800377c:	e00c      	b.n	8003798 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800377e:	f7fe ffe7 	bl	8002750 <HAL_RCC_GetSysClockFreq>
 8003782:	6178      	str	r0, [r7, #20]
        break;
 8003784:	e008      	b.n	8003798 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800378a:	617b      	str	r3, [r7, #20]
        break;
 800378c:	e004      	b.n	8003798 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800378e:	2300      	movs	r3, #0
 8003790:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	76bb      	strb	r3, [r7, #26]
        break;
 8003796:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d074      	beq.n	8003888 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	005a      	lsls	r2, r3, #1
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	085b      	lsrs	r3, r3, #1
 80037a8:	441a      	add	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	2b0f      	cmp	r3, #15
 80037ba:	d916      	bls.n	80037ea <UART_SetConfig+0x45a>
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c2:	d212      	bcs.n	80037ea <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	f023 030f 	bic.w	r3, r3, #15
 80037cc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	085b      	lsrs	r3, r3, #1
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	f003 0307 	and.w	r3, r3, #7
 80037d8:	b29a      	uxth	r2, r3
 80037da:	89fb      	ldrh	r3, [r7, #14]
 80037dc:	4313      	orrs	r3, r2
 80037de:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	89fa      	ldrh	r2, [r7, #14]
 80037e6:	60da      	str	r2, [r3, #12]
 80037e8:	e04e      	b.n	8003888 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	76bb      	strb	r3, [r7, #26]
 80037ee:	e04b      	b.n	8003888 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037f0:	7efb      	ldrb	r3, [r7, #27]
 80037f2:	2b08      	cmp	r3, #8
 80037f4:	d827      	bhi.n	8003846 <UART_SetConfig+0x4b6>
 80037f6:	a201      	add	r2, pc, #4	; (adr r2, 80037fc <UART_SetConfig+0x46c>)
 80037f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fc:	08003821 	.word	0x08003821
 8003800:	08003829 	.word	0x08003829
 8003804:	08003831 	.word	0x08003831
 8003808:	08003847 	.word	0x08003847
 800380c:	08003837 	.word	0x08003837
 8003810:	08003847 	.word	0x08003847
 8003814:	08003847 	.word	0x08003847
 8003818:	08003847 	.word	0x08003847
 800381c:	0800383f 	.word	0x0800383f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003820:	f7ff f82c 	bl	800287c <HAL_RCC_GetPCLK1Freq>
 8003824:	6178      	str	r0, [r7, #20]
        break;
 8003826:	e013      	b.n	8003850 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003828:	f7ff f83e 	bl	80028a8 <HAL_RCC_GetPCLK2Freq>
 800382c:	6178      	str	r0, [r7, #20]
        break;
 800382e:	e00f      	b.n	8003850 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003830:	4b1b      	ldr	r3, [pc, #108]	; (80038a0 <UART_SetConfig+0x510>)
 8003832:	617b      	str	r3, [r7, #20]
        break;
 8003834:	e00c      	b.n	8003850 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003836:	f7fe ff8b 	bl	8002750 <HAL_RCC_GetSysClockFreq>
 800383a:	6178      	str	r0, [r7, #20]
        break;
 800383c:	e008      	b.n	8003850 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800383e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003842:	617b      	str	r3, [r7, #20]
        break;
 8003844:	e004      	b.n	8003850 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003846:	2300      	movs	r3, #0
 8003848:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	76bb      	strb	r3, [r7, #26]
        break;
 800384e:	bf00      	nop
    }

    if (pclk != 0U)
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d018      	beq.n	8003888 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	085a      	lsrs	r2, r3, #1
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	441a      	add	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	fbb2 f3f3 	udiv	r3, r2, r3
 8003868:	b29b      	uxth	r3, r3
 800386a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	2b0f      	cmp	r3, #15
 8003870:	d908      	bls.n	8003884 <UART_SetConfig+0x4f4>
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003878:	d204      	bcs.n	8003884 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	60da      	str	r2, [r3, #12]
 8003882:	e001      	b.n	8003888 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003894:	7ebb      	ldrb	r3, [r7, #26]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3720      	adds	r7, #32
 800389a:	46bd      	mov	sp, r7
 800389c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80038a0:	00f42400 	.word	0x00f42400

080038a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00a      	beq.n	80038ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00a      	beq.n	80038f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	f003 0304 	and.w	r3, r3, #4
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00a      	beq.n	8003912 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003916:	f003 0308 	and.w	r3, r3, #8
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00a      	beq.n	8003934 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	f003 0310 	and.w	r3, r3, #16
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00a      	beq.n	8003956 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395a:	f003 0320 	and.w	r3, r3, #32
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00a      	beq.n	8003978 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	430a      	orrs	r2, r1
 8003976:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003980:	2b00      	cmp	r3, #0
 8003982:	d01a      	beq.n	80039ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	430a      	orrs	r2, r1
 8003998:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039a2:	d10a      	bne.n	80039ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00a      	beq.n	80039dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	430a      	orrs	r2, r1
 80039da:	605a      	str	r2, [r3, #4]
  }
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af02      	add	r7, sp, #8
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80039f6:	f7fc fdcf 	bl	8000598 <HAL_GetTick>
 80039fa:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0308 	and.w	r3, r3, #8
 8003a06:	2b08      	cmp	r3, #8
 8003a08:	d10e      	bne.n	8003a28 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a0a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 f82a 	bl	8003a72 <UART_WaitOnFlagUntilTimeout>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e020      	b.n	8003a6a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0304 	and.w	r3, r3, #4
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d10e      	bne.n	8003a54 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a36:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 f814 	bl	8003a72 <UART_WaitOnFlagUntilTimeout>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d001      	beq.n	8003a54 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e00a      	b.n	8003a6a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2220      	movs	r2, #32
 8003a58:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b084      	sub	sp, #16
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	60f8      	str	r0, [r7, #12]
 8003a7a:	60b9      	str	r1, [r7, #8]
 8003a7c:	603b      	str	r3, [r7, #0]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a82:	e05d      	b.n	8003b40 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a8a:	d059      	beq.n	8003b40 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a8c:	f7fc fd84 	bl	8000598 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d302      	bcc.n	8003aa2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d11b      	bne.n	8003ada <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ab0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0201 	bic.w	r2, r2, #1
 8003ac0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2220      	movs	r2, #32
 8003acc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e042      	b.n	8003b60 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d02b      	beq.n	8003b40 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003af2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003af6:	d123      	bne.n	8003b40 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b00:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b10:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 0201 	bic.w	r2, r2, #1
 8003b20:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2220      	movs	r2, #32
 8003b26:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2220      	movs	r2, #32
 8003b32:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e00f      	b.n	8003b60 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	69da      	ldr	r2, [r3, #28]
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	bf0c      	ite	eq
 8003b50:	2301      	moveq	r3, #1
 8003b52:	2300      	movne	r3, #0
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	461a      	mov	r2, r3
 8003b58:	79fb      	ldrb	r3, [r7, #7]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d092      	beq.n	8003a84 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b68:	b084      	sub	sp, #16
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b084      	sub	sp, #16
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
 8003b72:	f107 001c 	add.w	r0, r7, #28
 8003b76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d122      	bne.n	8003bc6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003b94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d105      	bne.n	8003bba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f001 f9da 	bl	8004f74 <USB_CoreReset>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	73fb      	strb	r3, [r7, #15]
 8003bc4:	e01a      	b.n	8003bfc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f001 f9ce 	bl	8004f74 <USB_CoreReset>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d106      	bne.n	8003bf0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	639a      	str	r2, [r3, #56]	; 0x38
 8003bee:	e005      	b.n	8003bfc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8003bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c08:	b004      	add	sp, #16
 8003c0a:	4770      	bx	lr

08003c0c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b087      	sub	sp, #28
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	4613      	mov	r3, r2
 8003c18:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003c1a:	79fb      	ldrb	r3, [r7, #7]
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d165      	bne.n	8003cec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	4a3e      	ldr	r2, [pc, #248]	; (8003d1c <USB_SetTurnaroundTime+0x110>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d906      	bls.n	8003c36 <USB_SetTurnaroundTime+0x2a>
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	4a3d      	ldr	r2, [pc, #244]	; (8003d20 <USB_SetTurnaroundTime+0x114>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d802      	bhi.n	8003c36 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003c30:	230f      	movs	r3, #15
 8003c32:	617b      	str	r3, [r7, #20]
 8003c34:	e05c      	b.n	8003cf0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	4a39      	ldr	r2, [pc, #228]	; (8003d20 <USB_SetTurnaroundTime+0x114>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d906      	bls.n	8003c4c <USB_SetTurnaroundTime+0x40>
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	4a38      	ldr	r2, [pc, #224]	; (8003d24 <USB_SetTurnaroundTime+0x118>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d802      	bhi.n	8003c4c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003c46:	230e      	movs	r3, #14
 8003c48:	617b      	str	r3, [r7, #20]
 8003c4a:	e051      	b.n	8003cf0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	4a35      	ldr	r2, [pc, #212]	; (8003d24 <USB_SetTurnaroundTime+0x118>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d906      	bls.n	8003c62 <USB_SetTurnaroundTime+0x56>
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	4a34      	ldr	r2, [pc, #208]	; (8003d28 <USB_SetTurnaroundTime+0x11c>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d802      	bhi.n	8003c62 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003c5c:	230d      	movs	r3, #13
 8003c5e:	617b      	str	r3, [r7, #20]
 8003c60:	e046      	b.n	8003cf0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	4a30      	ldr	r2, [pc, #192]	; (8003d28 <USB_SetTurnaroundTime+0x11c>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d906      	bls.n	8003c78 <USB_SetTurnaroundTime+0x6c>
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	4a2f      	ldr	r2, [pc, #188]	; (8003d2c <USB_SetTurnaroundTime+0x120>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d802      	bhi.n	8003c78 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003c72:	230c      	movs	r3, #12
 8003c74:	617b      	str	r3, [r7, #20]
 8003c76:	e03b      	b.n	8003cf0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	4a2c      	ldr	r2, [pc, #176]	; (8003d2c <USB_SetTurnaroundTime+0x120>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d906      	bls.n	8003c8e <USB_SetTurnaroundTime+0x82>
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	4a2b      	ldr	r2, [pc, #172]	; (8003d30 <USB_SetTurnaroundTime+0x124>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d802      	bhi.n	8003c8e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003c88:	230b      	movs	r3, #11
 8003c8a:	617b      	str	r3, [r7, #20]
 8003c8c:	e030      	b.n	8003cf0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	4a27      	ldr	r2, [pc, #156]	; (8003d30 <USB_SetTurnaroundTime+0x124>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d906      	bls.n	8003ca4 <USB_SetTurnaroundTime+0x98>
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	4a26      	ldr	r2, [pc, #152]	; (8003d34 <USB_SetTurnaroundTime+0x128>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d802      	bhi.n	8003ca4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003c9e:	230a      	movs	r3, #10
 8003ca0:	617b      	str	r3, [r7, #20]
 8003ca2:	e025      	b.n	8003cf0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	4a23      	ldr	r2, [pc, #140]	; (8003d34 <USB_SetTurnaroundTime+0x128>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d906      	bls.n	8003cba <USB_SetTurnaroundTime+0xae>
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	4a22      	ldr	r2, [pc, #136]	; (8003d38 <USB_SetTurnaroundTime+0x12c>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d802      	bhi.n	8003cba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003cb4:	2309      	movs	r3, #9
 8003cb6:	617b      	str	r3, [r7, #20]
 8003cb8:	e01a      	b.n	8003cf0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	4a1e      	ldr	r2, [pc, #120]	; (8003d38 <USB_SetTurnaroundTime+0x12c>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d906      	bls.n	8003cd0 <USB_SetTurnaroundTime+0xc4>
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	4a1d      	ldr	r2, [pc, #116]	; (8003d3c <USB_SetTurnaroundTime+0x130>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d802      	bhi.n	8003cd0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003cca:	2308      	movs	r3, #8
 8003ccc:	617b      	str	r3, [r7, #20]
 8003cce:	e00f      	b.n	8003cf0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	4a1a      	ldr	r2, [pc, #104]	; (8003d3c <USB_SetTurnaroundTime+0x130>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d906      	bls.n	8003ce6 <USB_SetTurnaroundTime+0xda>
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	4a19      	ldr	r2, [pc, #100]	; (8003d40 <USB_SetTurnaroundTime+0x134>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d802      	bhi.n	8003ce6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003ce0:	2307      	movs	r3, #7
 8003ce2:	617b      	str	r3, [r7, #20]
 8003ce4:	e004      	b.n	8003cf0 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003ce6:	2306      	movs	r3, #6
 8003ce8:	617b      	str	r3, [r7, #20]
 8003cea:	e001      	b.n	8003cf0 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003cec:	2309      	movs	r3, #9
 8003cee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	68da      	ldr	r2, [r3, #12]
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	029b      	lsls	r3, r3, #10
 8003d04:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003d08:	431a      	orrs	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	371c      	adds	r7, #28
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr
 8003d1c:	00d8acbf 	.word	0x00d8acbf
 8003d20:	00e4e1bf 	.word	0x00e4e1bf
 8003d24:	00f423ff 	.word	0x00f423ff
 8003d28:	0106737f 	.word	0x0106737f
 8003d2c:	011a499f 	.word	0x011a499f
 8003d30:	01312cff 	.word	0x01312cff
 8003d34:	014ca43f 	.word	0x014ca43f
 8003d38:	016e35ff 	.word	0x016e35ff
 8003d3c:	01a6ab1f 	.word	0x01a6ab1f
 8003d40:	01e847ff 	.word	0x01e847ff

08003d44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f043 0201 	orr.w	r2, r3, #1
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr

08003d66 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003d66:	b480      	push	{r7}
 8003d68:	b083      	sub	sp, #12
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f023 0201 	bic.w	r2, r3, #1
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	460b      	mov	r3, r1
 8003d92:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003da0:	78fb      	ldrb	r3, [r7, #3]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d106      	bne.n	8003db4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	60da      	str	r2, [r3, #12]
 8003db2:	e00b      	b.n	8003dcc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003db4:	78fb      	ldrb	r3, [r7, #3]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d106      	bne.n	8003dc8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	60da      	str	r2, [r3, #12]
 8003dc6:	e001      	b.n	8003dcc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e003      	b.n	8003dd4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003dcc:	2032      	movs	r0, #50	; 0x32
 8003dce:	f7fc fbef 	bl	80005b0 <HAL_Delay>

  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3708      	adds	r7, #8
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ddc:	b084      	sub	sp, #16
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b086      	sub	sp, #24
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
 8003de6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003dea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003dee:	2300      	movs	r3, #0
 8003df0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003df6:	2300      	movs	r3, #0
 8003df8:	613b      	str	r3, [r7, #16]
 8003dfa:	e009      	b.n	8003e10 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	3340      	adds	r3, #64	; 0x40
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4413      	add	r3, r2
 8003e06:	2200      	movs	r2, #0
 8003e08:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	613b      	str	r3, [r7, #16]
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	2b0e      	cmp	r3, #14
 8003e14:	d9f2      	bls.n	8003dfc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003e16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d11c      	bne.n	8003e56 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e2a:	f043 0302 	orr.w	r3, r3, #2
 8003e2e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e34:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	e005      	b.n	8003e62 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e68:	461a      	mov	r2, r3
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e74:	4619      	mov	r1, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	680b      	ldr	r3, [r1, #0]
 8003e80:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003e82:	2103      	movs	r1, #3
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 f93d 	bl	8004104 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003e8a:	2110      	movs	r1, #16
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 f8f1 	bl	8004074 <USB_FlushTxFifo>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 f90f 	bl	80040c0 <USB_FlushRxFifo>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eca:	461a      	mov	r2, r3
 8003ecc:	2300      	movs	r3, #0
 8003ece:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	613b      	str	r3, [r7, #16]
 8003ed4:	e043      	b.n	8003f5e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	015a      	lsls	r2, r3, #5
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	4413      	add	r3, r2
 8003ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ee8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003eec:	d118      	bne.n	8003f20 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d10a      	bne.n	8003f0a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	015a      	lsls	r2, r3, #5
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4413      	add	r3, r2
 8003efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f00:	461a      	mov	r2, r3
 8003f02:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f06:	6013      	str	r3, [r2, #0]
 8003f08:	e013      	b.n	8003f32 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	015a      	lsls	r2, r3, #5
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	4413      	add	r3, r2
 8003f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f16:	461a      	mov	r2, r3
 8003f18:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f1c:	6013      	str	r3, [r2, #0]
 8003f1e:	e008      	b.n	8003f32 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	015a      	lsls	r2, r3, #5
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	4413      	add	r3, r2
 8003f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	2300      	movs	r3, #0
 8003f30:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	015a      	lsls	r2, r3, #5
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	4413      	add	r3, r2
 8003f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f3e:	461a      	mov	r2, r3
 8003f40:	2300      	movs	r3, #0
 8003f42:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	015a      	lsls	r2, r3, #5
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f50:	461a      	mov	r2, r3
 8003f52:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f56:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	613b      	str	r3, [r7, #16]
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d3b7      	bcc.n	8003ed6 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f66:	2300      	movs	r3, #0
 8003f68:	613b      	str	r3, [r7, #16]
 8003f6a:	e043      	b.n	8003ff4 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	015a      	lsls	r2, r3, #5
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	4413      	add	r3, r2
 8003f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f82:	d118      	bne.n	8003fb6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10a      	bne.n	8003fa0 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	015a      	lsls	r2, r3, #5
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	4413      	add	r3, r2
 8003f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f96:	461a      	mov	r2, r3
 8003f98:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f9c:	6013      	str	r3, [r2, #0]
 8003f9e:	e013      	b.n	8003fc8 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	015a      	lsls	r2, r3, #5
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fac:	461a      	mov	r2, r3
 8003fae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003fb2:	6013      	str	r3, [r2, #0]
 8003fb4:	e008      	b.n	8003fc8 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	015a      	lsls	r2, r3, #5
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	015a      	lsls	r2, r3, #5
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	4413      	add	r3, r2
 8003fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	015a      	lsls	r2, r3, #5
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003fec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	613b      	str	r3, [r7, #16]
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d3b7      	bcc.n	8003f6c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800400a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800400e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800401c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	f043 0210 	orr.w	r2, r3, #16
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	699a      	ldr	r2, [r3, #24]
 800402e:	4b10      	ldr	r3, [pc, #64]	; (8004070 <USB_DevInit+0x294>)
 8004030:	4313      	orrs	r3, r2
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004038:	2b00      	cmp	r3, #0
 800403a:	d005      	beq.n	8004048 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	f043 0208 	orr.w	r2, r3, #8
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800404a:	2b01      	cmp	r3, #1
 800404c:	d107      	bne.n	800405e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004056:	f043 0304 	orr.w	r3, r3, #4
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800405e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004060:	4618      	mov	r0, r3
 8004062:	3718      	adds	r7, #24
 8004064:	46bd      	mov	sp, r7
 8004066:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800406a:	b004      	add	sp, #16
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	803c3800 	.word	0x803c3800

08004074 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800407e:	2300      	movs	r3, #0
 8004080:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	019b      	lsls	r3, r3, #6
 8004086:	f043 0220 	orr.w	r2, r3, #32
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	3301      	adds	r3, #1
 8004092:	60fb      	str	r3, [r7, #12]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	4a09      	ldr	r2, [pc, #36]	; (80040bc <USB_FlushTxFifo+0x48>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d901      	bls.n	80040a0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e006      	b.n	80040ae <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	f003 0320 	and.w	r3, r3, #32
 80040a8:	2b20      	cmp	r3, #32
 80040aa:	d0f0      	beq.n	800408e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3714      	adds	r7, #20
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	00030d40 	.word	0x00030d40

080040c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80040c8:	2300      	movs	r3, #0
 80040ca:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2210      	movs	r2, #16
 80040d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	3301      	adds	r3, #1
 80040d6:	60fb      	str	r3, [r7, #12]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4a09      	ldr	r2, [pc, #36]	; (8004100 <USB_FlushRxFifo+0x40>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d901      	bls.n	80040e4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e006      	b.n	80040f2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	f003 0310 	and.w	r3, r3, #16
 80040ec:	2b10      	cmp	r3, #16
 80040ee:	d0f0      	beq.n	80040d2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3714      	adds	r7, #20
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	00030d40 	.word	0x00030d40

08004104 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	460b      	mov	r3, r1
 800410e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	78fb      	ldrb	r3, [r7, #3]
 800411e:	68f9      	ldr	r1, [r7, #12]
 8004120:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004124:	4313      	orrs	r3, r2
 8004126:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3714      	adds	r7, #20
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004136:	b480      	push	{r7}
 8004138:	b087      	sub	sp, #28
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f003 0306 	and.w	r3, r3, #6
 800414e:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2b02      	cmp	r3, #2
 8004154:	d002      	beq.n	800415c <USB_GetDevSpeed+0x26>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2b06      	cmp	r3, #6
 800415a:	d102      	bne.n	8004162 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800415c:	2302      	movs	r3, #2
 800415e:	75fb      	strb	r3, [r7, #23]
 8004160:	e001      	b.n	8004166 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8004162:	230f      	movs	r3, #15
 8004164:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004166:	7dfb      	ldrb	r3, [r7, #23]
}
 8004168:	4618      	mov	r0, r3
 800416a:	371c      	adds	r7, #28
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	785b      	ldrb	r3, [r3, #1]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d13a      	bne.n	8004206 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004196:	69da      	ldr	r2, [r3, #28]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	f003 030f 	and.w	r3, r3, #15
 80041a0:	2101      	movs	r1, #1
 80041a2:	fa01 f303 	lsl.w	r3, r1, r3
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	68f9      	ldr	r1, [r7, #12]
 80041aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041ae:	4313      	orrs	r3, r2
 80041b0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	015a      	lsls	r2, r3, #5
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	4413      	add	r3, r2
 80041ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d155      	bne.n	8004274 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	78db      	ldrb	r3, [r3, #3]
 80041e2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80041e4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	059b      	lsls	r3, r3, #22
 80041ea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80041ec:	4313      	orrs	r3, r2
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	0151      	lsls	r1, r2, #5
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	440a      	add	r2, r1
 80041f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004202:	6013      	str	r3, [r2, #0]
 8004204:	e036      	b.n	8004274 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800420c:	69da      	ldr	r2, [r3, #28]
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	f003 030f 	and.w	r3, r3, #15
 8004216:	2101      	movs	r1, #1
 8004218:	fa01 f303 	lsl.w	r3, r1, r3
 800421c:	041b      	lsls	r3, r3, #16
 800421e:	68f9      	ldr	r1, [r7, #12]
 8004220:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004224:	4313      	orrs	r3, r2
 8004226:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	015a      	lsls	r2, r3, #5
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4413      	add	r3, r2
 8004230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d11a      	bne.n	8004274 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	015a      	lsls	r2, r3, #5
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	4413      	add	r3, r2
 8004246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	78db      	ldrb	r3, [r3, #3]
 8004258:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800425a:	430b      	orrs	r3, r1
 800425c:	4313      	orrs	r3, r2
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	0151      	lsls	r1, r2, #5
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	440a      	add	r2, r1
 8004266:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800426a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800426e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004272:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3714      	adds	r7, #20
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
	...

08004284 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	785b      	ldrb	r3, [r3, #1]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d161      	bne.n	8004364 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	015a      	lsls	r2, r3, #5
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4413      	add	r3, r2
 80042a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042b6:	d11f      	bne.n	80042f8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	015a      	lsls	r2, r3, #5
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	4413      	add	r3, r2
 80042c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	0151      	lsls	r1, r2, #5
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	440a      	add	r2, r1
 80042ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80042d6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	015a      	lsls	r2, r3, #5
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	4413      	add	r3, r2
 80042e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	0151      	lsls	r1, r2, #5
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	440a      	add	r2, r1
 80042ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	f003 030f 	and.w	r3, r3, #15
 8004308:	2101      	movs	r1, #1
 800430a:	fa01 f303 	lsl.w	r3, r1, r3
 800430e:	b29b      	uxth	r3, r3
 8004310:	43db      	mvns	r3, r3
 8004312:	68f9      	ldr	r1, [r7, #12]
 8004314:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004318:	4013      	ands	r3, r2
 800431a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004322:	69da      	ldr	r2, [r3, #28]
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	f003 030f 	and.w	r3, r3, #15
 800432c:	2101      	movs	r1, #1
 800432e:	fa01 f303 	lsl.w	r3, r1, r3
 8004332:	b29b      	uxth	r3, r3
 8004334:	43db      	mvns	r3, r3
 8004336:	68f9      	ldr	r1, [r7, #12]
 8004338:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800433c:	4013      	ands	r3, r2
 800433e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	015a      	lsls	r2, r3, #5
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4413      	add	r3, r2
 8004348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	0159      	lsls	r1, r3, #5
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	440b      	add	r3, r1
 8004356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800435a:	4619      	mov	r1, r3
 800435c:	4b35      	ldr	r3, [pc, #212]	; (8004434 <USB_DeactivateEndpoint+0x1b0>)
 800435e:	4013      	ands	r3, r2
 8004360:	600b      	str	r3, [r1, #0]
 8004362:	e060      	b.n	8004426 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	015a      	lsls	r2, r3, #5
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	4413      	add	r3, r2
 800436c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004376:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800437a:	d11f      	bne.n	80043bc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	015a      	lsls	r2, r3, #5
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4413      	add	r3, r2
 8004384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	0151      	lsls	r1, r2, #5
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	440a      	add	r2, r1
 8004392:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004396:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800439a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	015a      	lsls	r2, r3, #5
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	4413      	add	r3, r2
 80043a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	0151      	lsls	r1, r2, #5
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	440a      	add	r2, r1
 80043b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	f003 030f 	and.w	r3, r3, #15
 80043cc:	2101      	movs	r1, #1
 80043ce:	fa01 f303 	lsl.w	r3, r1, r3
 80043d2:	041b      	lsls	r3, r3, #16
 80043d4:	43db      	mvns	r3, r3
 80043d6:	68f9      	ldr	r1, [r7, #12]
 80043d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043dc:	4013      	ands	r3, r2
 80043de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043e6:	69da      	ldr	r2, [r3, #28]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	f003 030f 	and.w	r3, r3, #15
 80043f0:	2101      	movs	r1, #1
 80043f2:	fa01 f303 	lsl.w	r3, r1, r3
 80043f6:	041b      	lsls	r3, r3, #16
 80043f8:	43db      	mvns	r3, r3
 80043fa:	68f9      	ldr	r1, [r7, #12]
 80043fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004400:	4013      	ands	r3, r2
 8004402:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	4413      	add	r3, r2
 800440c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	0159      	lsls	r1, r3, #5
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	440b      	add	r3, r1
 800441a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800441e:	4619      	mov	r1, r3
 8004420:	4b05      	ldr	r3, [pc, #20]	; (8004438 <USB_DeactivateEndpoint+0x1b4>)
 8004422:	4013      	ands	r3, r2
 8004424:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr
 8004434:	ec337800 	.word	0xec337800
 8004438:	eff37800 	.word	0xeff37800

0800443c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	785b      	ldrb	r3, [r3, #1]
 8004454:	2b01      	cmp	r3, #1
 8004456:	f040 810a 	bne.w	800466e <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d132      	bne.n	80044c8 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	015a      	lsls	r2, r3, #5
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	4413      	add	r3, r2
 800446a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	0151      	lsls	r1, r2, #5
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	440a      	add	r2, r1
 8004478:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800447c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004480:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004484:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	015a      	lsls	r2, r3, #5
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	4413      	add	r3, r2
 800448e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	0151      	lsls	r1, r2, #5
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	440a      	add	r2, r1
 800449c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	015a      	lsls	r2, r3, #5
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	4413      	add	r3, r2
 80044ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	0151      	lsls	r1, r2, #5
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	440a      	add	r2, r1
 80044bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044c0:	0cdb      	lsrs	r3, r3, #19
 80044c2:	04db      	lsls	r3, r3, #19
 80044c4:	6113      	str	r3, [r2, #16]
 80044c6:	e074      	b.n	80045b2 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	015a      	lsls	r2, r3, #5
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	4413      	add	r3, r2
 80044d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	0151      	lsls	r1, r2, #5
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	440a      	add	r2, r1
 80044de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044e2:	0cdb      	lsrs	r3, r3, #19
 80044e4:	04db      	lsls	r3, r3, #19
 80044e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	0151      	lsls	r1, r2, #5
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	440a      	add	r2, r1
 80044fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004502:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004506:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800450a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	015a      	lsls	r2, r3, #5
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	4413      	add	r3, r2
 8004514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004518:	691a      	ldr	r2, [r3, #16]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	6959      	ldr	r1, [r3, #20]
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	440b      	add	r3, r1
 8004524:	1e59      	subs	r1, r3, #1
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	fbb1 f3f3 	udiv	r3, r1, r3
 800452e:	04d9      	lsls	r1, r3, #19
 8004530:	4baf      	ldr	r3, [pc, #700]	; (80047f0 <USB_EPStartXfer+0x3b4>)
 8004532:	400b      	ands	r3, r1
 8004534:	6939      	ldr	r1, [r7, #16]
 8004536:	0148      	lsls	r0, r1, #5
 8004538:	6979      	ldr	r1, [r7, #20]
 800453a:	4401      	add	r1, r0
 800453c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004540:	4313      	orrs	r3, r2
 8004542:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	015a      	lsls	r2, r3, #5
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	4413      	add	r3, r2
 800454c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004550:	691a      	ldr	r2, [r3, #16]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800455a:	6939      	ldr	r1, [r7, #16]
 800455c:	0148      	lsls	r0, r1, #5
 800455e:	6979      	ldr	r1, [r7, #20]
 8004560:	4401      	add	r1, r0
 8004562:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004566:	4313      	orrs	r3, r2
 8004568:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	78db      	ldrb	r3, [r3, #3]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d11f      	bne.n	80045b2 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	015a      	lsls	r2, r3, #5
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	4413      	add	r3, r2
 800457a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	0151      	lsls	r1, r2, #5
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	440a      	add	r2, r1
 8004588:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800458c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004590:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	015a      	lsls	r2, r3, #5
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	4413      	add	r3, r2
 800459a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	0151      	lsls	r1, r2, #5
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	440a      	add	r2, r1
 80045a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80045b0:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	015a      	lsls	r2, r3, #5
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	4413      	add	r3, r2
 80045ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	0151      	lsls	r1, r2, #5
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	440a      	add	r2, r1
 80045c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80045d0:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	78db      	ldrb	r3, [r3, #3]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d015      	beq.n	8004606 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f000 8100 	beq.w	80047e4 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	f003 030f 	and.w	r3, r3, #15
 80045f4:	2101      	movs	r1, #1
 80045f6:	fa01 f303 	lsl.w	r3, r1, r3
 80045fa:	6979      	ldr	r1, [r7, #20]
 80045fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004600:	4313      	orrs	r3, r2
 8004602:	634b      	str	r3, [r1, #52]	; 0x34
 8004604:	e0ee      	b.n	80047e4 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004612:	2b00      	cmp	r3, #0
 8004614:	d110      	bne.n	8004638 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	015a      	lsls	r2, r3, #5
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	4413      	add	r3, r2
 800461e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	0151      	lsls	r1, r2, #5
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	440a      	add	r2, r1
 800462c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004630:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004634:	6013      	str	r3, [r2, #0]
 8004636:	e00f      	b.n	8004658 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	015a      	lsls	r2, r3, #5
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	4413      	add	r3, r2
 8004640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	0151      	lsls	r1, r2, #5
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	440a      	add	r2, r1
 800464e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004656:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	68d9      	ldr	r1, [r3, #12]
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	781a      	ldrb	r2, [r3, #0]
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	b29b      	uxth	r3, r3
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f9e2 	bl	8004a30 <USB_WritePacket>
 800466c:	e0ba      	b.n	80047e4 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	015a      	lsls	r2, r3, #5
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	4413      	add	r3, r2
 8004676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	0151      	lsls	r1, r2, #5
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	440a      	add	r2, r1
 8004684:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004688:	0cdb      	lsrs	r3, r3, #19
 800468a:	04db      	lsls	r3, r3, #19
 800468c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	015a      	lsls	r2, r3, #5
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	4413      	add	r3, r2
 8004696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	0151      	lsls	r1, r2, #5
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	440a      	add	r2, r1
 80046a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80046ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80046b0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d123      	bne.n	8004702 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	015a      	lsls	r2, r3, #5
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	4413      	add	r3, r2
 80046c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c6:	691a      	ldr	r2, [r3, #16]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046d0:	6939      	ldr	r1, [r7, #16]
 80046d2:	0148      	lsls	r0, r1, #5
 80046d4:	6979      	ldr	r1, [r7, #20]
 80046d6:	4401      	add	r1, r0
 80046d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80046dc:	4313      	orrs	r3, r2
 80046de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	015a      	lsls	r2, r3, #5
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	4413      	add	r3, r2
 80046e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	0151      	lsls	r1, r2, #5
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	440a      	add	r2, r1
 80046f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046fe:	6113      	str	r3, [r2, #16]
 8004700:	e033      	b.n	800476a <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	695a      	ldr	r2, [r3, #20]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	4413      	add	r3, r2
 800470c:	1e5a      	subs	r2, r3, #1
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	fbb2 f3f3 	udiv	r3, r2, r3
 8004716:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	015a      	lsls	r2, r3, #5
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	4413      	add	r3, r2
 8004720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004724:	691a      	ldr	r2, [r3, #16]
 8004726:	89fb      	ldrh	r3, [r7, #14]
 8004728:	04d9      	lsls	r1, r3, #19
 800472a:	4b31      	ldr	r3, [pc, #196]	; (80047f0 <USB_EPStartXfer+0x3b4>)
 800472c:	400b      	ands	r3, r1
 800472e:	6939      	ldr	r1, [r7, #16]
 8004730:	0148      	lsls	r0, r1, #5
 8004732:	6979      	ldr	r1, [r7, #20]
 8004734:	4401      	add	r1, r0
 8004736:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800473a:	4313      	orrs	r3, r2
 800473c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	015a      	lsls	r2, r3, #5
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	4413      	add	r3, r2
 8004746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800474a:	691a      	ldr	r2, [r3, #16]
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	89f9      	ldrh	r1, [r7, #14]
 8004752:	fb01 f303 	mul.w	r3, r1, r3
 8004756:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800475a:	6939      	ldr	r1, [r7, #16]
 800475c:	0148      	lsls	r0, r1, #5
 800475e:	6979      	ldr	r1, [r7, #20]
 8004760:	4401      	add	r1, r0
 8004762:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004766:	4313      	orrs	r3, r2
 8004768:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	78db      	ldrb	r3, [r3, #3]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d128      	bne.n	80047c4 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477e:	2b00      	cmp	r3, #0
 8004780:	d110      	bne.n	80047a4 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	015a      	lsls	r2, r3, #5
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	4413      	add	r3, r2
 800478a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	0151      	lsls	r1, r2, #5
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	440a      	add	r2, r1
 8004798:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800479c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80047a0:	6013      	str	r3, [r2, #0]
 80047a2:	e00f      	b.n	80047c4 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	015a      	lsls	r2, r3, #5
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	4413      	add	r3, r2
 80047ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	0151      	lsls	r1, r2, #5
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	440a      	add	r2, r1
 80047ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047c2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	015a      	lsls	r2, r3, #5
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	4413      	add	r3, r2
 80047cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	0151      	lsls	r1, r2, #5
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	440a      	add	r2, r1
 80047da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3718      	adds	r7, #24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	1ff80000 	.word	0x1ff80000

080047f4 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	785b      	ldrb	r3, [r3, #1]
 800480c:	2b01      	cmp	r3, #1
 800480e:	f040 80ab 	bne.w	8004968 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d132      	bne.n	8004880 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	015a      	lsls	r2, r3, #5
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	4413      	add	r3, r2
 8004822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	0151      	lsls	r1, r2, #5
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	440a      	add	r2, r1
 8004830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004834:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004838:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800483c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	015a      	lsls	r2, r3, #5
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	4413      	add	r3, r2
 8004846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	68ba      	ldr	r2, [r7, #8]
 800484e:	0151      	lsls	r1, r2, #5
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	440a      	add	r2, r1
 8004854:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004858:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800485c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	015a      	lsls	r2, r3, #5
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	4413      	add	r3, r2
 8004866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	0151      	lsls	r1, r2, #5
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	440a      	add	r2, r1
 8004874:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004878:	0cdb      	lsrs	r3, r3, #19
 800487a:	04db      	lsls	r3, r3, #19
 800487c:	6113      	str	r3, [r2, #16]
 800487e:	e04e      	b.n	800491e <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	015a      	lsls	r2, r3, #5
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4413      	add	r3, r2
 8004888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	0151      	lsls	r1, r2, #5
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	440a      	add	r2, r1
 8004896:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800489a:	0cdb      	lsrs	r3, r3, #19
 800489c:	04db      	lsls	r3, r3, #19
 800489e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	015a      	lsls	r2, r3, #5
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	4413      	add	r3, r2
 80048a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	0151      	lsls	r1, r2, #5
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	440a      	add	r2, r1
 80048b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048ba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048be:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048c2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	695a      	ldr	r2, [r3, #20]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d903      	bls.n	80048d8 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	015a      	lsls	r2, r3, #5
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	4413      	add	r3, r2
 80048e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	0151      	lsls	r1, r2, #5
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	440a      	add	r2, r1
 80048ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	015a      	lsls	r2, r3, #5
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004904:	691a      	ldr	r2, [r3, #16]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800490e:	68b9      	ldr	r1, [r7, #8]
 8004910:	0148      	lsls	r0, r1, #5
 8004912:	68f9      	ldr	r1, [r7, #12]
 8004914:	4401      	add	r1, r0
 8004916:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800491a:	4313      	orrs	r3, r2
 800491c:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	015a      	lsls	r2, r3, #5
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	4413      	add	r3, r2
 8004926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68ba      	ldr	r2, [r7, #8]
 800492e:	0151      	lsls	r1, r2, #5
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	440a      	add	r2, r1
 8004934:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004938:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800493c:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d06d      	beq.n	8004a22 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800494c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	f003 030f 	and.w	r3, r3, #15
 8004956:	2101      	movs	r1, #1
 8004958:	fa01 f303 	lsl.w	r3, r1, r3
 800495c:	68f9      	ldr	r1, [r7, #12]
 800495e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004962:	4313      	orrs	r3, r2
 8004964:	634b      	str	r3, [r1, #52]	; 0x34
 8004966:	e05c      	b.n	8004a22 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	015a      	lsls	r2, r3, #5
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4413      	add	r3, r2
 8004970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	0151      	lsls	r1, r2, #5
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	440a      	add	r2, r1
 800497e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004982:	0cdb      	lsrs	r3, r3, #19
 8004984:	04db      	lsls	r3, r3, #19
 8004986:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	4413      	add	r3, r2
 8004990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	0151      	lsls	r1, r2, #5
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	440a      	add	r2, r1
 800499e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049aa:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d003      	beq.n	80049bc <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	0151      	lsls	r1, r2, #5
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	440a      	add	r2, r1
 80049d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	015a      	lsls	r2, r3, #5
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e8:	691a      	ldr	r2, [r3, #16]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049f2:	68b9      	ldr	r1, [r7, #8]
 80049f4:	0148      	lsls	r0, r1, #5
 80049f6:	68f9      	ldr	r1, [r7, #12]
 80049f8:	4401      	add	r1, r0
 80049fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80049fe:	4313      	orrs	r3, r2
 8004a00:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	015a      	lsls	r2, r3, #5
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	4413      	add	r3, r2
 8004a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	0151      	lsls	r1, r2, #5
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	440a      	add	r2, r1
 8004a18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a1c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a20:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3714      	adds	r7, #20
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b089      	sub	sp, #36	; 0x24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	4611      	mov	r1, r2
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	460b      	mov	r3, r1
 8004a40:	71fb      	strb	r3, [r7, #7]
 8004a42:	4613      	mov	r3, r2
 8004a44:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8004a4e:	88bb      	ldrh	r3, [r7, #4]
 8004a50:	3303      	adds	r3, #3
 8004a52:	089b      	lsrs	r3, r3, #2
 8004a54:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8004a56:	2300      	movs	r3, #0
 8004a58:	61bb      	str	r3, [r7, #24]
 8004a5a:	e00f      	b.n	8004a7c <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004a5c:	79fb      	ldrb	r3, [r7, #7]
 8004a5e:	031a      	lsls	r2, r3, #12
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	4413      	add	r3, r2
 8004a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a68:	461a      	mov	r2, r3
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	6013      	str	r3, [r2, #0]
    pSrc++;
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	3304      	adds	r3, #4
 8004a74:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	3301      	adds	r3, #1
 8004a7a:	61bb      	str	r3, [r7, #24]
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d3eb      	bcc.n	8004a5c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3724      	adds	r7, #36	; 0x24
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b089      	sub	sp, #36	; 0x24
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	60f8      	str	r0, [r7, #12]
 8004a9a:	60b9      	str	r1, [r7, #8]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004aa8:	88fb      	ldrh	r3, [r7, #6]
 8004aaa:	3303      	adds	r3, #3
 8004aac:	089b      	lsrs	r3, r3, #2
 8004aae:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	61bb      	str	r3, [r7, #24]
 8004ab4:	e00b      	b.n	8004ace <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	601a      	str	r2, [r3, #0]
    pDest++;
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	3304      	adds	r3, #4
 8004ac6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	3301      	adds	r3, #1
 8004acc:	61bb      	str	r3, [r7, #24]
 8004ace:	69ba      	ldr	r2, [r7, #24]
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d3ef      	bcc.n	8004ab6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004ad6:	69fb      	ldr	r3, [r7, #28]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3724      	adds	r7, #36	; 0x24
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	785b      	ldrb	r3, [r3, #1]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d12c      	bne.n	8004b5a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	015a      	lsls	r2, r3, #5
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	4413      	add	r3, r2
 8004b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	db12      	blt.n	8004b38 <USB_EPSetStall+0x54>
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00f      	beq.n	8004b38 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	015a      	lsls	r2, r3, #5
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4413      	add	r3, r2
 8004b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	0151      	lsls	r1, r2, #5
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	440a      	add	r2, r1
 8004b2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b32:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b36:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	015a      	lsls	r2, r3, #5
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4413      	add	r3, r2
 8004b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	0151      	lsls	r1, r2, #5
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	440a      	add	r2, r1
 8004b4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b56:	6013      	str	r3, [r2, #0]
 8004b58:	e02b      	b.n	8004bb2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	015a      	lsls	r2, r3, #5
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	4413      	add	r3, r2
 8004b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	db12      	blt.n	8004b92 <USB_EPSetStall+0xae>
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00f      	beq.n	8004b92 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	015a      	lsls	r2, r3, #5
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	4413      	add	r3, r2
 8004b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68ba      	ldr	r2, [r7, #8]
 8004b82:	0151      	lsls	r1, r2, #5
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	440a      	add	r2, r1
 8004b88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b90:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	015a      	lsls	r2, r3, #5
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	4413      	add	r3, r2
 8004b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	0151      	lsls	r1, r2, #5
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	440a      	add	r2, r1
 8004ba8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004bb0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3714      	adds	r7, #20
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	785b      	ldrb	r3, [r3, #1]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d128      	bne.n	8004c2e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	015a      	lsls	r2, r3, #5
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4413      	add	r3, r2
 8004be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	0151      	lsls	r1, r2, #5
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	440a      	add	r2, r1
 8004bf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bf6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004bfa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	78db      	ldrb	r3, [r3, #3]
 8004c00:	2b03      	cmp	r3, #3
 8004c02:	d003      	beq.n	8004c0c <USB_EPClearStall+0x4c>
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	78db      	ldrb	r3, [r3, #3]
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d138      	bne.n	8004c7e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	015a      	lsls	r2, r3, #5
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4413      	add	r3, r2
 8004c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	0151      	lsls	r1, r2, #5
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	440a      	add	r2, r1
 8004c22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c2a:	6013      	str	r3, [r2, #0]
 8004c2c:	e027      	b.n	8004c7e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	015a      	lsls	r2, r3, #5
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	4413      	add	r3, r2
 8004c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	0151      	lsls	r1, r2, #5
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	440a      	add	r2, r1
 8004c44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c48:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c4c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	78db      	ldrb	r3, [r3, #3]
 8004c52:	2b03      	cmp	r3, #3
 8004c54:	d003      	beq.n	8004c5e <USB_EPClearStall+0x9e>
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	78db      	ldrb	r3, [r3, #3]
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d10f      	bne.n	8004c7e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	015a      	lsls	r2, r3, #5
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	4413      	add	r3, r2
 8004c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68ba      	ldr	r2, [r7, #8]
 8004c6e:	0151      	lsls	r1, r2, #5
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	440a      	add	r2, r1
 8004c74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c7c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3714      	adds	r7, #20
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	460b      	mov	r3, r1
 8004c96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004caa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004cae:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	78fb      	ldrb	r3, [r7, #3]
 8004cba:	011b      	lsls	r3, r3, #4
 8004cbc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004cc0:	68f9      	ldr	r1, [r7, #12]
 8004cc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004cf2:	f023 0303 	bic.w	r3, r3, #3
 8004cf6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d06:	f023 0302 	bic.w	r3, r3, #2
 8004d0a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3714      	adds	r7, #20
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr

08004d1a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b085      	sub	sp, #20
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004d34:	f023 0303 	bic.w	r3, r3, #3
 8004d38:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d48:	f043 0302 	orr.w	r3, r3, #2
 8004d4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3714      	adds	r7, #20
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	4013      	ands	r3, r2
 8004d72:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004d74:	68fb      	ldr	r3, [r7, #12]
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3714      	adds	r7, #20
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b085      	sub	sp, #20
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d9e:	69db      	ldr	r3, [r3, #28]
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	4013      	ands	r3, r2
 8004da4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	0c1b      	lsrs	r3, r3, #16
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b085      	sub	sp, #20
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dd2:	69db      	ldr	r3, [r3, #28]
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	b29b      	uxth	r3, r3
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3714      	adds	r7, #20
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004dea:	b480      	push	{r7}
 8004dec:	b085      	sub	sp, #20
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
 8004df2:	460b      	mov	r3, r1
 8004df4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004dfa:	78fb      	ldrb	r3, [r7, #3]
 8004dfc:	015a      	lsls	r2, r3, #5
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	4413      	add	r3, r2
 8004e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	68ba      	ldr	r2, [r7, #8]
 8004e14:	4013      	ands	r3, r2
 8004e16:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004e18:	68bb      	ldr	r3, [r7, #8]
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3714      	adds	r7, #20
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b087      	sub	sp, #28
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
 8004e2e:	460b      	mov	r3, r1
 8004e30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e48:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004e4a:	78fb      	ldrb	r3, [r7, #3]
 8004e4c:	f003 030f 	and.w	r3, r3, #15
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	fa22 f303 	lsr.w	r3, r2, r3
 8004e56:	01db      	lsls	r3, r3, #7
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004e60:	78fb      	ldrb	r3, [r7, #3]
 8004e62:	015a      	lsls	r2, r3, #5
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	4413      	add	r3, r2
 8004e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	4013      	ands	r3, r2
 8004e72:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004e74:	68bb      	ldr	r3, [r7, #8]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	371c      	adds	r7, #28
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b083      	sub	sp, #12
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	f003 0301 	and.w	r3, r3, #1
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b085      	sub	sp, #20
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eb8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004ebc:	f023 0307 	bic.w	r3, r3, #7
 8004ec0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ed4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3714      	adds	r7, #20
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	333c      	adds	r3, #60	; 0x3c
 8004ef6:	3304      	adds	r3, #4
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	4a1c      	ldr	r2, [pc, #112]	; (8004f70 <USB_EP0_OutStart+0x8c>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d90a      	bls.n	8004f1a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f14:	d101      	bne.n	8004f1a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8004f16:	2300      	movs	r3, #0
 8004f18:	e024      	b.n	8004f64 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f20:	461a      	mov	r2, r3
 8004f22:	2300      	movs	r3, #0
 8004f24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f48:	f043 0318 	orr.w	r3, r3, #24
 8004f4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f5c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004f60:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3714      	adds	r7, #20
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr
 8004f70:	4f54300a 	.word	0x4f54300a

08004f74 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	3301      	adds	r3, #1
 8004f84:	60fb      	str	r3, [r7, #12]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	4a13      	ldr	r2, [pc, #76]	; (8004fd8 <USB_CoreReset+0x64>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d901      	bls.n	8004f92 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e01b      	b.n	8004fca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	daf2      	bge.n	8004f80 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	f043 0201 	orr.w	r2, r3, #1
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	3301      	adds	r3, #1
 8004fae:	60fb      	str	r3, [r7, #12]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	4a09      	ldr	r2, [pc, #36]	; (8004fd8 <USB_CoreReset+0x64>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d901      	bls.n	8004fbc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e006      	b.n	8004fca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	f003 0301 	and.w	r3, r3, #1
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d0f0      	beq.n	8004faa <USB_CoreReset+0x36>

  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3714      	adds	r7, #20
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	00030d40 	.word	0x00030d40

08004fdc <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8004fe8:	2010      	movs	r0, #16
 8004fea:	f002 fc09 	bl	8007800 <malloc>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d105      	bne.n	8005004 <USBD_HID_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005000:	2302      	movs	r3, #2
 8005002:	e01b      	b.n	800503c <USBD_HID_Init+0x60>
  }

  pdev->pClassData = (void *)hhid;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	7c1b      	ldrb	r3, [r3, #16]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d103      	bne.n	800501c <USBD_HID_Init+0x40>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2207      	movs	r2, #7
 8005018:	875a      	strh	r2, [r3, #58]	; 0x3a
 800501a:	e002      	b.n	8005022 <USBD_HID_Init+0x46>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	220a      	movs	r2, #10
 8005020:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

    /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005022:	2308      	movs	r3, #8
 8005024:	2203      	movs	r2, #3
 8005026:	2181      	movs	r1, #129	; 0x81
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f002 f86f 	bl	800710c <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	460b      	mov	r3, r1
 800504e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8005050:	2181      	movs	r1, #129	; 0x81
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f002 f898 	bl	8007188 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800506a:	2b00      	cmp	r3, #0
 800506c:	d009      	beq.n	8005082 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005074:	4618      	mov	r0, r3
 8005076:	f002 fbcb 	bl	8007810 <free>
    pdev->pClassData = NULL;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	3708      	adds	r7, #8
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800509c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800509e:	2300      	movs	r3, #0
 80050a0:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80050a2:	2300      	movs	r3, #0
 80050a4:	817b      	strh	r3, [r7, #10]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d045      	beq.n	800513e <USBD_HID_Setup+0xb2>
 80050b2:	2b20      	cmp	r3, #32
 80050b4:	f040 80d4 	bne.w	8005260 <USBD_HID_Setup+0x1d4>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	785b      	ldrb	r3, [r3, #1]
 80050bc:	3b02      	subs	r3, #2
 80050be:	2b09      	cmp	r3, #9
 80050c0:	d835      	bhi.n	800512e <USBD_HID_Setup+0xa2>
 80050c2:	a201      	add	r2, pc, #4	; (adr r2, 80050c8 <USBD_HID_Setup+0x3c>)
 80050c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c8:	0800511f 	.word	0x0800511f
 80050cc:	080050ff 	.word	0x080050ff
 80050d0:	0800512f 	.word	0x0800512f
 80050d4:	0800512f 	.word	0x0800512f
 80050d8:	0800512f 	.word	0x0800512f
 80050dc:	0800512f 	.word	0x0800512f
 80050e0:	0800512f 	.word	0x0800512f
 80050e4:	0800512f 	.word	0x0800512f
 80050e8:	0800510d 	.word	0x0800510d
 80050ec:	080050f1 	.word	0x080050f1
    {
    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	885b      	ldrh	r3, [r3, #2]
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	461a      	mov	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	601a      	str	r2, [r3, #0]
      break;
 80050fc:	e01e      	b.n	800513c <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2201      	movs	r2, #1
 8005102:	4619      	mov	r1, r3
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f001 f9e0 	bl	80064ca <USBD_CtlSendData>
      break;
 800510a:	e017      	b.n	800513c <USBD_HID_Setup+0xb0>

    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	885b      	ldrh	r3, [r3, #2]
 8005110:	0a1b      	lsrs	r3, r3, #8
 8005112:	b29b      	uxth	r3, r3
 8005114:	b2db      	uxtb	r3, r3
 8005116:	461a      	mov	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	605a      	str	r2, [r3, #4]
      break;
 800511c:	e00e      	b.n	800513c <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	3304      	adds	r3, #4
 8005122:	2201      	movs	r2, #1
 8005124:	4619      	mov	r1, r3
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f001 f9cf 	bl	80064ca <USBD_CtlSendData>
      break;
 800512c:	e006      	b.n	800513c <USBD_HID_Setup+0xb0>

    default:
      USBD_CtlError(pdev, req);
 800512e:	6839      	ldr	r1, [r7, #0]
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f001 f959 	bl	80063e8 <USBD_CtlError>
      ret = USBD_FAIL;
 8005136:	2303      	movs	r3, #3
 8005138:	75fb      	strb	r3, [r7, #23]
      break;
 800513a:	bf00      	nop
    }
    break;
 800513c:	e097      	b.n	800526e <USBD_HID_Setup+0x1e2>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	785b      	ldrb	r3, [r3, #1]
 8005142:	2b0b      	cmp	r3, #11
 8005144:	f200 8083 	bhi.w	800524e <USBD_HID_Setup+0x1c2>
 8005148:	a201      	add	r2, pc, #4	; (adr r2, 8005150 <USBD_HID_Setup+0xc4>)
 800514a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800514e:	bf00      	nop
 8005150:	08005181 	.word	0x08005181
 8005154:	0800525d 	.word	0x0800525d
 8005158:	0800524f 	.word	0x0800524f
 800515c:	0800524f 	.word	0x0800524f
 8005160:	0800524f 	.word	0x0800524f
 8005164:	0800524f 	.word	0x0800524f
 8005168:	080051a9 	.word	0x080051a9
 800516c:	0800524f 	.word	0x0800524f
 8005170:	0800524f 	.word	0x0800524f
 8005174:	0800524f 	.word	0x0800524f
 8005178:	08005201 	.word	0x08005201
 800517c:	08005229 	.word	0x08005229
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005186:	2b03      	cmp	r3, #3
 8005188:	d107      	bne.n	800519a <USBD_HID_Setup+0x10e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800518a:	f107 030a 	add.w	r3, r7, #10
 800518e:	2202      	movs	r2, #2
 8005190:	4619      	mov	r1, r3
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f001 f999 	bl	80064ca <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005198:	e061      	b.n	800525e <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 800519a:	6839      	ldr	r1, [r7, #0]
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f001 f923 	bl	80063e8 <USBD_CtlError>
        ret = USBD_FAIL;
 80051a2:	2303      	movs	r3, #3
 80051a4:	75fb      	strb	r3, [r7, #23]
      break;
 80051a6:	e05a      	b.n	800525e <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == HID_REPORT_DESC)
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	885b      	ldrh	r3, [r3, #2]
 80051ac:	0a1b      	lsrs	r3, r3, #8
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	2b22      	cmp	r3, #34	; 0x22
 80051b2:	d108      	bne.n	80051c6 <USBD_HID_Setup+0x13a>
      {
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	88db      	ldrh	r3, [r3, #6]
 80051b8:	2bbb      	cmp	r3, #187	; 0xbb
 80051ba:	bf28      	it	cs
 80051bc:	23bb      	movcs	r3, #187	; 0xbb
 80051be:	82bb      	strh	r3, [r7, #20]
        pbuf = HID_MOUSE_ReportDesc;
 80051c0:	4b2d      	ldr	r3, [pc, #180]	; (8005278 <USBD_HID_Setup+0x1ec>)
 80051c2:	613b      	str	r3, [r7, #16]
 80051c4:	e015      	b.n	80051f2 <USBD_HID_Setup+0x166>
      }
      else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	885b      	ldrh	r3, [r3, #2]
 80051ca:	0a1b      	lsrs	r3, r3, #8
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	2b21      	cmp	r3, #33	; 0x21
 80051d0:	d108      	bne.n	80051e4 <USBD_HID_Setup+0x158>
      {
        pbuf = USBD_HID_Desc;
 80051d2:	4b2a      	ldr	r3, [pc, #168]	; (800527c <USBD_HID_Setup+0x1f0>)
 80051d4:	613b      	str	r3, [r7, #16]
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	88db      	ldrh	r3, [r3, #6]
 80051da:	2b09      	cmp	r3, #9
 80051dc:	bf28      	it	cs
 80051de:	2309      	movcs	r3, #9
 80051e0:	82bb      	strh	r3, [r7, #20]
 80051e2:	e006      	b.n	80051f2 <USBD_HID_Setup+0x166>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80051e4:	6839      	ldr	r1, [r7, #0]
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f001 f8fe 	bl	80063e8 <USBD_CtlError>
        ret = USBD_FAIL;
 80051ec:	2303      	movs	r3, #3
 80051ee:	75fb      	strb	r3, [r7, #23]
        break;
 80051f0:	e035      	b.n	800525e <USBD_HID_Setup+0x1d2>
      }
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80051f2:	8abb      	ldrh	r3, [r7, #20]
 80051f4:	461a      	mov	r2, r3
 80051f6:	6939      	ldr	r1, [r7, #16]
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f001 f966 	bl	80064ca <USBD_CtlSendData>
      break;
 80051fe:	e02e      	b.n	800525e <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005206:	2b03      	cmp	r3, #3
 8005208:	d107      	bne.n	800521a <USBD_HID_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	3308      	adds	r3, #8
 800520e:	2201      	movs	r2, #1
 8005210:	4619      	mov	r1, r3
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f001 f959 	bl	80064ca <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005218:	e021      	b.n	800525e <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 800521a:	6839      	ldr	r1, [r7, #0]
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f001 f8e3 	bl	80063e8 <USBD_CtlError>
        ret = USBD_FAIL;
 8005222:	2303      	movs	r3, #3
 8005224:	75fb      	strb	r3, [r7, #23]
      break;
 8005226:	e01a      	b.n	800525e <USBD_HID_Setup+0x1d2>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800522e:	2b03      	cmp	r3, #3
 8005230:	d106      	bne.n	8005240 <USBD_HID_Setup+0x1b4>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	885b      	ldrh	r3, [r3, #2]
 8005236:	b2db      	uxtb	r3, r3
 8005238:	461a      	mov	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800523e:	e00e      	b.n	800525e <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8005240:	6839      	ldr	r1, [r7, #0]
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f001 f8d0 	bl	80063e8 <USBD_CtlError>
        ret = USBD_FAIL;
 8005248:	2303      	movs	r3, #3
 800524a:	75fb      	strb	r3, [r7, #23]
      break;
 800524c:	e007      	b.n	800525e <USBD_HID_Setup+0x1d2>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800524e:	6839      	ldr	r1, [r7, #0]
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f001 f8c9 	bl	80063e8 <USBD_CtlError>
      ret = USBD_FAIL;
 8005256:	2303      	movs	r3, #3
 8005258:	75fb      	strb	r3, [r7, #23]
      break;
 800525a:	e000      	b.n	800525e <USBD_HID_Setup+0x1d2>
      break;
 800525c:	bf00      	nop
    }
    break;
 800525e:	e006      	b.n	800526e <USBD_HID_Setup+0x1e2>

  default:
    USBD_CtlError(pdev, req);
 8005260:	6839      	ldr	r1, [r7, #0]
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f001 f8c0 	bl	80063e8 <USBD_CtlError>
    ret = USBD_FAIL;
 8005268:	2303      	movs	r3, #3
 800526a:	75fb      	strb	r3, [r7, #23]
    break;
 800526c:	bf00      	nop
  }

  return (uint8_t)ret;
 800526e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005270:	4618      	mov	r0, r3
 8005272:	3718      	adds	r7, #24
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	200000c4 	.word	0x200000c4
 800527c:	200000ac 	.word	0x200000ac

08005280 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	4613      	mov	r3, r2
 800528c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005294:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800529c:	2b03      	cmp	r3, #3
 800529e:	d10c      	bne.n	80052ba <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	7b1b      	ldrb	r3, [r3, #12]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d108      	bne.n	80052ba <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	2201      	movs	r2, #1
 80052ac:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 80052ae:	88fb      	ldrh	r3, [r7, #6]
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	2181      	movs	r1, #129	; 0x81
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f002 f86b 	bl	8007390 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3718      	adds	r7, #24
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2222      	movs	r2, #34	; 0x22
 80052d0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 80052d2:	4b03      	ldr	r3, [pc, #12]	; (80052e0 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr
 80052e0:	20000040 	.word	0x20000040

080052e4 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2222      	movs	r2, #34	; 0x22
 80052f0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 80052f2:	4b03      	ldr	r3, [pc, #12]	; (8005300 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	20000064 	.word	0x20000064

08005304 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2222      	movs	r2, #34	; 0x22
 8005310:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8005312:	4b03      	ldr	r3, [pc, #12]	; (8005320 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8005314:	4618      	mov	r0, r3
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr
 8005320:	20000088 	.word	0x20000088

08005324 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	460b      	mov	r3, r1
 800532e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005336:	2200      	movs	r2, #0
 8005338:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	220a      	movs	r2, #10
 8005354:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8005356:	4b03      	ldr	r3, [pc, #12]	; (8005364 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005358:	4618      	mov	r0, r3
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr
 8005364:	200000b8 	.word	0x200000b8

08005368 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	4613      	mov	r3, r2
 8005374:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d101      	bne.n	8005380 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800537c:	2303      	movs	r3, #3
 800537e:	e01f      	b.n	80053c0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	79fa      	ldrb	r2, [r7, #7]
 80053b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f001 fe2b 	bl	8007010 <USBD_LL_Init>
 80053ba:	4603      	mov	r3, r0
 80053bc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80053be:	7dfb      	ldrb	r3, [r7, #23]
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3718      	adds	r7, #24
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80053d2:	2300      	movs	r3, #0
 80053d4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d101      	bne.n	80053e0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80053dc:	2303      	movs	r3, #3
 80053de:	e016      	b.n	800540e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	683a      	ldr	r2, [r7, #0]
 80053e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00b      	beq.n	800540c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fc:	f107 020e 	add.w	r2, r7, #14
 8005400:	4610      	mov	r0, r2
 8005402:	4798      	blx	r3
 8005404:	4602      	mov	r2, r0
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005416:	b580      	push	{r7, lr}
 8005418:	b082      	sub	sp, #8
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f001 fe42 	bl	80070a8 <USBD_LL_Start>
 8005424:	4603      	mov	r3, r0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3708      	adds	r7, #8
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800542e:	b480      	push	{r7}
 8005430:	b083      	sub	sp, #12
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	460b      	mov	r3, r1
 800544e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005450:	2303      	movs	r3, #3
 8005452:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800545a:	2b00      	cmp	r3, #0
 800545c:	d009      	beq.n	8005472 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	78fa      	ldrb	r2, [r7, #3]
 8005468:	4611      	mov	r1, r2
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	4798      	blx	r3
 800546e:	4603      	mov	r3, r0
 8005470:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005472:	7bfb      	ldrb	r3, [r7, #15]
}
 8005474:	4618      	mov	r0, r3
 8005476:	3710      	adds	r7, #16
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	460b      	mov	r3, r1
 8005486:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800548e:	2b00      	cmp	r3, #0
 8005490:	d007      	beq.n	80054a2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	78fa      	ldrb	r2, [r7, #3]
 800549c:	4611      	mov	r1, r2
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	4798      	blx	r3
  }

  return USBD_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3708      	adds	r7, #8
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80054bc:	6839      	ldr	r1, [r7, #0]
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 ff58 	bl	8006374 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80054d2:	461a      	mov	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80054e0:	f003 031f 	and.w	r3, r3, #31
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d00e      	beq.n	8005506 <USBD_LL_SetupStage+0x5a>
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d302      	bcc.n	80054f2 <USBD_LL_SetupStage+0x46>
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d014      	beq.n	800551a <USBD_LL_SetupStage+0x6e>
 80054f0:	e01d      	b.n	800552e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80054f8:	4619      	mov	r1, r3
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 fa18 	bl	8005930 <USBD_StdDevReq>
 8005500:	4603      	mov	r3, r0
 8005502:	73fb      	strb	r3, [r7, #15]
      break;
 8005504:	e020      	b.n	8005548 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800550c:	4619      	mov	r1, r3
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 fa7c 	bl	8005a0c <USBD_StdItfReq>
 8005514:	4603      	mov	r3, r0
 8005516:	73fb      	strb	r3, [r7, #15]
      break;
 8005518:	e016      	b.n	8005548 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005520:	4619      	mov	r1, r3
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 fab8 	bl	8005a98 <USBD_StdEPReq>
 8005528:	4603      	mov	r3, r0
 800552a:	73fb      	strb	r3, [r7, #15]
      break;
 800552c:	e00c      	b.n	8005548 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005534:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005538:	b2db      	uxtb	r3, r3
 800553a:	4619      	mov	r1, r3
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f001 fe59 	bl	80071f4 <USBD_LL_StallEP>
 8005542:	4603      	mov	r3, r0
 8005544:	73fb      	strb	r3, [r7, #15]
      break;
 8005546:	bf00      	nop
  }

  return ret;
 8005548:	7bfb      	ldrb	r3, [r7, #15]
}
 800554a:	4618      	mov	r0, r3
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	b086      	sub	sp, #24
 8005556:	af00      	add	r7, sp, #0
 8005558:	60f8      	str	r0, [r7, #12]
 800555a:	460b      	mov	r3, r1
 800555c:	607a      	str	r2, [r7, #4]
 800555e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005560:	7afb      	ldrb	r3, [r7, #11]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d137      	bne.n	80055d6 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800556c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005574:	2b03      	cmp	r3, #3
 8005576:	d14a      	bne.n	800560e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	689a      	ldr	r2, [r3, #8]
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	429a      	cmp	r2, r3
 8005582:	d913      	bls.n	80055ac <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	689a      	ldr	r2, [r3, #8]
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	1ad2      	subs	r2, r2, r3
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	68da      	ldr	r2, [r3, #12]
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	4293      	cmp	r3, r2
 800559c:	bf28      	it	cs
 800559e:	4613      	movcs	r3, r2
 80055a0:	461a      	mov	r2, r3
 80055a2:	6879      	ldr	r1, [r7, #4]
 80055a4:	68f8      	ldr	r0, [r7, #12]
 80055a6:	f000 ffbc 	bl	8006522 <USBD_CtlContinueRx>
 80055aa:	e030      	b.n	800560e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00a      	beq.n	80055ce <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80055be:	2b03      	cmp	r3, #3
 80055c0:	d105      	bne.n	80055ce <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f000 ffb8 	bl	8006544 <USBD_CtlSendStatus>
 80055d4:	e01b      	b.n	800560e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d013      	beq.n	800560a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80055e8:	2b03      	cmp	r3, #3
 80055ea:	d10e      	bne.n	800560a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	7afa      	ldrb	r2, [r7, #11]
 80055f6:	4611      	mov	r1, r2
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	4798      	blx	r3
 80055fc:	4603      	mov	r3, r0
 80055fe:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005600:	7dfb      	ldrb	r3, [r7, #23]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d003      	beq.n	800560e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8005606:	7dfb      	ldrb	r3, [r7, #23]
 8005608:	e002      	b.n	8005610 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800560a:	2303      	movs	r3, #3
 800560c:	e000      	b.n	8005610 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3718      	adds	r7, #24
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	460b      	mov	r3, r1
 8005622:	607a      	str	r2, [r7, #4]
 8005624:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005626:	7afb      	ldrb	r3, [r7, #11]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d16a      	bne.n	8005702 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	3314      	adds	r3, #20
 8005630:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005638:	2b02      	cmp	r3, #2
 800563a:	d155      	bne.n	80056e8 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	689a      	ldr	r2, [r3, #8]
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	429a      	cmp	r2, r3
 8005646:	d914      	bls.n	8005672 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	689a      	ldr	r2, [r3, #8]
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	1ad2      	subs	r2, r2, r3
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	461a      	mov	r2, r3
 800565c:	6879      	ldr	r1, [r7, #4]
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f000 ff4e 	bl	8006500 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005664:	2300      	movs	r3, #0
 8005666:	2200      	movs	r2, #0
 8005668:	2100      	movs	r1, #0
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f001 fec8 	bl	8007400 <USBD_LL_PrepareReceive>
 8005670:	e03a      	b.n	80056e8 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	68da      	ldr	r2, [r3, #12]
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	429a      	cmp	r2, r3
 800567c:	d11c      	bne.n	80056b8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	685a      	ldr	r2, [r3, #4]
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005686:	429a      	cmp	r2, r3
 8005688:	d316      	bcc.n	80056b8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	685a      	ldr	r2, [r3, #4]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005694:	429a      	cmp	r2, r3
 8005696:	d20f      	bcs.n	80056b8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005698:	2200      	movs	r2, #0
 800569a:	2100      	movs	r1, #0
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f000 ff2f 	bl	8006500 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80056aa:	2300      	movs	r3, #0
 80056ac:	2200      	movs	r2, #0
 80056ae:	2100      	movs	r1, #0
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f001 fea5 	bl	8007400 <USBD_LL_PrepareReceive>
 80056b6:	e017      	b.n	80056e8 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00a      	beq.n	80056da <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80056ca:	2b03      	cmp	r3, #3
 80056cc:	d105      	bne.n	80056da <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80056da:	2180      	movs	r1, #128	; 0x80
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	f001 fd89 	bl	80071f4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80056e2:	68f8      	ldr	r0, [r7, #12]
 80056e4:	f000 ff41 	bl	800656a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d123      	bne.n	800573a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f7ff fe9b 	bl	800542e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005700:	e01b      	b.n	800573a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d013      	beq.n	8005736 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005714:	2b03      	cmp	r3, #3
 8005716:	d10e      	bne.n	8005736 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800571e:	695b      	ldr	r3, [r3, #20]
 8005720:	7afa      	ldrb	r2, [r7, #11]
 8005722:	4611      	mov	r1, r2
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	4798      	blx	r3
 8005728:	4603      	mov	r3, r0
 800572a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800572c:	7dfb      	ldrb	r3, [r7, #23]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d003      	beq.n	800573a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8005732:	7dfb      	ldrb	r3, [r7, #23]
 8005734:	e002      	b.n	800573c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005736:	2303      	movs	r3, #3
 8005738:	e000      	b.n	800573c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3718      	adds	r7, #24
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005770:	2b00      	cmp	r3, #0
 8005772:	d009      	beq.n	8005788 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	6852      	ldr	r2, [r2, #4]
 8005780:	b2d2      	uxtb	r2, r2
 8005782:	4611      	mov	r1, r2
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005788:	2340      	movs	r3, #64	; 0x40
 800578a:	2200      	movs	r2, #0
 800578c:	2100      	movs	r1, #0
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f001 fcbc 	bl	800710c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2240      	movs	r2, #64	; 0x40
 80057a0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80057a4:	2340      	movs	r3, #64	; 0x40
 80057a6:	2200      	movs	r2, #0
 80057a8:	2180      	movs	r1, #128	; 0x80
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f001 fcae 	bl	800710c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2240      	movs	r2, #64	; 0x40
 80057ba:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80057c6:	b480      	push	{r7}
 80057c8:	b083      	sub	sp, #12
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
 80057ce:	460b      	mov	r3, r1
 80057d0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	78fa      	ldrb	r2, [r7, #3]
 80057d6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80057e6:	b480      	push	{r7}
 80057e8:	b083      	sub	sp, #12
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2204      	movs	r2, #4
 80057fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800581e:	2b04      	cmp	r3, #4
 8005820:	d105      	bne.n	800582e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800584a:	2b03      	cmp	r3, #3
 800584c:	d10b      	bne.n	8005866 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005854:	69db      	ldr	r3, [r3, #28]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d005      	beq.n	8005866 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005860:	69db      	ldr	r3, [r3, #28]
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3708      	adds	r7, #8
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	460b      	mov	r3, r1
 800587a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr

0800588a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800588a:	b480      	push	{r7}
 800588c:	b083      	sub	sp, #12
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
 8005892:	460b      	mov	r3, r1
 8005894:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	370c      	adds	r7, #12
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr

080058ba <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b082      	sub	sp, #8
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d009      	beq.n	80058e8 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	6852      	ldr	r2, [r2, #4]
 80058e0:	b2d2      	uxtb	r2, r2
 80058e2:	4611      	mov	r1, r2
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	4798      	blx	r3
  }

  return USBD_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3708      	adds	r7, #8
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b087      	sub	sp, #28
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	3301      	adds	r3, #1
 8005908:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005910:	8a3b      	ldrh	r3, [r7, #16]
 8005912:	021b      	lsls	r3, r3, #8
 8005914:	b21a      	sxth	r2, r3
 8005916:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800591a:	4313      	orrs	r3, r2
 800591c:	b21b      	sxth	r3, r3
 800591e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005920:	89fb      	ldrh	r3, [r7, #14]
}
 8005922:	4618      	mov	r0, r3
 8005924:	371c      	adds	r7, #28
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
	...

08005930 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800593a:	2300      	movs	r3, #0
 800593c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005946:	2b20      	cmp	r3, #32
 8005948:	d004      	beq.n	8005954 <USBD_StdDevReq+0x24>
 800594a:	2b40      	cmp	r3, #64	; 0x40
 800594c:	d002      	beq.n	8005954 <USBD_StdDevReq+0x24>
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00a      	beq.n	8005968 <USBD_StdDevReq+0x38>
 8005952:	e050      	b.n	80059f6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	6839      	ldr	r1, [r7, #0]
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	4798      	blx	r3
 8005962:	4603      	mov	r3, r0
 8005964:	73fb      	strb	r3, [r7, #15]
    break;
 8005966:	e04b      	b.n	8005a00 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	785b      	ldrb	r3, [r3, #1]
 800596c:	2b09      	cmp	r3, #9
 800596e:	d83c      	bhi.n	80059ea <USBD_StdDevReq+0xba>
 8005970:	a201      	add	r2, pc, #4	; (adr r2, 8005978 <USBD_StdDevReq+0x48>)
 8005972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005976:	bf00      	nop
 8005978:	080059cd 	.word	0x080059cd
 800597c:	080059e1 	.word	0x080059e1
 8005980:	080059eb 	.word	0x080059eb
 8005984:	080059d7 	.word	0x080059d7
 8005988:	080059eb 	.word	0x080059eb
 800598c:	080059ab 	.word	0x080059ab
 8005990:	080059a1 	.word	0x080059a1
 8005994:	080059eb 	.word	0x080059eb
 8005998:	080059c3 	.word	0x080059c3
 800599c:	080059b5 	.word	0x080059b5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80059a0:	6839      	ldr	r1, [r7, #0]
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 f9d0 	bl	8005d48 <USBD_GetDescriptor>
      break;
 80059a8:	e024      	b.n	80059f4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80059aa:	6839      	ldr	r1, [r7, #0]
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 fb5f 	bl	8006070 <USBD_SetAddress>
      break;
 80059b2:	e01f      	b.n	80059f4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80059b4:	6839      	ldr	r1, [r7, #0]
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 fb9c 	bl	80060f4 <USBD_SetConfig>
 80059bc:	4603      	mov	r3, r0
 80059be:	73fb      	strb	r3, [r7, #15]
      break;
 80059c0:	e018      	b.n	80059f4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80059c2:	6839      	ldr	r1, [r7, #0]
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 fc39 	bl	800623c <USBD_GetConfig>
      break;
 80059ca:	e013      	b.n	80059f4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80059cc:	6839      	ldr	r1, [r7, #0]
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 fc68 	bl	80062a4 <USBD_GetStatus>
      break;
 80059d4:	e00e      	b.n	80059f4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80059d6:	6839      	ldr	r1, [r7, #0]
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 fc96 	bl	800630a <USBD_SetFeature>
      break;
 80059de:	e009      	b.n	80059f4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80059e0:	6839      	ldr	r1, [r7, #0]
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 fca5 	bl	8006332 <USBD_ClrFeature>
      break;
 80059e8:	e004      	b.n	80059f4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80059ea:	6839      	ldr	r1, [r7, #0]
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 fcfb 	bl	80063e8 <USBD_CtlError>
      break;
 80059f2:	bf00      	nop
    }
    break;
 80059f4:	e004      	b.n	8005a00 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80059f6:	6839      	ldr	r1, [r7, #0]
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 fcf5 	bl	80063e8 <USBD_CtlError>
    break;
 80059fe:	bf00      	nop
  }

  return ret;
 8005a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3710      	adds	r7, #16
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop

08005a0c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a16:	2300      	movs	r3, #0
 8005a18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a22:	2b20      	cmp	r3, #32
 8005a24:	d003      	beq.n	8005a2e <USBD_StdItfReq+0x22>
 8005a26:	2b40      	cmp	r3, #64	; 0x40
 8005a28:	d001      	beq.n	8005a2e <USBD_StdItfReq+0x22>
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d12a      	bne.n	8005a84 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a34:	3b01      	subs	r3, #1
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d81d      	bhi.n	8005a76 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	889b      	ldrh	r3, [r3, #4]
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d813      	bhi.n	8005a6c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	6839      	ldr	r1, [r7, #0]
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	4798      	blx	r3
 8005a52:	4603      	mov	r3, r0
 8005a54:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	88db      	ldrh	r3, [r3, #6]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d110      	bne.n	8005a80 <USBD_StdItfReq+0x74>
 8005a5e:	7bfb      	ldrb	r3, [r7, #15]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10d      	bne.n	8005a80 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 fd6d 	bl	8006544 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8005a6a:	e009      	b.n	8005a80 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8005a6c:	6839      	ldr	r1, [r7, #0]
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fcba 	bl	80063e8 <USBD_CtlError>
      break;
 8005a74:	e004      	b.n	8005a80 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8005a76:	6839      	ldr	r1, [r7, #0]
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 fcb5 	bl	80063e8 <USBD_CtlError>
      break;
 8005a7e:	e000      	b.n	8005a82 <USBD_StdItfReq+0x76>
      break;
 8005a80:	bf00      	nop
    }
    break;
 8005a82:	e004      	b.n	8005a8e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8005a84:	6839      	ldr	r1, [r7, #0]
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 fcae 	bl	80063e8 <USBD_CtlError>
    break;
 8005a8c:	bf00      	nop
  }

  return ret;
 8005a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	889b      	ldrh	r3, [r3, #4]
 8005aaa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ab4:	2b20      	cmp	r3, #32
 8005ab6:	d004      	beq.n	8005ac2 <USBD_StdEPReq+0x2a>
 8005ab8:	2b40      	cmp	r3, #64	; 0x40
 8005aba:	d002      	beq.n	8005ac2 <USBD_StdEPReq+0x2a>
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00a      	beq.n	8005ad6 <USBD_StdEPReq+0x3e>
 8005ac0:	e137      	b.n	8005d32 <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	6839      	ldr	r1, [r7, #0]
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	4798      	blx	r3
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	73fb      	strb	r3, [r7, #15]
    break;
 8005ad4:	e132      	b.n	8005d3c <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	785b      	ldrb	r3, [r3, #1]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d03e      	beq.n	8005b5c <USBD_StdEPReq+0xc4>
 8005ade:	2b03      	cmp	r3, #3
 8005ae0:	d002      	beq.n	8005ae8 <USBD_StdEPReq+0x50>
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d079      	beq.n	8005bda <USBD_StdEPReq+0x142>
 8005ae6:	e11e      	b.n	8005d26 <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d002      	beq.n	8005af8 <USBD_StdEPReq+0x60>
 8005af2:	2b03      	cmp	r3, #3
 8005af4:	d015      	beq.n	8005b22 <USBD_StdEPReq+0x8a>
 8005af6:	e02b      	b.n	8005b50 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005af8:	7bbb      	ldrb	r3, [r7, #14]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00c      	beq.n	8005b18 <USBD_StdEPReq+0x80>
 8005afe:	7bbb      	ldrb	r3, [r7, #14]
 8005b00:	2b80      	cmp	r3, #128	; 0x80
 8005b02:	d009      	beq.n	8005b18 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005b04:	7bbb      	ldrb	r3, [r7, #14]
 8005b06:	4619      	mov	r1, r3
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f001 fb73 	bl	80071f4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005b0e:	2180      	movs	r1, #128	; 0x80
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f001 fb6f 	bl	80071f4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005b16:	e020      	b.n	8005b5a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8005b18:	6839      	ldr	r1, [r7, #0]
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 fc64 	bl	80063e8 <USBD_CtlError>
        break;
 8005b20:	e01b      	b.n	8005b5a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	885b      	ldrh	r3, [r3, #2]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10e      	bne.n	8005b48 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005b2a:	7bbb      	ldrb	r3, [r7, #14]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d00b      	beq.n	8005b48 <USBD_StdEPReq+0xb0>
 8005b30:	7bbb      	ldrb	r3, [r7, #14]
 8005b32:	2b80      	cmp	r3, #128	; 0x80
 8005b34:	d008      	beq.n	8005b48 <USBD_StdEPReq+0xb0>
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	88db      	ldrh	r3, [r3, #6]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d104      	bne.n	8005b48 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8005b3e:	7bbb      	ldrb	r3, [r7, #14]
 8005b40:	4619      	mov	r1, r3
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f001 fb56 	bl	80071f4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 fcfb 	bl	8006544 <USBD_CtlSendStatus>

        break;
 8005b4e:	e004      	b.n	8005b5a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8005b50:	6839      	ldr	r1, [r7, #0]
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 fc48 	bl	80063e8 <USBD_CtlError>
        break;
 8005b58:	bf00      	nop
      }
      break;
 8005b5a:	e0e9      	b.n	8005d30 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d002      	beq.n	8005b6c <USBD_StdEPReq+0xd4>
 8005b66:	2b03      	cmp	r3, #3
 8005b68:	d015      	beq.n	8005b96 <USBD_StdEPReq+0xfe>
 8005b6a:	e02f      	b.n	8005bcc <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005b6c:	7bbb      	ldrb	r3, [r7, #14]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00c      	beq.n	8005b8c <USBD_StdEPReq+0xf4>
 8005b72:	7bbb      	ldrb	r3, [r7, #14]
 8005b74:	2b80      	cmp	r3, #128	; 0x80
 8005b76:	d009      	beq.n	8005b8c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005b78:	7bbb      	ldrb	r3, [r7, #14]
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f001 fb39 	bl	80071f4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005b82:	2180      	movs	r1, #128	; 0x80
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f001 fb35 	bl	80071f4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005b8a:	e025      	b.n	8005bd8 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 8005b8c:	6839      	ldr	r1, [r7, #0]
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 fc2a 	bl	80063e8 <USBD_CtlError>
        break;
 8005b94:	e020      	b.n	8005bd8 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	885b      	ldrh	r3, [r3, #2]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d11b      	bne.n	8005bd6 <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8005b9e:	7bbb      	ldrb	r3, [r7, #14]
 8005ba0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d004      	beq.n	8005bb2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005ba8:	7bbb      	ldrb	r3, [r7, #14]
 8005baa:	4619      	mov	r1, r3
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f001 fb57 	bl	8007260 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 fcc6 	bl	8006544 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	6839      	ldr	r1, [r7, #0]
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	4798      	blx	r3
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005bca:	e004      	b.n	8005bd6 <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 8005bcc:	6839      	ldr	r1, [r7, #0]
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 fc0a 	bl	80063e8 <USBD_CtlError>
        break;
 8005bd4:	e000      	b.n	8005bd8 <USBD_StdEPReq+0x140>
        break;
 8005bd6:	bf00      	nop
      }
      break;
 8005bd8:	e0aa      	b.n	8005d30 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d002      	beq.n	8005bea <USBD_StdEPReq+0x152>
 8005be4:	2b03      	cmp	r3, #3
 8005be6:	d032      	beq.n	8005c4e <USBD_StdEPReq+0x1b6>
 8005be8:	e097      	b.n	8005d1a <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005bea:	7bbb      	ldrb	r3, [r7, #14]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d007      	beq.n	8005c00 <USBD_StdEPReq+0x168>
 8005bf0:	7bbb      	ldrb	r3, [r7, #14]
 8005bf2:	2b80      	cmp	r3, #128	; 0x80
 8005bf4:	d004      	beq.n	8005c00 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 8005bf6:	6839      	ldr	r1, [r7, #0]
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 fbf5 	bl	80063e8 <USBD_CtlError>
          break;
 8005bfe:	e091      	b.n	8005d24 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	da0b      	bge.n	8005c20 <USBD_StdEPReq+0x188>
 8005c08:	7bbb      	ldrb	r3, [r7, #14]
 8005c0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c0e:	4613      	mov	r3, r2
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	4413      	add	r3, r2
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	3310      	adds	r3, #16
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	3304      	adds	r3, #4
 8005c1e:	e00b      	b.n	8005c38 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005c20:	7bbb      	ldrb	r3, [r7, #14]
 8005c22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c26:	4613      	mov	r3, r2
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	4413      	add	r3, r2
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	4413      	add	r3, r2
 8005c36:	3304      	adds	r3, #4
 8005c38:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	2202      	movs	r2, #2
 8005c44:	4619      	mov	r1, r3
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 fc3f 	bl	80064ca <USBD_CtlSendData>
        break;
 8005c4c:	e06a      	b.n	8005d24 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8005c4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	da11      	bge.n	8005c7a <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005c56:	7bbb      	ldrb	r3, [r7, #14]
 8005c58:	f003 020f 	and.w	r2, r3, #15
 8005c5c:	6879      	ldr	r1, [r7, #4]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	4413      	add	r3, r2
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	440b      	add	r3, r1
 8005c68:	3324      	adds	r3, #36	; 0x24
 8005c6a:	881b      	ldrh	r3, [r3, #0]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d117      	bne.n	8005ca0 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8005c70:	6839      	ldr	r1, [r7, #0]
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 fbb8 	bl	80063e8 <USBD_CtlError>
            break;
 8005c78:	e054      	b.n	8005d24 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005c7a:	7bbb      	ldrb	r3, [r7, #14]
 8005c7c:	f003 020f 	and.w	r2, r3, #15
 8005c80:	6879      	ldr	r1, [r7, #4]
 8005c82:	4613      	mov	r3, r2
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4413      	add	r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	440b      	add	r3, r1
 8005c8c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005c90:	881b      	ldrh	r3, [r3, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d104      	bne.n	8005ca0 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8005c96:	6839      	ldr	r1, [r7, #0]
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 fba5 	bl	80063e8 <USBD_CtlError>
            break;
 8005c9e:	e041      	b.n	8005d24 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ca0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	da0b      	bge.n	8005cc0 <USBD_StdEPReq+0x228>
 8005ca8:	7bbb      	ldrb	r3, [r7, #14]
 8005caa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005cae:	4613      	mov	r3, r2
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	4413      	add	r3, r2
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	3310      	adds	r3, #16
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	4413      	add	r3, r2
 8005cbc:	3304      	adds	r3, #4
 8005cbe:	e00b      	b.n	8005cd8 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005cc0:	7bbb      	ldrb	r3, [r7, #14]
 8005cc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	4413      	add	r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	3304      	adds	r3, #4
 8005cd8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005cda:	7bbb      	ldrb	r3, [r7, #14]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d002      	beq.n	8005ce6 <USBD_StdEPReq+0x24e>
 8005ce0:	7bbb      	ldrb	r3, [r7, #14]
 8005ce2:	2b80      	cmp	r3, #128	; 0x80
 8005ce4:	d103      	bne.n	8005cee <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	601a      	str	r2, [r3, #0]
 8005cec:	e00e      	b.n	8005d0c <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005cee:	7bbb      	ldrb	r3, [r7, #14]
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f001 faea 	bl	80072cc <USBD_LL_IsStallEP>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d003      	beq.n	8005d06 <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	2201      	movs	r2, #1
 8005d02:	601a      	str	r2, [r3, #0]
 8005d04:	e002      	b.n	8005d0c <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	2202      	movs	r2, #2
 8005d10:	4619      	mov	r1, r3
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 fbd9 	bl	80064ca <USBD_CtlSendData>
          break;
 8005d18:	e004      	b.n	8005d24 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 8005d1a:	6839      	ldr	r1, [r7, #0]
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 fb63 	bl	80063e8 <USBD_CtlError>
        break;
 8005d22:	bf00      	nop
      }
      break;
 8005d24:	e004      	b.n	8005d30 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 8005d26:	6839      	ldr	r1, [r7, #0]
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 fb5d 	bl	80063e8 <USBD_CtlError>
      break;
 8005d2e:	bf00      	nop
    }
    break;
 8005d30:	e004      	b.n	8005d3c <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 8005d32:	6839      	ldr	r1, [r7, #0]
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 fb57 	bl	80063e8 <USBD_CtlError>
    break;
 8005d3a:	bf00      	nop
  }

  return ret;
 8005d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
	...

08005d48 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005d52:	2300      	movs	r3, #0
 8005d54:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005d56:	2300      	movs	r3, #0
 8005d58:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	885b      	ldrh	r3, [r3, #2]
 8005d62:	0a1b      	lsrs	r3, r3, #8
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	3b01      	subs	r3, #1
 8005d68:	2b0e      	cmp	r3, #14
 8005d6a:	f200 8152 	bhi.w	8006012 <USBD_GetDescriptor+0x2ca>
 8005d6e:	a201      	add	r2, pc, #4	; (adr r2, 8005d74 <USBD_GetDescriptor+0x2c>)
 8005d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d74:	08005de5 	.word	0x08005de5
 8005d78:	08005dfd 	.word	0x08005dfd
 8005d7c:	08005e3d 	.word	0x08005e3d
 8005d80:	08006013 	.word	0x08006013
 8005d84:	08006013 	.word	0x08006013
 8005d88:	08005fb3 	.word	0x08005fb3
 8005d8c:	08005fdf 	.word	0x08005fdf
 8005d90:	08006013 	.word	0x08006013
 8005d94:	08006013 	.word	0x08006013
 8005d98:	08006013 	.word	0x08006013
 8005d9c:	08006013 	.word	0x08006013
 8005da0:	08006013 	.word	0x08006013
 8005da4:	08006013 	.word	0x08006013
 8005da8:	08006013 	.word	0x08006013
 8005dac:	08005db1 	.word	0x08005db1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005db6:	69db      	ldr	r3, [r3, #28]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00b      	beq.n	8005dd4 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dc2:	69db      	ldr	r3, [r3, #28]
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	7c12      	ldrb	r2, [r2, #16]
 8005dc8:	f107 0108 	add.w	r1, r7, #8
 8005dcc:	4610      	mov	r0, r2
 8005dce:	4798      	blx	r3
 8005dd0:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005dd2:	e126      	b.n	8006022 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8005dd4:	6839      	ldr	r1, [r7, #0]
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 fb06 	bl	80063e8 <USBD_CtlError>
      err++;
 8005ddc:	7afb      	ldrb	r3, [r7, #11]
 8005dde:	3301      	adds	r3, #1
 8005de0:	72fb      	strb	r3, [r7, #11]
    break;
 8005de2:	e11e      	b.n	8006022 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	7c12      	ldrb	r2, [r2, #16]
 8005df0:	f107 0108 	add.w	r1, r7, #8
 8005df4:	4610      	mov	r0, r2
 8005df6:	4798      	blx	r3
 8005df8:	60f8      	str	r0, [r7, #12]
    break;
 8005dfa:	e112      	b.n	8006022 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	7c1b      	ldrb	r3, [r3, #16]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d10d      	bne.n	8005e20 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0c:	f107 0208 	add.w	r2, r7, #8
 8005e10:	4610      	mov	r0, r2
 8005e12:	4798      	blx	r3
 8005e14:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	3301      	adds	r3, #1
 8005e1a:	2202      	movs	r2, #2
 8005e1c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8005e1e:	e100      	b.n	8006022 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e28:	f107 0208 	add.w	r2, r7, #8
 8005e2c:	4610      	mov	r0, r2
 8005e2e:	4798      	blx	r3
 8005e30:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	3301      	adds	r3, #1
 8005e36:	2202      	movs	r2, #2
 8005e38:	701a      	strb	r2, [r3, #0]
    break;
 8005e3a:	e0f2      	b.n	8006022 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	885b      	ldrh	r3, [r3, #2]
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b05      	cmp	r3, #5
 8005e44:	f200 80ac 	bhi.w	8005fa0 <USBD_GetDescriptor+0x258>
 8005e48:	a201      	add	r2, pc, #4	; (adr r2, 8005e50 <USBD_GetDescriptor+0x108>)
 8005e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4e:	bf00      	nop
 8005e50:	08005e69 	.word	0x08005e69
 8005e54:	08005e9d 	.word	0x08005e9d
 8005e58:	08005ed1 	.word	0x08005ed1
 8005e5c:	08005f05 	.word	0x08005f05
 8005e60:	08005f39 	.word	0x08005f39
 8005e64:	08005f6d 	.word	0x08005f6d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00b      	beq.n	8005e8c <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	7c12      	ldrb	r2, [r2, #16]
 8005e80:	f107 0108 	add.w	r1, r7, #8
 8005e84:	4610      	mov	r0, r2
 8005e86:	4798      	blx	r3
 8005e88:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005e8a:	e091      	b.n	8005fb0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8005e8c:	6839      	ldr	r1, [r7, #0]
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 faaa 	bl	80063e8 <USBD_CtlError>
        err++;
 8005e94:	7afb      	ldrb	r3, [r7, #11]
 8005e96:	3301      	adds	r3, #1
 8005e98:	72fb      	strb	r3, [r7, #11]
      break;
 8005e9a:	e089      	b.n	8005fb0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00b      	beq.n	8005ec0 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	7c12      	ldrb	r2, [r2, #16]
 8005eb4:	f107 0108 	add.w	r1, r7, #8
 8005eb8:	4610      	mov	r0, r2
 8005eba:	4798      	blx	r3
 8005ebc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005ebe:	e077      	b.n	8005fb0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8005ec0:	6839      	ldr	r1, [r7, #0]
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 fa90 	bl	80063e8 <USBD_CtlError>
        err++;
 8005ec8:	7afb      	ldrb	r3, [r7, #11]
 8005eca:	3301      	adds	r3, #1
 8005ecc:	72fb      	strb	r3, [r7, #11]
      break;
 8005ece:	e06f      	b.n	8005fb0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00b      	beq.n	8005ef4 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	7c12      	ldrb	r2, [r2, #16]
 8005ee8:	f107 0108 	add.w	r1, r7, #8
 8005eec:	4610      	mov	r0, r2
 8005eee:	4798      	blx	r3
 8005ef0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005ef2:	e05d      	b.n	8005fb0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8005ef4:	6839      	ldr	r1, [r7, #0]
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 fa76 	bl	80063e8 <USBD_CtlError>
        err++;
 8005efc:	7afb      	ldrb	r3, [r7, #11]
 8005efe:	3301      	adds	r3, #1
 8005f00:	72fb      	strb	r3, [r7, #11]
      break;
 8005f02:	e055      	b.n	8005fb0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00b      	beq.n	8005f28 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	7c12      	ldrb	r2, [r2, #16]
 8005f1c:	f107 0108 	add.w	r1, r7, #8
 8005f20:	4610      	mov	r0, r2
 8005f22:	4798      	blx	r3
 8005f24:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005f26:	e043      	b.n	8005fb0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8005f28:	6839      	ldr	r1, [r7, #0]
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 fa5c 	bl	80063e8 <USBD_CtlError>
        err++;
 8005f30:	7afb      	ldrb	r3, [r7, #11]
 8005f32:	3301      	adds	r3, #1
 8005f34:	72fb      	strb	r3, [r7, #11]
      break;
 8005f36:	e03b      	b.n	8005fb0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f3e:	695b      	ldr	r3, [r3, #20]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00b      	beq.n	8005f5c <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f4a:	695b      	ldr	r3, [r3, #20]
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	7c12      	ldrb	r2, [r2, #16]
 8005f50:	f107 0108 	add.w	r1, r7, #8
 8005f54:	4610      	mov	r0, r2
 8005f56:	4798      	blx	r3
 8005f58:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005f5a:	e029      	b.n	8005fb0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8005f5c:	6839      	ldr	r1, [r7, #0]
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 fa42 	bl	80063e8 <USBD_CtlError>
        err++;
 8005f64:	7afb      	ldrb	r3, [r7, #11]
 8005f66:	3301      	adds	r3, #1
 8005f68:	72fb      	strb	r3, [r7, #11]
      break;
 8005f6a:	e021      	b.n	8005fb0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f72:	699b      	ldr	r3, [r3, #24]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00b      	beq.n	8005f90 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f7e:	699b      	ldr	r3, [r3, #24]
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	7c12      	ldrb	r2, [r2, #16]
 8005f84:	f107 0108 	add.w	r1, r7, #8
 8005f88:	4610      	mov	r0, r2
 8005f8a:	4798      	blx	r3
 8005f8c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005f8e:	e00f      	b.n	8005fb0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8005f90:	6839      	ldr	r1, [r7, #0]
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 fa28 	bl	80063e8 <USBD_CtlError>
        err++;
 8005f98:	7afb      	ldrb	r3, [r7, #11]
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	72fb      	strb	r3, [r7, #11]
      break;
 8005f9e:	e007      	b.n	8005fb0 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8005fa0:	6839      	ldr	r1, [r7, #0]
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 fa20 	bl	80063e8 <USBD_CtlError>
      err++;
 8005fa8:	7afb      	ldrb	r3, [r7, #11]
 8005faa:	3301      	adds	r3, #1
 8005fac:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8005fae:	bf00      	nop
    }
    break;
 8005fb0:	e037      	b.n	8006022 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	7c1b      	ldrb	r3, [r3, #16]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d109      	bne.n	8005fce <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc2:	f107 0208 	add.w	r2, r7, #8
 8005fc6:	4610      	mov	r0, r2
 8005fc8:	4798      	blx	r3
 8005fca:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005fcc:	e029      	b.n	8006022 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8005fce:	6839      	ldr	r1, [r7, #0]
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 fa09 	bl	80063e8 <USBD_CtlError>
      err++;
 8005fd6:	7afb      	ldrb	r3, [r7, #11]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	72fb      	strb	r3, [r7, #11]
    break;
 8005fdc:	e021      	b.n	8006022 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	7c1b      	ldrb	r3, [r3, #16]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10d      	bne.n	8006002 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fee:	f107 0208 	add.w	r2, r7, #8
 8005ff2:	4610      	mov	r0, r2
 8005ff4:	4798      	blx	r3
 8005ff6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	2207      	movs	r2, #7
 8005ffe:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006000:	e00f      	b.n	8006022 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8006002:	6839      	ldr	r1, [r7, #0]
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 f9ef 	bl	80063e8 <USBD_CtlError>
      err++;
 800600a:	7afb      	ldrb	r3, [r7, #11]
 800600c:	3301      	adds	r3, #1
 800600e:	72fb      	strb	r3, [r7, #11]
    break;
 8006010:	e007      	b.n	8006022 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8006012:	6839      	ldr	r1, [r7, #0]
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 f9e7 	bl	80063e8 <USBD_CtlError>
    err++;
 800601a:	7afb      	ldrb	r3, [r7, #11]
 800601c:	3301      	adds	r3, #1
 800601e:	72fb      	strb	r3, [r7, #11]
    break;
 8006020:	bf00      	nop
  }

  if (err != 0U)
 8006022:	7afb      	ldrb	r3, [r7, #11]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d11e      	bne.n	8006066 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	88db      	ldrh	r3, [r3, #6]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d016      	beq.n	800605e <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8006030:	893b      	ldrh	r3, [r7, #8]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00e      	beq.n	8006054 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	88da      	ldrh	r2, [r3, #6]
 800603a:	893b      	ldrh	r3, [r7, #8]
 800603c:	4293      	cmp	r3, r2
 800603e:	bf28      	it	cs
 8006040:	4613      	movcs	r3, r2
 8006042:	b29b      	uxth	r3, r3
 8006044:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8006046:	893b      	ldrh	r3, [r7, #8]
 8006048:	461a      	mov	r2, r3
 800604a:	68f9      	ldr	r1, [r7, #12]
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 fa3c 	bl	80064ca <USBD_CtlSendData>
 8006052:	e009      	b.n	8006068 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006054:	6839      	ldr	r1, [r7, #0]
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 f9c6 	bl	80063e8 <USBD_CtlError>
 800605c:	e004      	b.n	8006068 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 fa70 	bl	8006544 <USBD_CtlSendStatus>
 8006064:	e000      	b.n	8006068 <USBD_GetDescriptor+0x320>
    return;
 8006066:	bf00      	nop
    }
  }
}
 8006068:	3710      	adds	r7, #16
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop

08006070 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	889b      	ldrh	r3, [r3, #4]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d130      	bne.n	80060e4 <USBD_SetAddress+0x74>
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	88db      	ldrh	r3, [r3, #6]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d12c      	bne.n	80060e4 <USBD_SetAddress+0x74>
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	885b      	ldrh	r3, [r3, #2]
 800608e:	2b7f      	cmp	r3, #127	; 0x7f
 8006090:	d828      	bhi.n	80060e4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	885b      	ldrh	r3, [r3, #2]
 8006096:	b2db      	uxtb	r3, r3
 8006098:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800609c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060a4:	2b03      	cmp	r3, #3
 80060a6:	d104      	bne.n	80060b2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80060a8:	6839      	ldr	r1, [r7, #0]
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 f99c 	bl	80063e8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060b0:	e01c      	b.n	80060ec <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	7bfa      	ldrb	r2, [r7, #15]
 80060b6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80060ba:	7bfb      	ldrb	r3, [r7, #15]
 80060bc:	4619      	mov	r1, r3
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f001 f930 	bl	8007324 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 fa3d 	bl	8006544 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80060ca:	7bfb      	ldrb	r3, [r7, #15]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d004      	beq.n	80060da <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2202      	movs	r2, #2
 80060d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060d8:	e008      	b.n	80060ec <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2201      	movs	r2, #1
 80060de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060e2:	e003      	b.n	80060ec <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80060e4:	6839      	ldr	r1, [r7, #0]
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f97e 	bl	80063e8 <USBD_CtlError>
  }
}
 80060ec:	bf00      	nop
 80060ee:	3710      	adds	r7, #16
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80060fe:	2300      	movs	r3, #0
 8006100:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	885b      	ldrh	r3, [r3, #2]
 8006106:	b2da      	uxtb	r2, r3
 8006108:	4b4b      	ldr	r3, [pc, #300]	; (8006238 <USBD_SetConfig+0x144>)
 800610a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800610c:	4b4a      	ldr	r3, [pc, #296]	; (8006238 <USBD_SetConfig+0x144>)
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d905      	bls.n	8006120 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006114:	6839      	ldr	r1, [r7, #0]
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 f966 	bl	80063e8 <USBD_CtlError>
    return USBD_FAIL;
 800611c:	2303      	movs	r3, #3
 800611e:	e087      	b.n	8006230 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006126:	2b02      	cmp	r3, #2
 8006128:	d002      	beq.n	8006130 <USBD_SetConfig+0x3c>
 800612a:	2b03      	cmp	r3, #3
 800612c:	d025      	beq.n	800617a <USBD_SetConfig+0x86>
 800612e:	e071      	b.n	8006214 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006130:	4b41      	ldr	r3, [pc, #260]	; (8006238 <USBD_SetConfig+0x144>)
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d01c      	beq.n	8006172 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006138:	4b3f      	ldr	r3, [pc, #252]	; (8006238 <USBD_SetConfig+0x144>)
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	461a      	mov	r2, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006142:	4b3d      	ldr	r3, [pc, #244]	; (8006238 <USBD_SetConfig+0x144>)
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	4619      	mov	r1, r3
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f7ff f97b 	bl	8005444 <USBD_SetClassConfig>
 800614e:	4603      	mov	r3, r0
 8006150:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8006152:	7bfb      	ldrb	r3, [r7, #15]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d004      	beq.n	8006162 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006158:	6839      	ldr	r1, [r7, #0]
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 f944 	bl	80063e8 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006160:	e065      	b.n	800622e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f9ee 	bl	8006544 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2203      	movs	r2, #3
 800616c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006170:	e05d      	b.n	800622e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 f9e6 	bl	8006544 <USBD_CtlSendStatus>
    break;
 8006178:	e059      	b.n	800622e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800617a:	4b2f      	ldr	r3, [pc, #188]	; (8006238 <USBD_SetConfig+0x144>)
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d112      	bne.n	80061a8 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2202      	movs	r2, #2
 8006186:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800618a:	4b2b      	ldr	r3, [pc, #172]	; (8006238 <USBD_SetConfig+0x144>)
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	461a      	mov	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006194:	4b28      	ldr	r3, [pc, #160]	; (8006238 <USBD_SetConfig+0x144>)
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	4619      	mov	r1, r3
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f7ff f96e 	bl	800547c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 f9cf 	bl	8006544 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80061a6:	e042      	b.n	800622e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80061a8:	4b23      	ldr	r3, [pc, #140]	; (8006238 <USBD_SetConfig+0x144>)
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	461a      	mov	r2, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d02a      	beq.n	800620c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	4619      	mov	r1, r3
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f7ff f95c 	bl	800547c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80061c4:	4b1c      	ldr	r3, [pc, #112]	; (8006238 <USBD_SetConfig+0x144>)
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	461a      	mov	r2, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80061ce:	4b1a      	ldr	r3, [pc, #104]	; (8006238 <USBD_SetConfig+0x144>)
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	4619      	mov	r1, r3
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f7ff f935 	bl	8005444 <USBD_SetClassConfig>
 80061da:	4603      	mov	r3, r0
 80061dc:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80061de:	7bfb      	ldrb	r3, [r7, #15]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00f      	beq.n	8006204 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80061e4:	6839      	ldr	r1, [r7, #0]
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 f8fe 	bl	80063e8 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	4619      	mov	r1, r3
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f7ff f941 	bl	800547c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2202      	movs	r2, #2
 80061fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006202:	e014      	b.n	800622e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 f99d 	bl	8006544 <USBD_CtlSendStatus>
    break;
 800620a:	e010      	b.n	800622e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 f999 	bl	8006544 <USBD_CtlSendStatus>
    break;
 8006212:	e00c      	b.n	800622e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006214:	6839      	ldr	r1, [r7, #0]
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 f8e6 	bl	80063e8 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800621c:	4b06      	ldr	r3, [pc, #24]	; (8006238 <USBD_SetConfig+0x144>)
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	4619      	mov	r1, r3
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f7ff f92a 	bl	800547c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006228:	2303      	movs	r3, #3
 800622a:	73fb      	strb	r3, [r7, #15]
    break;
 800622c:	bf00      	nop
  }

  return ret;
 800622e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006230:	4618      	mov	r0, r3
 8006232:	3710      	adds	r7, #16
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	2000029c 	.word	0x2000029c

0800623c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	88db      	ldrh	r3, [r3, #6]
 800624a:	2b01      	cmp	r3, #1
 800624c:	d004      	beq.n	8006258 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800624e:	6839      	ldr	r1, [r7, #0]
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 f8c9 	bl	80063e8 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8006256:	e021      	b.n	800629c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800625e:	2b01      	cmp	r3, #1
 8006260:	db17      	blt.n	8006292 <USBD_GetConfig+0x56>
 8006262:	2b02      	cmp	r3, #2
 8006264:	dd02      	ble.n	800626c <USBD_GetConfig+0x30>
 8006266:	2b03      	cmp	r3, #3
 8006268:	d00b      	beq.n	8006282 <USBD_GetConfig+0x46>
 800626a:	e012      	b.n	8006292 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	3308      	adds	r3, #8
 8006276:	2201      	movs	r2, #1
 8006278:	4619      	mov	r1, r3
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f925 	bl	80064ca <USBD_CtlSendData>
      break;
 8006280:	e00c      	b.n	800629c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	3304      	adds	r3, #4
 8006286:	2201      	movs	r2, #1
 8006288:	4619      	mov	r1, r3
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 f91d 	bl	80064ca <USBD_CtlSendData>
      break;
 8006290:	e004      	b.n	800629c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8006292:	6839      	ldr	r1, [r7, #0]
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 f8a7 	bl	80063e8 <USBD_CtlError>
      break;
 800629a:	bf00      	nop
}
 800629c:	bf00      	nop
 800629e:	3708      	adds	r7, #8
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062b4:	3b01      	subs	r3, #1
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d81e      	bhi.n	80062f8 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	88db      	ldrh	r3, [r3, #6]
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d004      	beq.n	80062cc <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80062c2:	6839      	ldr	r1, [r7, #0]
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 f88f 	bl	80063e8 <USBD_CtlError>
      break;
 80062ca:	e01a      	b.n	8006302 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
    pdev->dev_config_status = 0U;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	60da      	str	r2, [r3, #12]
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d005      	beq.n	80062e8 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	f043 0202 	orr.w	r2, r3, #2
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	330c      	adds	r3, #12
 80062ec:	2202      	movs	r2, #2
 80062ee:	4619      	mov	r1, r3
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 f8ea 	bl	80064ca <USBD_CtlSendData>
    break;
 80062f6:	e004      	b.n	8006302 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80062f8:	6839      	ldr	r1, [r7, #0]
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 f874 	bl	80063e8 <USBD_CtlError>
    break;
 8006300:	bf00      	nop
  }
}
 8006302:	bf00      	nop
 8006304:	3708      	adds	r7, #8
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}

0800630a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800630a:	b580      	push	{r7, lr}
 800630c:	b082      	sub	sp, #8
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
 8006312:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	885b      	ldrh	r3, [r3, #2]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d106      	bne.n	800632a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 f90d 	bl	8006544 <USBD_CtlSendStatus>
  }
}
 800632a:	bf00      	nop
 800632c:	3708      	adds	r7, #8
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b082      	sub	sp, #8
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
 800633a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006342:	3b01      	subs	r3, #1
 8006344:	2b02      	cmp	r3, #2
 8006346:	d80b      	bhi.n	8006360 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	885b      	ldrh	r3, [r3, #2]
 800634c:	2b01      	cmp	r3, #1
 800634e:	d10c      	bne.n	800636a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 f8f3 	bl	8006544 <USBD_CtlSendStatus>
      }
      break;
 800635e:	e004      	b.n	800636a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006360:	6839      	ldr	r1, [r7, #0]
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 f840 	bl	80063e8 <USBD_CtlError>
      break;
 8006368:	e000      	b.n	800636c <USBD_ClrFeature+0x3a>
      break;
 800636a:	bf00      	nop
  }
}
 800636c:	bf00      	nop
 800636e:	3708      	adds	r7, #8
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	781a      	ldrb	r2, [r3, #0]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	3301      	adds	r3, #1
 800638e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	781a      	ldrb	r2, [r3, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	3301      	adds	r3, #1
 800639c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800639e:	68f8      	ldr	r0, [r7, #12]
 80063a0:	f7ff faa7 	bl	80058f2 <SWAPBYTE>
 80063a4:	4603      	mov	r3, r0
 80063a6:	461a      	mov	r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	3301      	adds	r3, #1
 80063b0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	3301      	adds	r3, #1
 80063b6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	f7ff fa9a 	bl	80058f2 <SWAPBYTE>
 80063be:	4603      	mov	r3, r0
 80063c0:	461a      	mov	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	3301      	adds	r3, #1
 80063ca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	3301      	adds	r3, #1
 80063d0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80063d2:	68f8      	ldr	r0, [r7, #12]
 80063d4:	f7ff fa8d 	bl	80058f2 <SWAPBYTE>
 80063d8:	4603      	mov	r3, r0
 80063da:	461a      	mov	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	80da      	strh	r2, [r3, #6]
}
 80063e0:	bf00      	nop
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80063f2:	2180      	movs	r1, #128	; 0x80
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 fefd 	bl	80071f4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80063fa:	2100      	movs	r1, #0
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 fef9 	bl	80071f4 <USBD_LL_StallEP>
}
 8006402:	bf00      	nop
 8006404:	3708      	adds	r7, #8
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800640a:	b580      	push	{r7, lr}
 800640c:	b086      	sub	sp, #24
 800640e:	af00      	add	r7, sp, #0
 8006410:	60f8      	str	r0, [r7, #12]
 8006412:	60b9      	str	r1, [r7, #8]
 8006414:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006416:	2300      	movs	r3, #0
 8006418:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d036      	beq.n	800648e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006424:	6938      	ldr	r0, [r7, #16]
 8006426:	f000 f836 	bl	8006496 <USBD_GetLen>
 800642a:	4603      	mov	r3, r0
 800642c:	3301      	adds	r3, #1
 800642e:	b29b      	uxth	r3, r3
 8006430:	005b      	lsls	r3, r3, #1
 8006432:	b29a      	uxth	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006438:	7dfb      	ldrb	r3, [r7, #23]
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	4413      	add	r3, r2
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	7812      	ldrb	r2, [r2, #0]
 8006442:	701a      	strb	r2, [r3, #0]
  idx++;
 8006444:	7dfb      	ldrb	r3, [r7, #23]
 8006446:	3301      	adds	r3, #1
 8006448:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800644a:	7dfb      	ldrb	r3, [r7, #23]
 800644c:	68ba      	ldr	r2, [r7, #8]
 800644e:	4413      	add	r3, r2
 8006450:	2203      	movs	r2, #3
 8006452:	701a      	strb	r2, [r3, #0]
  idx++;
 8006454:	7dfb      	ldrb	r3, [r7, #23]
 8006456:	3301      	adds	r3, #1
 8006458:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800645a:	e013      	b.n	8006484 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800645c:	7dfb      	ldrb	r3, [r7, #23]
 800645e:	68ba      	ldr	r2, [r7, #8]
 8006460:	4413      	add	r3, r2
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	7812      	ldrb	r2, [r2, #0]
 8006466:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	3301      	adds	r3, #1
 800646c:	613b      	str	r3, [r7, #16]
    idx++;
 800646e:	7dfb      	ldrb	r3, [r7, #23]
 8006470:	3301      	adds	r3, #1
 8006472:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006474:	7dfb      	ldrb	r3, [r7, #23]
 8006476:	68ba      	ldr	r2, [r7, #8]
 8006478:	4413      	add	r3, r2
 800647a:	2200      	movs	r2, #0
 800647c:	701a      	strb	r2, [r3, #0]
    idx++;
 800647e:	7dfb      	ldrb	r3, [r7, #23]
 8006480:	3301      	adds	r3, #1
 8006482:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d1e7      	bne.n	800645c <USBD_GetString+0x52>
 800648c:	e000      	b.n	8006490 <USBD_GetString+0x86>
    return;
 800648e:	bf00      	nop
  }
}
 8006490:	3718      	adds	r7, #24
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}

08006496 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006496:	b480      	push	{r7}
 8006498:	b085      	sub	sp, #20
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800649e:	2300      	movs	r3, #0
 80064a0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80064a6:	e005      	b.n	80064b4 <USBD_GetLen+0x1e>
  {
    len++;
 80064a8:	7bfb      	ldrb	r3, [r7, #15]
 80064aa:	3301      	adds	r3, #1
 80064ac:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	3301      	adds	r3, #1
 80064b2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d1f5      	bne.n	80064a8 <USBD_GetLen+0x12>
  }

  return len;
 80064bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3714      	adds	r7, #20
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr

080064ca <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b084      	sub	sp, #16
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	60f8      	str	r0, [r7, #12]
 80064d2:	60b9      	str	r1, [r7, #8]
 80064d4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2202      	movs	r2, #2
 80064da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	2100      	movs	r1, #0
 80064f0:	68f8      	ldr	r0, [r7, #12]
 80064f2:	f000 ff4d 	bl	8007390 <USBD_LL_Transmit>

  return USBD_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3710      	adds	r7, #16
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	68ba      	ldr	r2, [r7, #8]
 8006510:	2100      	movs	r1, #0
 8006512:	68f8      	ldr	r0, [r7, #12]
 8006514:	f000 ff3c 	bl	8007390 <USBD_LL_Transmit>

  return USBD_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b084      	sub	sp, #16
 8006526:	af00      	add	r7, sp, #0
 8006528:	60f8      	str	r0, [r7, #12]
 800652a:	60b9      	str	r1, [r7, #8]
 800652c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	68ba      	ldr	r2, [r7, #8]
 8006532:	2100      	movs	r1, #0
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f000 ff63 	bl	8007400 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2204      	movs	r2, #4
 8006550:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006554:	2300      	movs	r3, #0
 8006556:	2200      	movs	r2, #0
 8006558:	2100      	movs	r1, #0
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 ff18 	bl	8007390 <USBD_LL_Transmit>

  return USBD_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3708      	adds	r7, #8
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}

0800656a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800656a:	b580      	push	{r7, lr}
 800656c:	b082      	sub	sp, #8
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2205      	movs	r2, #5
 8006576:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800657a:	2300      	movs	r3, #0
 800657c:	2200      	movs	r2, #0
 800657e:	2100      	movs	r1, #0
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 ff3d 	bl	8007400 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3708      	adds	r7, #8
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <setupUSBConversionTable>:
};


unsigned char charToUSBKey[255];

void setupUSBConversionTable(){
 8006590:	b480      	push	{r7}
 8006592:	af00      	add	r7, sp, #0
	charToUSBKey['-'] = 0x2D;
 8006594:	4b30      	ldr	r3, [pc, #192]	; (8006658 <setupUSBConversionTable+0xc8>)
 8006596:	222d      	movs	r2, #45	; 0x2d
 8006598:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	charToUSBKey['F'] = 0x09;
 800659c:	4b2e      	ldr	r3, [pc, #184]	; (8006658 <setupUSBConversionTable+0xc8>)
 800659e:	2209      	movs	r2, #9
 80065a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	charToUSBKey['f'] = 0x09;
 80065a4:	4b2c      	ldr	r3, [pc, #176]	; (8006658 <setupUSBConversionTable+0xc8>)
 80065a6:	2209      	movs	r2, #9
 80065a8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66

	charToUSBKey['E'] = 0x08;
 80065ac:	4b2a      	ldr	r3, [pc, #168]	; (8006658 <setupUSBConversionTable+0xc8>)
 80065ae:	2208      	movs	r2, #8
 80065b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	charToUSBKey['e'] = 0x08;
 80065b4:	4b28      	ldr	r3, [pc, #160]	; (8006658 <setupUSBConversionTable+0xc8>)
 80065b6:	2208      	movs	r2, #8
 80065b8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65

	charToUSBKey['D'] = 0x07;
 80065bc:	4b26      	ldr	r3, [pc, #152]	; (8006658 <setupUSBConversionTable+0xc8>)
 80065be:	2207      	movs	r2, #7
 80065c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	charToUSBKey['d'] = 0x07;
 80065c4:	4b24      	ldr	r3, [pc, #144]	; (8006658 <setupUSBConversionTable+0xc8>)
 80065c6:	2207      	movs	r2, #7
 80065c8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

	charToUSBKey['C'] = 0x06;
 80065cc:	4b22      	ldr	r3, [pc, #136]	; (8006658 <setupUSBConversionTable+0xc8>)
 80065ce:	2206      	movs	r2, #6
 80065d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	charToUSBKey['c'] = 0x06;
 80065d4:	4b20      	ldr	r3, [pc, #128]	; (8006658 <setupUSBConversionTable+0xc8>)
 80065d6:	2206      	movs	r2, #6
 80065d8:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63

	charToUSBKey['B'] = 0x05;
 80065dc:	4b1e      	ldr	r3, [pc, #120]	; (8006658 <setupUSBConversionTable+0xc8>)
 80065de:	2205      	movs	r2, #5
 80065e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	charToUSBKey['b'] = 0x05;
 80065e4:	4b1c      	ldr	r3, [pc, #112]	; (8006658 <setupUSBConversionTable+0xc8>)
 80065e6:	2205      	movs	r2, #5
 80065e8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

	charToUSBKey['A'] = 0x04;
 80065ec:	4b1a      	ldr	r3, [pc, #104]	; (8006658 <setupUSBConversionTable+0xc8>)
 80065ee:	2204      	movs	r2, #4
 80065f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	charToUSBKey['a'] = 0x04;
 80065f4:	4b18      	ldr	r3, [pc, #96]	; (8006658 <setupUSBConversionTable+0xc8>)
 80065f6:	2204      	movs	r2, #4
 80065f8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

	charToUSBKey['0'] = 0x62;
 80065fc:	4b16      	ldr	r3, [pc, #88]	; (8006658 <setupUSBConversionTable+0xc8>)
 80065fe:	2262      	movs	r2, #98	; 0x62
 8006600:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	charToUSBKey['9'] = 0x61;
 8006604:	4b14      	ldr	r3, [pc, #80]	; (8006658 <setupUSBConversionTable+0xc8>)
 8006606:	2261      	movs	r2, #97	; 0x61
 8006608:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	charToUSBKey['8'] = 0x60;
 800660c:	4b12      	ldr	r3, [pc, #72]	; (8006658 <setupUSBConversionTable+0xc8>)
 800660e:	2260      	movs	r2, #96	; 0x60
 8006610:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	charToUSBKey['7'] = 0x5F;
 8006614:	4b10      	ldr	r3, [pc, #64]	; (8006658 <setupUSBConversionTable+0xc8>)
 8006616:	225f      	movs	r2, #95	; 0x5f
 8006618:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	charToUSBKey['6'] = 0x5E;
 800661c:	4b0e      	ldr	r3, [pc, #56]	; (8006658 <setupUSBConversionTable+0xc8>)
 800661e:	225e      	movs	r2, #94	; 0x5e
 8006620:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	charToUSBKey['5'] = 0x5D;
 8006624:	4b0c      	ldr	r3, [pc, #48]	; (8006658 <setupUSBConversionTable+0xc8>)
 8006626:	225d      	movs	r2, #93	; 0x5d
 8006628:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	charToUSBKey['4'] = 0x5C;
 800662c:	4b0a      	ldr	r3, [pc, #40]	; (8006658 <setupUSBConversionTable+0xc8>)
 800662e:	225c      	movs	r2, #92	; 0x5c
 8006630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	charToUSBKey['3'] = 0x5B;
 8006634:	4b08      	ldr	r3, [pc, #32]	; (8006658 <setupUSBConversionTable+0xc8>)
 8006636:	225b      	movs	r2, #91	; 0x5b
 8006638:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	charToUSBKey['2'] = 0x5A;
 800663c:	4b06      	ldr	r3, [pc, #24]	; (8006658 <setupUSBConversionTable+0xc8>)
 800663e:	225a      	movs	r2, #90	; 0x5a
 8006640:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	charToUSBKey['1'] = 0x59;
 8006644:	4b04      	ldr	r3, [pc, #16]	; (8006658 <setupUSBConversionTable+0xc8>)
 8006646:	2259      	movs	r2, #89	; 0x59
 8006648:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31


}
 800664c:	bf00      	nop
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	200002c8 	.word	0x200002c8

0800665c <getKeyPadPressedKeys>:


KeysPressed  * getKeyPadPressedKeys()
{
 800665c:	b480      	push	{r7}
 800665e:	af00      	add	r7, sp, #0
	return &keyPadPressedKeys;
 8006660:	4b02      	ldr	r3, [pc, #8]	; (800666c <getKeyPadPressedKeys+0x10>)
}
 8006662:	4618      	mov	r0, r3
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr
 800666c:	200002a0 	.word	0x200002a0

08006670 <calculatePressedKeys>:

void calculatePressedKeys()
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b082      	sub	sp, #8
 8006674:	af00      	add	r7, sp, #0
			COL_1_INPUT_Pin,
			COL_2_INPUT_Pin,
			COL_3_INPUT_Pin
	};

	keyPadPressedKeys.numKeysPressed = 0;
 8006676:	4b2b      	ldr	r3, [pc, #172]	; (8006724 <calculatePressedKeys+0xb4>)
 8006678:	2200      	movs	r2, #0
 800667a:	751a      	strb	r2, [r3, #20]

	unsigned char i = 0;
 800667c:	2300      	movs	r3, #0
 800667e:	71fb      	strb	r3, [r7, #7]
	unsigned char j = 0;
 8006680:	2300      	movs	r3, #0
 8006682:	71bb      	strb	r3, [r7, #6]
	GPIO_PinState statePin;
	for(i=0;i < 5; i++)
 8006684:	2300      	movs	r3, #0
 8006686:	71fb      	strb	r3, [r7, #7]
 8006688:	e044      	b.n	8006714 <calculatePressedKeys+0xa4>
	{
		  HAL_GPIO_WritePin(rowsPorts[i], rowsPins[i], GPIO_PIN_SET);
 800668a:	79fb      	ldrb	r3, [r7, #7]
 800668c:	4a26      	ldr	r2, [pc, #152]	; (8006728 <calculatePressedKeys+0xb8>)
 800668e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006692:	79fb      	ldrb	r3, [r7, #7]
 8006694:	4a25      	ldr	r2, [pc, #148]	; (800672c <calculatePressedKeys+0xbc>)
 8006696:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800669a:	2201      	movs	r2, #1
 800669c:	4619      	mov	r1, r3
 800669e:	f7fa fa7b 	bl	8000b98 <HAL_GPIO_WritePin>
		  for(j=0; j < 4; j++)
 80066a2:	2300      	movs	r3, #0
 80066a4:	71bb      	strb	r3, [r7, #6]
 80066a6:	e023      	b.n	80066f0 <calculatePressedKeys+0x80>
		  {
			  statePin =  HAL_GPIO_ReadPin(colsPorts[j],colsPins[j]);
 80066a8:	79bb      	ldrb	r3, [r7, #6]
 80066aa:	4a21      	ldr	r2, [pc, #132]	; (8006730 <calculatePressedKeys+0xc0>)
 80066ac:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80066b0:	79bb      	ldrb	r3, [r7, #6]
 80066b2:	4a20      	ldr	r2, [pc, #128]	; (8006734 <calculatePressedKeys+0xc4>)
 80066b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066b8:	4619      	mov	r1, r3
 80066ba:	f7fa fa55 	bl	8000b68 <HAL_GPIO_ReadPin>
 80066be:	4603      	mov	r3, r0
 80066c0:	717b      	strb	r3, [r7, #5]
			  if(statePin == GPIO_PIN_SET)
 80066c2:	797b      	ldrb	r3, [r7, #5]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d110      	bne.n	80066ea <calculatePressedKeys+0x7a>
			  {
				  keyPadPressedKeys.pressedKeys[keyPadPressedKeys.numKeysPressed] = ButtonLayout[i * 4 + j];
 80066c8:	79fb      	ldrb	r3, [r7, #7]
 80066ca:	009a      	lsls	r2, r3, #2
 80066cc:	79bb      	ldrb	r3, [r7, #6]
 80066ce:	4413      	add	r3, r2
 80066d0:	4a14      	ldr	r2, [pc, #80]	; (8006724 <calculatePressedKeys+0xb4>)
 80066d2:	7d12      	ldrb	r2, [r2, #20]
 80066d4:	4611      	mov	r1, r2
 80066d6:	4a18      	ldr	r2, [pc, #96]	; (8006738 <calculatePressedKeys+0xc8>)
 80066d8:	5cd2      	ldrb	r2, [r2, r3]
 80066da:	4b12      	ldr	r3, [pc, #72]	; (8006724 <calculatePressedKeys+0xb4>)
 80066dc:	545a      	strb	r2, [r3, r1]
				  keyPadPressedKeys.numKeysPressed++;
 80066de:	4b11      	ldr	r3, [pc, #68]	; (8006724 <calculatePressedKeys+0xb4>)
 80066e0:	7d1b      	ldrb	r3, [r3, #20]
 80066e2:	3301      	adds	r3, #1
 80066e4:	b2da      	uxtb	r2, r3
 80066e6:	4b0f      	ldr	r3, [pc, #60]	; (8006724 <calculatePressedKeys+0xb4>)
 80066e8:	751a      	strb	r2, [r3, #20]
		  for(j=0; j < 4; j++)
 80066ea:	79bb      	ldrb	r3, [r7, #6]
 80066ec:	3301      	adds	r3, #1
 80066ee:	71bb      	strb	r3, [r7, #6]
 80066f0:	79bb      	ldrb	r3, [r7, #6]
 80066f2:	2b03      	cmp	r3, #3
 80066f4:	d9d8      	bls.n	80066a8 <calculatePressedKeys+0x38>
			  }

		  }
		  HAL_GPIO_WritePin(rowsPorts[i], rowsPins[i], GPIO_PIN_RESET);
 80066f6:	79fb      	ldrb	r3, [r7, #7]
 80066f8:	4a0b      	ldr	r2, [pc, #44]	; (8006728 <calculatePressedKeys+0xb8>)
 80066fa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80066fe:	79fb      	ldrb	r3, [r7, #7]
 8006700:	4a0a      	ldr	r2, [pc, #40]	; (800672c <calculatePressedKeys+0xbc>)
 8006702:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006706:	2200      	movs	r2, #0
 8006708:	4619      	mov	r1, r3
 800670a:	f7fa fa45 	bl	8000b98 <HAL_GPIO_WritePin>
	for(i=0;i < 5; i++)
 800670e:	79fb      	ldrb	r3, [r7, #7]
 8006710:	3301      	adds	r3, #1
 8006712:	71fb      	strb	r3, [r7, #7]
 8006714:	79fb      	ldrb	r3, [r7, #7]
 8006716:	2b04      	cmp	r3, #4
 8006718:	d9b7      	bls.n	800668a <calculatePressedKeys+0x1a>
	}
}
 800671a:	bf00      	nop
 800671c:	3708      	adds	r7, #8
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	200002a0 	.word	0x200002a0
 8006728:	20000180 	.word	0x20000180
 800672c:	20000194 	.word	0x20000194
 8006730:	200001a0 	.word	0x200001a0
 8006734:	200001b0 	.word	0x200001b0
 8006738:	08007a04 	.word	0x08007a04

0800673c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006742:	f7f9 fec1 	bl	80004c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006746:	f000 f83d 	bl	80067c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800674a:	f000 f8f5 	bl	8006938 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800674e:	f000 fad1 	bl	8006cf4 <MX_USB_DEVICE_Init>
  MX_USART3_UART_Init();
 8006752:	f000 f8c1 	bl	80068d8 <MX_USART3_UART_Init>
	  HAL_Delay(1000);
	  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin,   GPIO_PIN_RESET);
	  HAL_Delay(1000);
  }
  */
  setupUSBConversionTable();
 8006756:	f7ff ff1b 	bl	8006590 <setupUSBConversionTable>
  KeysPressed * pressedKeys = getKeyPadPressedKeys();
 800675a:	f7ff ff7f 	bl	800665c <getKeyPadPressedKeys>
 800675e:	6078      	str	r0, [r7, #4]
  memset(buffer,0,8);
 8006760:	2208      	movs	r2, #8
 8006762:	2100      	movs	r1, #0
 8006764:	4814      	ldr	r0, [pc, #80]	; (80067b8 <main+0x7c>)
 8006766:	f001 f85b 	bl	8007820 <memset>
  buffer[0] = 1;
 800676a:	4b13      	ldr	r3, [pc, #76]	; (80067b8 <main+0x7c>)
 800676c:	2201      	movs	r2, #1
 800676e:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  calculatePressedKeys();
 8006770:	f7ff ff7e 	bl	8006670 <calculatePressedKeys>
	  if(pressedKeys->numKeysPressed)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	7d1b      	ldrb	r3, [r3, #20]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d019      	beq.n	80067b0 <main+0x74>
	  {

		  buffer[3] = charToUSBKey[pressedKeys->pressedKeys[0]];
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	461a      	mov	r2, r3
 8006782:	4b0e      	ldr	r3, [pc, #56]	; (80067bc <main+0x80>)
 8006784:	5c9a      	ldrb	r2, [r3, r2]
 8006786:	4b0c      	ldr	r3, [pc, #48]	; (80067b8 <main+0x7c>)
 8006788:	70da      	strb	r2, [r3, #3]
		  USBD_HID_SendReport(&hUsbDeviceFS, buffer, 8);
 800678a:	2208      	movs	r2, #8
 800678c:	490a      	ldr	r1, [pc, #40]	; (80067b8 <main+0x7c>)
 800678e:	480c      	ldr	r0, [pc, #48]	; (80067c0 <main+0x84>)
 8006790:	f7fe fd76 	bl	8005280 <USBD_HID_SendReport>
		  HAL_Delay(100);
 8006794:	2064      	movs	r0, #100	; 0x64
 8006796:	f7f9 ff0b 	bl	80005b0 <HAL_Delay>
		  buffer[3] = 0x00;
 800679a:	4b07      	ldr	r3, [pc, #28]	; (80067b8 <main+0x7c>)
 800679c:	2200      	movs	r2, #0
 800679e:	70da      	strb	r2, [r3, #3]
		  USBD_HID_SendReport(&hUsbDeviceFS, buffer, 8);
 80067a0:	2208      	movs	r2, #8
 80067a2:	4905      	ldr	r1, [pc, #20]	; (80067b8 <main+0x7c>)
 80067a4:	4806      	ldr	r0, [pc, #24]	; (80067c0 <main+0x84>)
 80067a6:	f7fe fd6b 	bl	8005280 <USBD_HID_SendReport>
		  HAL_Delay(100);
 80067aa:	2064      	movs	r0, #100	; 0x64
 80067ac:	f7f9 ff00 	bl	80005b0 <HAL_Delay>
	  }
	  HAL_Delay(10);
 80067b0:	200a      	movs	r0, #10
 80067b2:	f7f9 fefd 	bl	80005b0 <HAL_Delay>
	  calculatePressedKeys();
 80067b6:	e7db      	b.n	8006770 <main+0x34>
 80067b8:	20000448 	.word	0x20000448
 80067bc:	200002c8 	.word	0x200002c8
 80067c0:	20000450 	.word	0x20000450

080067c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b0b8      	sub	sp, #224	; 0xe0
 80067c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80067ca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80067ce:	2244      	movs	r2, #68	; 0x44
 80067d0:	2100      	movs	r1, #0
 80067d2:	4618      	mov	r0, r3
 80067d4:	f001 f824 	bl	8007820 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80067d8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80067dc:	2200      	movs	r2, #0
 80067de:	601a      	str	r2, [r3, #0]
 80067e0:	605a      	str	r2, [r3, #4]
 80067e2:	609a      	str	r2, [r3, #8]
 80067e4:	60da      	str	r2, [r3, #12]
 80067e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80067e8:	463b      	mov	r3, r7
 80067ea:	2288      	movs	r2, #136	; 0x88
 80067ec:	2100      	movs	r1, #0
 80067ee:	4618      	mov	r0, r3
 80067f0:	f001 f816 	bl	8007820 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80067f4:	2310      	movs	r3, #16
 80067f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80067fa:	2301      	movs	r3, #1
 80067fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8006800:	2300      	movs	r3, #0
 8006802:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8006806:	2360      	movs	r3, #96	; 0x60
 8006808:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800680c:	2302      	movs	r3, #2
 800680e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8006812:	2301      	movs	r3, #1
 8006814:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8006818:	2301      	movs	r3, #1
 800681a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 800681e:	2328      	movs	r3, #40	; 0x28
 8006820:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8006824:	2307      	movs	r3, #7
 8006826:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800682a:	2302      	movs	r3, #2
 800682c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8006830:	2302      	movs	r3, #2
 8006832:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006836:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800683a:	4618      	mov	r0, r3
 800683c:	f7fb fac0 	bl	8001dc0 <HAL_RCC_OscConfig>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d001      	beq.n	800684a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8006846:	f000 f911 	bl	8006a6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800684a:	230f      	movs	r3, #15
 800684c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006850:	2303      	movs	r3, #3
 8006852:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006856:	2300      	movs	r3, #0
 8006858:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800685c:	2300      	movs	r3, #0
 800685e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006862:	2300      	movs	r3, #0
 8006864:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8006868:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800686c:	2104      	movs	r1, #4
 800686e:	4618      	mov	r0, r3
 8006870:	f7fb fe8c 	bl	800258c <HAL_RCC_ClockConfig>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d001      	beq.n	800687e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800687a:	f000 f8f7 	bl	8006a6c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 800687e:	f242 0304 	movw	r3, #8196	; 0x2004
 8006882:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8006884:	2300      	movs	r3, #0
 8006886:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8006888:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800688c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800688e:	2301      	movs	r3, #1
 8006890:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8006892:	2301      	movs	r3, #1
 8006894:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8006896:	2318      	movs	r3, #24
 8006898:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800689a:	2307      	movs	r3, #7
 800689c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800689e:	2302      	movs	r3, #2
 80068a0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80068a2:	2302      	movs	r3, #2
 80068a4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80068a6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80068aa:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80068ac:	463b      	mov	r3, r7
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7fc f870 	bl	8002994 <HAL_RCCEx_PeriphCLKConfig>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d001      	beq.n	80068be <SystemClock_Config+0xfa>
  {
    Error_Handler();
 80068ba:	f000 f8d7 	bl	8006a6c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80068be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80068c2:	f7fb fa17 	bl	8001cf4 <HAL_PWREx_ControlVoltageScaling>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d001      	beq.n	80068d0 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 80068cc:	f000 f8ce 	bl	8006a6c <Error_Handler>
  }
}
 80068d0:	bf00      	nop
 80068d2:	37e0      	adds	r7, #224	; 0xe0
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80068dc:	4b14      	ldr	r3, [pc, #80]	; (8006930 <MX_USART3_UART_Init+0x58>)
 80068de:	4a15      	ldr	r2, [pc, #84]	; (8006934 <MX_USART3_UART_Init+0x5c>)
 80068e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80068e2:	4b13      	ldr	r3, [pc, #76]	; (8006930 <MX_USART3_UART_Init+0x58>)
 80068e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80068e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80068ea:	4b11      	ldr	r3, [pc, #68]	; (8006930 <MX_USART3_UART_Init+0x58>)
 80068ec:	2200      	movs	r2, #0
 80068ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80068f0:	4b0f      	ldr	r3, [pc, #60]	; (8006930 <MX_USART3_UART_Init+0x58>)
 80068f2:	2200      	movs	r2, #0
 80068f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80068f6:	4b0e      	ldr	r3, [pc, #56]	; (8006930 <MX_USART3_UART_Init+0x58>)
 80068f8:	2200      	movs	r2, #0
 80068fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80068fc:	4b0c      	ldr	r3, [pc, #48]	; (8006930 <MX_USART3_UART_Init+0x58>)
 80068fe:	220c      	movs	r2, #12
 8006900:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8006902:	4b0b      	ldr	r3, [pc, #44]	; (8006930 <MX_USART3_UART_Init+0x58>)
 8006904:	f44f 7240 	mov.w	r2, #768	; 0x300
 8006908:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800690a:	4b09      	ldr	r3, [pc, #36]	; (8006930 <MX_USART3_UART_Init+0x58>)
 800690c:	2200      	movs	r2, #0
 800690e:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006910:	4b07      	ldr	r3, [pc, #28]	; (8006930 <MX_USART3_UART_Init+0x58>)
 8006912:	2200      	movs	r2, #0
 8006914:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006916:	4b06      	ldr	r3, [pc, #24]	; (8006930 <MX_USART3_UART_Init+0x58>)
 8006918:	2200      	movs	r2, #0
 800691a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800691c:	4804      	ldr	r0, [pc, #16]	; (8006930 <MX_USART3_UART_Init+0x58>)
 800691e:	f7fc fce9 	bl	80032f4 <HAL_UART_Init>
 8006922:	4603      	mov	r3, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	d001      	beq.n	800692c <MX_USART3_UART_Init+0x54>
  {
    Error_Handler();
 8006928:	f000 f8a0 	bl	8006a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800692c:	bf00      	nop
 800692e:	bd80      	pop	{r7, pc}
 8006930:	200003c8 	.word	0x200003c8
 8006934:	40004800 	.word	0x40004800

08006938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b08a      	sub	sp, #40	; 0x28
 800693c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800693e:	f107 0314 	add.w	r3, r7, #20
 8006942:	2200      	movs	r2, #0
 8006944:	601a      	str	r2, [r3, #0]
 8006946:	605a      	str	r2, [r3, #4]
 8006948:	609a      	str	r2, [r3, #8]
 800694a:	60da      	str	r2, [r3, #12]
 800694c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800694e:	4b43      	ldr	r3, [pc, #268]	; (8006a5c <MX_GPIO_Init+0x124>)
 8006950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006952:	4a42      	ldr	r2, [pc, #264]	; (8006a5c <MX_GPIO_Init+0x124>)
 8006954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800695a:	4b40      	ldr	r3, [pc, #256]	; (8006a5c <MX_GPIO_Init+0x124>)
 800695c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800695e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006962:	613b      	str	r3, [r7, #16]
 8006964:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006966:	4b3d      	ldr	r3, [pc, #244]	; (8006a5c <MX_GPIO_Init+0x124>)
 8006968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800696a:	4a3c      	ldr	r2, [pc, #240]	; (8006a5c <MX_GPIO_Init+0x124>)
 800696c:	f043 0304 	orr.w	r3, r3, #4
 8006970:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006972:	4b3a      	ldr	r3, [pc, #232]	; (8006a5c <MX_GPIO_Init+0x124>)
 8006974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006976:	f003 0304 	and.w	r3, r3, #4
 800697a:	60fb      	str	r3, [r7, #12]
 800697c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800697e:	4b37      	ldr	r3, [pc, #220]	; (8006a5c <MX_GPIO_Init+0x124>)
 8006980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006982:	4a36      	ldr	r2, [pc, #216]	; (8006a5c <MX_GPIO_Init+0x124>)
 8006984:	f043 0301 	orr.w	r3, r3, #1
 8006988:	64d3      	str	r3, [r2, #76]	; 0x4c
 800698a:	4b34      	ldr	r3, [pc, #208]	; (8006a5c <MX_GPIO_Init+0x124>)
 800698c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800698e:	f003 0301 	and.w	r3, r3, #1
 8006992:	60bb      	str	r3, [r7, #8]
 8006994:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006996:	4b31      	ldr	r3, [pc, #196]	; (8006a5c <MX_GPIO_Init+0x124>)
 8006998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800699a:	4a30      	ldr	r2, [pc, #192]	; (8006a5c <MX_GPIO_Init+0x124>)
 800699c:	f043 0302 	orr.w	r3, r3, #2
 80069a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80069a2:	4b2e      	ldr	r3, [pc, #184]	; (8006a5c <MX_GPIO_Init+0x124>)
 80069a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069a6:	f003 0302 	and.w	r3, r3, #2
 80069aa:	607b      	str	r3, [r7, #4]
 80069ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, ROW_0_OUTPUT_Pin|ROW_1_OUTPUT_Pin, GPIO_PIN_RESET);
 80069ae:	2200      	movs	r2, #0
 80069b0:	2103      	movs	r1, #3
 80069b2:	482b      	ldr	r0, [pc, #172]	; (8006a60 <MX_GPIO_Init+0x128>)
 80069b4:	f7fa f8f0 	bl	8000b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ROW_2_OUTPUT_Pin|ROW_3_OUTPUT_Pin|ROW_4_OUTPUT_Pin, GPIO_PIN_RESET);
 80069b8:	2200      	movs	r2, #0
 80069ba:	2107      	movs	r1, #7
 80069bc:	4829      	ldr	r0, [pc, #164]	; (8006a64 <MX_GPIO_Init+0x12c>)
 80069be:	f7fa f8eb 	bl	8000b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ERROR_LED_Pin|MODE_1_Pin|MODE_2_Pin|MODE_3_Pin, GPIO_PIN_RESET);
 80069c2:	2200      	movs	r2, #0
 80069c4:	21f0      	movs	r1, #240	; 0xf0
 80069c6:	4828      	ldr	r0, [pc, #160]	; (8006a68 <MX_GPIO_Init+0x130>)
 80069c8:	f7fa f8e6 	bl	8000b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ROW_0_OUTPUT_Pin ROW_1_OUTPUT_Pin */
  GPIO_InitStruct.Pin = ROW_0_OUTPUT_Pin|ROW_1_OUTPUT_Pin;
 80069cc:	2303      	movs	r3, #3
 80069ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80069d0:	2301      	movs	r3, #1
 80069d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069d4:	2300      	movs	r3, #0
 80069d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80069d8:	2302      	movs	r3, #2
 80069da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80069dc:	f107 0314 	add.w	r3, r7, #20
 80069e0:	4619      	mov	r1, r3
 80069e2:	481f      	ldr	r0, [pc, #124]	; (8006a60 <MX_GPIO_Init+0x128>)
 80069e4:	f7f9 ff18 	bl	8000818 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW_2_OUTPUT_Pin ROW_3_OUTPUT_Pin ROW_4_OUTPUT_Pin */
  GPIO_InitStruct.Pin = ROW_2_OUTPUT_Pin|ROW_3_OUTPUT_Pin|ROW_4_OUTPUT_Pin;
 80069e8:	2307      	movs	r3, #7
 80069ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80069ec:	2301      	movs	r3, #1
 80069ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069f0:	2300      	movs	r3, #0
 80069f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80069f4:	2302      	movs	r3, #2
 80069f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80069f8:	f107 0314 	add.w	r3, r7, #20
 80069fc:	4619      	mov	r1, r3
 80069fe:	4819      	ldr	r0, [pc, #100]	; (8006a64 <MX_GPIO_Init+0x12c>)
 8006a00:	f7f9 ff0a 	bl	8000818 <HAL_GPIO_Init>

  /*Configure GPIO pin : COL_0_INPUT_Pin */
  GPIO_InitStruct.Pin = COL_0_INPUT_Pin;
 8006a04:	2308      	movs	r3, #8
 8006a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COL_0_INPUT_GPIO_Port, &GPIO_InitStruct);
 8006a10:	f107 0314 	add.w	r3, r7, #20
 8006a14:	4619      	mov	r1, r3
 8006a16:	4813      	ldr	r0, [pc, #76]	; (8006a64 <MX_GPIO_Init+0x12c>)
 8006a18:	f7f9 fefe 	bl	8000818 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL_1_INPUT_Pin COL_2_INPUT_Pin COL_3_INPUT_Pin */
  GPIO_InitStruct.Pin = COL_1_INPUT_Pin|COL_2_INPUT_Pin|COL_3_INPUT_Pin;
 8006a1c:	2307      	movs	r3, #7
 8006a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a20:	2300      	movs	r3, #0
 8006a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006a24:	2302      	movs	r3, #2
 8006a26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a28:	f107 0314 	add.w	r3, r7, #20
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006a32:	f7f9 fef1 	bl	8000818 <HAL_GPIO_Init>

  /*Configure GPIO pins : ERROR_LED_Pin MODE_1_Pin MODE_2_Pin MODE_3_Pin */
  GPIO_InitStruct.Pin = ERROR_LED_Pin|MODE_1_Pin|MODE_2_Pin|MODE_3_Pin;
 8006a36:	23f0      	movs	r3, #240	; 0xf0
 8006a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a42:	2300      	movs	r3, #0
 8006a44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a46:	f107 0314 	add.w	r3, r7, #20
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	4806      	ldr	r0, [pc, #24]	; (8006a68 <MX_GPIO_Init+0x130>)
 8006a4e:	f7f9 fee3 	bl	8000818 <HAL_GPIO_Init>

}
 8006a52:	bf00      	nop
 8006a54:	3728      	adds	r7, #40	; 0x28
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	40021000 	.word	0x40021000
 8006a60:	48001c00 	.word	0x48001c00
 8006a64:	48000800 	.word	0x48000800
 8006a68:	48000400 	.word	0x48000400

08006a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006a70:	bf00      	nop
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
	...

08006a7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a82:	4b0f      	ldr	r3, [pc, #60]	; (8006ac0 <HAL_MspInit+0x44>)
 8006a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a86:	4a0e      	ldr	r2, [pc, #56]	; (8006ac0 <HAL_MspInit+0x44>)
 8006a88:	f043 0301 	orr.w	r3, r3, #1
 8006a8c:	6613      	str	r3, [r2, #96]	; 0x60
 8006a8e:	4b0c      	ldr	r3, [pc, #48]	; (8006ac0 <HAL_MspInit+0x44>)
 8006a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a92:	f003 0301 	and.w	r3, r3, #1
 8006a96:	607b      	str	r3, [r7, #4]
 8006a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006a9a:	4b09      	ldr	r3, [pc, #36]	; (8006ac0 <HAL_MspInit+0x44>)
 8006a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a9e:	4a08      	ldr	r2, [pc, #32]	; (8006ac0 <HAL_MspInit+0x44>)
 8006aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006aa4:	6593      	str	r3, [r2, #88]	; 0x58
 8006aa6:	4b06      	ldr	r3, [pc, #24]	; (8006ac0 <HAL_MspInit+0x44>)
 8006aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006aae:	603b      	str	r3, [r7, #0]
 8006ab0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006ab2:	bf00      	nop
 8006ab4:	370c      	adds	r7, #12
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	40021000 	.word	0x40021000

08006ac4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b08c      	sub	sp, #48	; 0x30
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006acc:	f107 031c 	add.w	r3, r7, #28
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	601a      	str	r2, [r3, #0]
 8006ad4:	605a      	str	r2, [r3, #4]
 8006ad6:	609a      	str	r2, [r3, #8]
 8006ad8:	60da      	str	r2, [r3, #12]
 8006ada:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a33      	ldr	r2, [pc, #204]	; (8006bb0 <HAL_UART_MspInit+0xec>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d160      	bne.n	8006ba8 <HAL_UART_MspInit+0xe4>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8006ae6:	4b33      	ldr	r3, [pc, #204]	; (8006bb4 <HAL_UART_MspInit+0xf0>)
 8006ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aea:	4a32      	ldr	r2, [pc, #200]	; (8006bb4 <HAL_UART_MspInit+0xf0>)
 8006aec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006af0:	6593      	str	r3, [r2, #88]	; 0x58
 8006af2:	4b30      	ldr	r3, [pc, #192]	; (8006bb4 <HAL_UART_MspInit+0xf0>)
 8006af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006af6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006afa:	61bb      	str	r3, [r7, #24]
 8006afc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006afe:	4b2d      	ldr	r3, [pc, #180]	; (8006bb4 <HAL_UART_MspInit+0xf0>)
 8006b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b02:	4a2c      	ldr	r2, [pc, #176]	; (8006bb4 <HAL_UART_MspInit+0xf0>)
 8006b04:	f043 0301 	orr.w	r3, r3, #1
 8006b08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b0a:	4b2a      	ldr	r3, [pc, #168]	; (8006bb4 <HAL_UART_MspInit+0xf0>)
 8006b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	617b      	str	r3, [r7, #20]
 8006b14:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006b16:	4b27      	ldr	r3, [pc, #156]	; (8006bb4 <HAL_UART_MspInit+0xf0>)
 8006b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b1a:	4a26      	ldr	r2, [pc, #152]	; (8006bb4 <HAL_UART_MspInit+0xf0>)
 8006b1c:	f043 0304 	orr.w	r3, r3, #4
 8006b20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b22:	4b24      	ldr	r3, [pc, #144]	; (8006bb4 <HAL_UART_MspInit+0xf0>)
 8006b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b26:	f003 0304 	and.w	r3, r3, #4
 8006b2a:	613b      	str	r3, [r7, #16]
 8006b2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b2e:	4b21      	ldr	r3, [pc, #132]	; (8006bb4 <HAL_UART_MspInit+0xf0>)
 8006b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b32:	4a20      	ldr	r2, [pc, #128]	; (8006bb4 <HAL_UART_MspInit+0xf0>)
 8006b34:	f043 0302 	orr.w	r3, r3, #2
 8006b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b3a:	4b1e      	ldr	r3, [pc, #120]	; (8006bb4 <HAL_UART_MspInit+0xf0>)
 8006b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b3e:	f003 0302 	and.w	r3, r3, #2
 8006b42:	60fb      	str	r3, [r7, #12]
 8006b44:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> USART3_CTS
    PC4     ------> USART3_TX
    PC5     ------> USART3_RX
    PB1     ------> USART3_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006b46:	2340      	movs	r3, #64	; 0x40
 8006b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b4a:	2302      	movs	r3, #2
 8006b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b52:	2303      	movs	r3, #3
 8006b54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006b56:	2307      	movs	r3, #7
 8006b58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b5a:	f107 031c 	add.w	r3, r7, #28
 8006b5e:	4619      	mov	r1, r3
 8006b60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006b64:	f7f9 fe58 	bl	8000818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006b68:	2330      	movs	r3, #48	; 0x30
 8006b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b6c:	2302      	movs	r3, #2
 8006b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b70:	2300      	movs	r3, #0
 8006b72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b74:	2303      	movs	r3, #3
 8006b76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006b78:	2307      	movs	r3, #7
 8006b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b7c:	f107 031c 	add.w	r3, r7, #28
 8006b80:	4619      	mov	r1, r3
 8006b82:	480d      	ldr	r0, [pc, #52]	; (8006bb8 <HAL_UART_MspInit+0xf4>)
 8006b84:	f7f9 fe48 	bl	8000818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006b88:	2302      	movs	r3, #2
 8006b8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b90:	2300      	movs	r3, #0
 8006b92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b94:	2303      	movs	r3, #3
 8006b96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006b98:	2307      	movs	r3, #7
 8006b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b9c:	f107 031c 	add.w	r3, r7, #28
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	4806      	ldr	r0, [pc, #24]	; (8006bbc <HAL_UART_MspInit+0xf8>)
 8006ba4:	f7f9 fe38 	bl	8000818 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006ba8:	bf00      	nop
 8006baa:	3730      	adds	r7, #48	; 0x30
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	40004800 	.word	0x40004800
 8006bb4:	40021000 	.word	0x40021000
 8006bb8:	48000800 	.word	0x48000800
 8006bbc:	48000400 	.word	0x48000400

08006bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006bc4:	bf00      	nop
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr

08006bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006bce:	b480      	push	{r7}
 8006bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006bd2:	e7fe      	b.n	8006bd2 <HardFault_Handler+0x4>

08006bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006bd8:	e7fe      	b.n	8006bd8 <MemManage_Handler+0x4>

08006bda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006bda:	b480      	push	{r7}
 8006bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006bde:	e7fe      	b.n	8006bde <BusFault_Handler+0x4>

08006be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006be0:	b480      	push	{r7}
 8006be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006be4:	e7fe      	b.n	8006be4 <UsageFault_Handler+0x4>

08006be6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006be6:	b480      	push	{r7}
 8006be8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006bea:	bf00      	nop
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006bf8:	bf00      	nop
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr

08006c02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006c02:	b480      	push	{r7}
 8006c04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006c06:	bf00      	nop
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006c14:	f7f9 fcac 	bl	8000570 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006c18:	bf00      	nop
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8006c20:	4802      	ldr	r0, [pc, #8]	; (8006c2c <OTG_FS_IRQHandler+0x10>)
 8006c22:	f7fa f924 	bl	8000e6e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8006c26:	bf00      	nop
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	20000720 	.word	0x20000720

08006c30 <_sbrk>:
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	4b11      	ldr	r3, [pc, #68]	; (8006c80 <_sbrk+0x50>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d102      	bne.n	8006c46 <_sbrk+0x16>
 8006c40:	4b0f      	ldr	r3, [pc, #60]	; (8006c80 <_sbrk+0x50>)
 8006c42:	4a10      	ldr	r2, [pc, #64]	; (8006c84 <_sbrk+0x54>)
 8006c44:	601a      	str	r2, [r3, #0]
 8006c46:	4b0e      	ldr	r3, [pc, #56]	; (8006c80 <_sbrk+0x50>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	60fb      	str	r3, [r7, #12]
 8006c4c:	4b0c      	ldr	r3, [pc, #48]	; (8006c80 <_sbrk+0x50>)
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4413      	add	r3, r2
 8006c54:	466a      	mov	r2, sp
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d907      	bls.n	8006c6a <_sbrk+0x3a>
 8006c5a:	f000 fda7 	bl	80077ac <__errno>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	230c      	movs	r3, #12
 8006c62:	6013      	str	r3, [r2, #0]
 8006c64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c68:	e006      	b.n	8006c78 <_sbrk+0x48>
 8006c6a:	4b05      	ldr	r3, [pc, #20]	; (8006c80 <_sbrk+0x50>)
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4413      	add	r3, r2
 8006c72:	4a03      	ldr	r2, [pc, #12]	; (8006c80 <_sbrk+0x50>)
 8006c74:	6013      	str	r3, [r2, #0]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3710      	adds	r7, #16
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	200002b8 	.word	0x200002b8
 8006c84:	20000b70 	.word	0x20000b70

08006c88 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006c8c:	4b17      	ldr	r3, [pc, #92]	; (8006cec <SystemInit+0x64>)
 8006c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c92:	4a16      	ldr	r2, [pc, #88]	; (8006cec <SystemInit+0x64>)
 8006c94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006c98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8006c9c:	4b14      	ldr	r3, [pc, #80]	; (8006cf0 <SystemInit+0x68>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a13      	ldr	r2, [pc, #76]	; (8006cf0 <SystemInit+0x68>)
 8006ca2:	f043 0301 	orr.w	r3, r3, #1
 8006ca6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8006ca8:	4b11      	ldr	r3, [pc, #68]	; (8006cf0 <SystemInit+0x68>)
 8006caa:	2200      	movs	r2, #0
 8006cac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8006cae:	4b10      	ldr	r3, [pc, #64]	; (8006cf0 <SystemInit+0x68>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a0f      	ldr	r2, [pc, #60]	; (8006cf0 <SystemInit+0x68>)
 8006cb4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8006cb8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8006cbc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8006cbe:	4b0c      	ldr	r3, [pc, #48]	; (8006cf0 <SystemInit+0x68>)
 8006cc0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006cc4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006cc6:	4b0a      	ldr	r3, [pc, #40]	; (8006cf0 <SystemInit+0x68>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a09      	ldr	r2, [pc, #36]	; (8006cf0 <SystemInit+0x68>)
 8006ccc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cd0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8006cd2:	4b07      	ldr	r3, [pc, #28]	; (8006cf0 <SystemInit+0x68>)
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006cd8:	4b04      	ldr	r3, [pc, #16]	; (8006cec <SystemInit+0x64>)
 8006cda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006cde:	609a      	str	r2, [r3, #8]
#endif
}
 8006ce0:	bf00      	nop
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	e000ed00 	.word	0xe000ed00
 8006cf0:	40021000 	.word	0x40021000

08006cf4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	490e      	ldr	r1, [pc, #56]	; (8006d34 <MX_USB_DEVICE_Init+0x40>)
 8006cfc:	480e      	ldr	r0, [pc, #56]	; (8006d38 <MX_USB_DEVICE_Init+0x44>)
 8006cfe:	f7fe fb33 	bl	8005368 <USBD_Init>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d001      	beq.n	8006d0c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006d08:	f7ff feb0 	bl	8006a6c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006d0c:	490b      	ldr	r1, [pc, #44]	; (8006d3c <MX_USB_DEVICE_Init+0x48>)
 8006d0e:	480a      	ldr	r0, [pc, #40]	; (8006d38 <MX_USB_DEVICE_Init+0x44>)
 8006d10:	f7fe fb5a 	bl	80053c8 <USBD_RegisterClass>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d001      	beq.n	8006d1e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006d1a:	f7ff fea7 	bl	8006a6c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006d1e:	4806      	ldr	r0, [pc, #24]	; (8006d38 <MX_USB_DEVICE_Init+0x44>)
 8006d20:	f7fe fb79 	bl	8005416 <USBD_Start>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d001      	beq.n	8006d2e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8006d2a:	f7ff fe9f 	bl	8006a6c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006d2e:	bf00      	nop
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	200001bc 	.word	0x200001bc
 8006d38:	20000450 	.word	0x20000450
 8006d3c:	20000008 	.word	0x20000008

08006d40 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b08a      	sub	sp, #40	; 0x28
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d48:	f107 0314 	add.w	r3, r7, #20
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	601a      	str	r2, [r3, #0]
 8006d50:	605a      	str	r2, [r3, #4]
 8006d52:	609a      	str	r2, [r3, #8]
 8006d54:	60da      	str	r2, [r3, #12]
 8006d56:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d60:	d14e      	bne.n	8006e00 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d62:	4b29      	ldr	r3, [pc, #164]	; (8006e08 <HAL_PCD_MspInit+0xc8>)
 8006d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d66:	4a28      	ldr	r2, [pc, #160]	; (8006e08 <HAL_PCD_MspInit+0xc8>)
 8006d68:	f043 0301 	orr.w	r3, r3, #1
 8006d6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d6e:	4b26      	ldr	r3, [pc, #152]	; (8006e08 <HAL_PCD_MspInit+0xc8>)
 8006d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d72:	f003 0301 	and.w	r3, r3, #1
 8006d76:	613b      	str	r3, [r7, #16]
 8006d78:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006d7a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d80:	2302      	movs	r3, #2
 8006d82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d84:	2300      	movs	r3, #0
 8006d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006d8c:	230a      	movs	r3, #10
 8006d8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d90:	f107 0314 	add.w	r3, r7, #20
 8006d94:	4619      	mov	r1, r3
 8006d96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d9a:	f7f9 fd3d 	bl	8000818 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006d9e:	4b1a      	ldr	r3, [pc, #104]	; (8006e08 <HAL_PCD_MspInit+0xc8>)
 8006da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006da2:	4a19      	ldr	r2, [pc, #100]	; (8006e08 <HAL_PCD_MspInit+0xc8>)
 8006da4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006da8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006daa:	4b17      	ldr	r3, [pc, #92]	; (8006e08 <HAL_PCD_MspInit+0xc8>)
 8006dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006db2:	60fb      	str	r3, [r7, #12]
 8006db4:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006db6:	4b14      	ldr	r3, [pc, #80]	; (8006e08 <HAL_PCD_MspInit+0xc8>)
 8006db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d114      	bne.n	8006dec <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dc2:	4b11      	ldr	r3, [pc, #68]	; (8006e08 <HAL_PCD_MspInit+0xc8>)
 8006dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dc6:	4a10      	ldr	r2, [pc, #64]	; (8006e08 <HAL_PCD_MspInit+0xc8>)
 8006dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dcc:	6593      	str	r3, [r2, #88]	; 0x58
 8006dce:	4b0e      	ldr	r3, [pc, #56]	; (8006e08 <HAL_PCD_MspInit+0xc8>)
 8006dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dd6:	60bb      	str	r3, [r7, #8]
 8006dd8:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8006dda:	f7fa ffe1 	bl	8001da0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006dde:	4b0a      	ldr	r3, [pc, #40]	; (8006e08 <HAL_PCD_MspInit+0xc8>)
 8006de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006de2:	4a09      	ldr	r2, [pc, #36]	; (8006e08 <HAL_PCD_MspInit+0xc8>)
 8006de4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006de8:	6593      	str	r3, [r2, #88]	; 0x58
 8006dea:	e001      	b.n	8006df0 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8006dec:	f7fa ffd8 	bl	8001da0 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006df0:	2200      	movs	r2, #0
 8006df2:	2100      	movs	r1, #0
 8006df4:	2043      	movs	r0, #67	; 0x43
 8006df6:	f7f9 fcd8 	bl	80007aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006dfa:	2043      	movs	r0, #67	; 0x43
 8006dfc:	f7f9 fcf1 	bl	80007e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006e00:	bf00      	nop
 8006e02:	3728      	adds	r7, #40	; 0x28
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	40021000 	.word	0x40021000

08006e0c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006e20:	4619      	mov	r1, r3
 8006e22:	4610      	mov	r0, r2
 8006e24:	f7fe fb42 	bl	80054ac <USBD_LL_SetupStage>
}
 8006e28:	bf00      	nop
 8006e2a:	3708      	adds	r7, #8
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	460b      	mov	r3, r1
 8006e3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006e42:	78fa      	ldrb	r2, [r7, #3]
 8006e44:	6879      	ldr	r1, [r7, #4]
 8006e46:	4613      	mov	r3, r2
 8006e48:	00db      	lsls	r3, r3, #3
 8006e4a:	1a9b      	subs	r3, r3, r2
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	440b      	add	r3, r1
 8006e50:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	78fb      	ldrb	r3, [r7, #3]
 8006e58:	4619      	mov	r1, r3
 8006e5a:	f7fe fb7a 	bl	8005552 <USBD_LL_DataOutStage>
}
 8006e5e:	bf00      	nop
 8006e60:	3708      	adds	r7, #8
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b082      	sub	sp, #8
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
 8006e6e:	460b      	mov	r3, r1
 8006e70:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006e78:	78fa      	ldrb	r2, [r7, #3]
 8006e7a:	6879      	ldr	r1, [r7, #4]
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	00db      	lsls	r3, r3, #3
 8006e80:	1a9b      	subs	r3, r3, r2
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	440b      	add	r3, r1
 8006e86:	3348      	adds	r3, #72	; 0x48
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	78fb      	ldrb	r3, [r7, #3]
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	f7fe fbc3 	bl	8005618 <USBD_LL_DataInStage>
}
 8006e92:	bf00      	nop
 8006e94:	3708      	adds	r7, #8
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	b082      	sub	sp, #8
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7fe fcc7 	bl	800583c <USBD_LL_SOF>
}
 8006eae:	bf00      	nop
 8006eb0:	3708      	adds	r7, #8
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}

08006eb6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b084      	sub	sp, #16
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	2b02      	cmp	r3, #2
 8006ec8:	d001      	beq.n	8006ece <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006eca:	f7ff fdcf 	bl	8006a6c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006ed4:	7bfa      	ldrb	r2, [r7, #15]
 8006ed6:	4611      	mov	r1, r2
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f7fe fc74 	bl	80057c6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f7fe fc2d 	bl	8005744 <USBD_LL_Reset>
}
 8006eea:	bf00      	nop
 8006eec:	3710      	adds	r7, #16
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
	...

08006ef4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	6812      	ldr	r2, [r2, #0]
 8006f0a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006f0e:	f043 0301 	orr.w	r3, r3, #1
 8006f12:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7fe fc63 	bl	80057e6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6a1b      	ldr	r3, [r3, #32]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d005      	beq.n	8006f34 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006f28:	4b04      	ldr	r3, [pc, #16]	; (8006f3c <HAL_PCD_SuspendCallback+0x48>)
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	4a03      	ldr	r2, [pc, #12]	; (8006f3c <HAL_PCD_SuspendCallback+0x48>)
 8006f2e:	f043 0306 	orr.w	r3, r3, #6
 8006f32:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006f34:	bf00      	nop
 8006f36:	3708      	adds	r7, #8
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	e000ed00 	.word	0xe000ed00

08006f40 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	6812      	ldr	r2, [r2, #0]
 8006f56:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006f5a:	f023 0301 	bic.w	r3, r3, #1
 8006f5e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6a1b      	ldr	r3, [r3, #32]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d007      	beq.n	8006f78 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006f68:	4b08      	ldr	r3, [pc, #32]	; (8006f8c <HAL_PCD_ResumeCallback+0x4c>)
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	4a07      	ldr	r2, [pc, #28]	; (8006f8c <HAL_PCD_ResumeCallback+0x4c>)
 8006f6e:	f023 0306 	bic.w	r3, r3, #6
 8006f72:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8006f74:	f000 faca 	bl	800750c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7fe fc46 	bl	8005810 <USBD_LL_Resume>
}
 8006f84:	bf00      	nop
 8006f86:	3708      	adds	r7, #8
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	e000ed00 	.word	0xe000ed00

08006f90 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b082      	sub	sp, #8
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	460b      	mov	r3, r1
 8006f9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006fa2:	78fa      	ldrb	r2, [r7, #3]
 8006fa4:	4611      	mov	r1, r2
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f7fe fc6f 	bl	800588a <USBD_LL_IsoOUTIncomplete>
}
 8006fac:	bf00      	nop
 8006fae:	3708      	adds	r7, #8
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006fc6:	78fa      	ldrb	r2, [r7, #3]
 8006fc8:	4611      	mov	r1, r2
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7fe fc50 	bl	8005870 <USBD_LL_IsoINIncomplete>
}
 8006fd0:	bf00      	nop
 8006fd2:	3708      	adds	r7, #8
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7fe fc5c 	bl	80058a4 <USBD_LL_DevConnected>
}
 8006fec:	bf00      	nop
 8006fee:	3708      	adds	r7, #8
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007002:	4618      	mov	r0, r3
 8007004:	f7fe fc59 	bl	80058ba <USBD_LL_DevDisconnected>
}
 8007008:	bf00      	nop
 800700a:	3708      	adds	r7, #8
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d13c      	bne.n	800709a <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007020:	4a20      	ldr	r2, [pc, #128]	; (80070a4 <USBD_LL_Init+0x94>)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a1e      	ldr	r2, [pc, #120]	; (80070a4 <USBD_LL_Init+0x94>)
 800702c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007030:	4b1c      	ldr	r3, [pc, #112]	; (80070a4 <USBD_LL_Init+0x94>)
 8007032:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007036:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007038:	4b1a      	ldr	r3, [pc, #104]	; (80070a4 <USBD_LL_Init+0x94>)
 800703a:	2206      	movs	r2, #6
 800703c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800703e:	4b19      	ldr	r3, [pc, #100]	; (80070a4 <USBD_LL_Init+0x94>)
 8007040:	2202      	movs	r2, #2
 8007042:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007044:	4b17      	ldr	r3, [pc, #92]	; (80070a4 <USBD_LL_Init+0x94>)
 8007046:	2202      	movs	r2, #2
 8007048:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800704a:	4b16      	ldr	r3, [pc, #88]	; (80070a4 <USBD_LL_Init+0x94>)
 800704c:	2200      	movs	r2, #0
 800704e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007050:	4b14      	ldr	r3, [pc, #80]	; (80070a4 <USBD_LL_Init+0x94>)
 8007052:	2200      	movs	r2, #0
 8007054:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007056:	4b13      	ldr	r3, [pc, #76]	; (80070a4 <USBD_LL_Init+0x94>)
 8007058:	2200      	movs	r2, #0
 800705a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800705c:	4b11      	ldr	r3, [pc, #68]	; (80070a4 <USBD_LL_Init+0x94>)
 800705e:	2200      	movs	r2, #0
 8007060:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007062:	4b10      	ldr	r3, [pc, #64]	; (80070a4 <USBD_LL_Init+0x94>)
 8007064:	2200      	movs	r2, #0
 8007066:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007068:	4b0e      	ldr	r3, [pc, #56]	; (80070a4 <USBD_LL_Init+0x94>)
 800706a:	2200      	movs	r2, #0
 800706c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800706e:	480d      	ldr	r0, [pc, #52]	; (80070a4 <USBD_LL_Init+0x94>)
 8007070:	f7f9 fdaa 	bl	8000bc8 <HAL_PCD_Init>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d001      	beq.n	800707e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800707a:	f7ff fcf7 	bl	8006a6c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800707e:	2180      	movs	r1, #128	; 0x80
 8007080:	4808      	ldr	r0, [pc, #32]	; (80070a4 <USBD_LL_Init+0x94>)
 8007082:	f7fa fdf4 	bl	8001c6e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007086:	2240      	movs	r2, #64	; 0x40
 8007088:	2100      	movs	r1, #0
 800708a:	4806      	ldr	r0, [pc, #24]	; (80070a4 <USBD_LL_Init+0x94>)
 800708c:	f7fa fda8 	bl	8001be0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007090:	2280      	movs	r2, #128	; 0x80
 8007092:	2101      	movs	r1, #1
 8007094:	4803      	ldr	r0, [pc, #12]	; (80070a4 <USBD_LL_Init+0x94>)
 8007096:	f7fa fda3 	bl	8001be0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800709a:	2300      	movs	r3, #0
}
 800709c:	4618      	mov	r0, r3
 800709e:	3708      	adds	r7, #8
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	20000720 	.word	0x20000720

080070a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070b0:	2300      	movs	r3, #0
 80070b2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070b4:	2300      	movs	r3, #0
 80070b6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80070be:	4618      	mov	r0, r3
 80070c0:	f7f9 fea6 	bl	8000e10 <HAL_PCD_Start>
 80070c4:	4603      	mov	r3, r0
 80070c6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80070c8:	7bbb      	ldrb	r3, [r7, #14]
 80070ca:	2b03      	cmp	r3, #3
 80070cc:	d816      	bhi.n	80070fc <USBD_LL_Start+0x54>
 80070ce:	a201      	add	r2, pc, #4	; (adr r2, 80070d4 <USBD_LL_Start+0x2c>)
 80070d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d4:	080070e5 	.word	0x080070e5
 80070d8:	080070eb 	.word	0x080070eb
 80070dc:	080070f1 	.word	0x080070f1
 80070e0:	080070f7 	.word	0x080070f7
    case HAL_OK :
      usb_status = USBD_OK;
 80070e4:	2300      	movs	r3, #0
 80070e6:	73fb      	strb	r3, [r7, #15]
    break;
 80070e8:	e00b      	b.n	8007102 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80070ea:	2303      	movs	r3, #3
 80070ec:	73fb      	strb	r3, [r7, #15]
    break;
 80070ee:	e008      	b.n	8007102 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80070f0:	2301      	movs	r3, #1
 80070f2:	73fb      	strb	r3, [r7, #15]
    break;
 80070f4:	e005      	b.n	8007102 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80070f6:	2303      	movs	r3, #3
 80070f8:	73fb      	strb	r3, [r7, #15]
    break;
 80070fa:	e002      	b.n	8007102 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80070fc:	2303      	movs	r3, #3
 80070fe:	73fb      	strb	r3, [r7, #15]
    break;
 8007100:	bf00      	nop
  }
  return usb_status;
 8007102:	7bfb      	ldrb	r3, [r7, #15]
}
 8007104:	4618      	mov	r0, r3
 8007106:	3710      	adds	r7, #16
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	4608      	mov	r0, r1
 8007116:	4611      	mov	r1, r2
 8007118:	461a      	mov	r2, r3
 800711a:	4603      	mov	r3, r0
 800711c:	70fb      	strb	r3, [r7, #3]
 800711e:	460b      	mov	r3, r1
 8007120:	70bb      	strb	r3, [r7, #2]
 8007122:	4613      	mov	r3, r2
 8007124:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007126:	2300      	movs	r3, #0
 8007128:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800712a:	2300      	movs	r3, #0
 800712c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007134:	78bb      	ldrb	r3, [r7, #2]
 8007136:	883a      	ldrh	r2, [r7, #0]
 8007138:	78f9      	ldrb	r1, [r7, #3]
 800713a:	f7fa fa61 	bl	8001600 <HAL_PCD_EP_Open>
 800713e:	4603      	mov	r3, r0
 8007140:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007142:	7bbb      	ldrb	r3, [r7, #14]
 8007144:	2b03      	cmp	r3, #3
 8007146:	d817      	bhi.n	8007178 <USBD_LL_OpenEP+0x6c>
 8007148:	a201      	add	r2, pc, #4	; (adr r2, 8007150 <USBD_LL_OpenEP+0x44>)
 800714a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800714e:	bf00      	nop
 8007150:	08007161 	.word	0x08007161
 8007154:	08007167 	.word	0x08007167
 8007158:	0800716d 	.word	0x0800716d
 800715c:	08007173 	.word	0x08007173
    case HAL_OK :
      usb_status = USBD_OK;
 8007160:	2300      	movs	r3, #0
 8007162:	73fb      	strb	r3, [r7, #15]
    break;
 8007164:	e00b      	b.n	800717e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007166:	2303      	movs	r3, #3
 8007168:	73fb      	strb	r3, [r7, #15]
    break;
 800716a:	e008      	b.n	800717e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800716c:	2301      	movs	r3, #1
 800716e:	73fb      	strb	r3, [r7, #15]
    break;
 8007170:	e005      	b.n	800717e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007172:	2303      	movs	r3, #3
 8007174:	73fb      	strb	r3, [r7, #15]
    break;
 8007176:	e002      	b.n	800717e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8007178:	2303      	movs	r3, #3
 800717a:	73fb      	strb	r3, [r7, #15]
    break;
 800717c:	bf00      	nop
  }
  return usb_status;
 800717e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007180:	4618      	mov	r0, r3
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	460b      	mov	r3, r1
 8007192:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007194:	2300      	movs	r3, #0
 8007196:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007198:	2300      	movs	r3, #0
 800719a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80071a2:	78fa      	ldrb	r2, [r7, #3]
 80071a4:	4611      	mov	r1, r2
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7fa fa92 	bl	80016d0 <HAL_PCD_EP_Close>
 80071ac:	4603      	mov	r3, r0
 80071ae:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80071b0:	7bbb      	ldrb	r3, [r7, #14]
 80071b2:	2b03      	cmp	r3, #3
 80071b4:	d816      	bhi.n	80071e4 <USBD_LL_CloseEP+0x5c>
 80071b6:	a201      	add	r2, pc, #4	; (adr r2, 80071bc <USBD_LL_CloseEP+0x34>)
 80071b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071bc:	080071cd 	.word	0x080071cd
 80071c0:	080071d3 	.word	0x080071d3
 80071c4:	080071d9 	.word	0x080071d9
 80071c8:	080071df 	.word	0x080071df
    case HAL_OK :
      usb_status = USBD_OK;
 80071cc:	2300      	movs	r3, #0
 80071ce:	73fb      	strb	r3, [r7, #15]
    break;
 80071d0:	e00b      	b.n	80071ea <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80071d2:	2303      	movs	r3, #3
 80071d4:	73fb      	strb	r3, [r7, #15]
    break;
 80071d6:	e008      	b.n	80071ea <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80071d8:	2301      	movs	r3, #1
 80071da:	73fb      	strb	r3, [r7, #15]
    break;
 80071dc:	e005      	b.n	80071ea <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80071de:	2303      	movs	r3, #3
 80071e0:	73fb      	strb	r3, [r7, #15]
    break;
 80071e2:	e002      	b.n	80071ea <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80071e4:	2303      	movs	r3, #3
 80071e6:	73fb      	strb	r3, [r7, #15]
    break;
 80071e8:	bf00      	nop
  }
  return usb_status;
 80071ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	460b      	mov	r3, r1
 80071fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007200:	2300      	movs	r3, #0
 8007202:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007204:	2300      	movs	r3, #0
 8007206:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800720e:	78fa      	ldrb	r2, [r7, #3]
 8007210:	4611      	mov	r1, r2
 8007212:	4618      	mov	r0, r3
 8007214:	f7fa fb21 	bl	800185a <HAL_PCD_EP_SetStall>
 8007218:	4603      	mov	r3, r0
 800721a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800721c:	7bbb      	ldrb	r3, [r7, #14]
 800721e:	2b03      	cmp	r3, #3
 8007220:	d816      	bhi.n	8007250 <USBD_LL_StallEP+0x5c>
 8007222:	a201      	add	r2, pc, #4	; (adr r2, 8007228 <USBD_LL_StallEP+0x34>)
 8007224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007228:	08007239 	.word	0x08007239
 800722c:	0800723f 	.word	0x0800723f
 8007230:	08007245 	.word	0x08007245
 8007234:	0800724b 	.word	0x0800724b
    case HAL_OK :
      usb_status = USBD_OK;
 8007238:	2300      	movs	r3, #0
 800723a:	73fb      	strb	r3, [r7, #15]
    break;
 800723c:	e00b      	b.n	8007256 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800723e:	2303      	movs	r3, #3
 8007240:	73fb      	strb	r3, [r7, #15]
    break;
 8007242:	e008      	b.n	8007256 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007244:	2301      	movs	r3, #1
 8007246:	73fb      	strb	r3, [r7, #15]
    break;
 8007248:	e005      	b.n	8007256 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800724a:	2303      	movs	r3, #3
 800724c:	73fb      	strb	r3, [r7, #15]
    break;
 800724e:	e002      	b.n	8007256 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007250:	2303      	movs	r3, #3
 8007252:	73fb      	strb	r3, [r7, #15]
    break;
 8007254:	bf00      	nop
  }
  return usb_status;
 8007256:	7bfb      	ldrb	r3, [r7, #15]
}
 8007258:	4618      	mov	r0, r3
 800725a:	3710      	adds	r7, #16
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	460b      	mov	r3, r1
 800726a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800726c:	2300      	movs	r3, #0
 800726e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007270:	2300      	movs	r3, #0
 8007272:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800727a:	78fa      	ldrb	r2, [r7, #3]
 800727c:	4611      	mov	r1, r2
 800727e:	4618      	mov	r0, r3
 8007280:	f7fa fb4d 	bl	800191e <HAL_PCD_EP_ClrStall>
 8007284:	4603      	mov	r3, r0
 8007286:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007288:	7bbb      	ldrb	r3, [r7, #14]
 800728a:	2b03      	cmp	r3, #3
 800728c:	d816      	bhi.n	80072bc <USBD_LL_ClearStallEP+0x5c>
 800728e:	a201      	add	r2, pc, #4	; (adr r2, 8007294 <USBD_LL_ClearStallEP+0x34>)
 8007290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007294:	080072a5 	.word	0x080072a5
 8007298:	080072ab 	.word	0x080072ab
 800729c:	080072b1 	.word	0x080072b1
 80072a0:	080072b7 	.word	0x080072b7
    case HAL_OK :
      usb_status = USBD_OK;
 80072a4:	2300      	movs	r3, #0
 80072a6:	73fb      	strb	r3, [r7, #15]
    break;
 80072a8:	e00b      	b.n	80072c2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80072aa:	2303      	movs	r3, #3
 80072ac:	73fb      	strb	r3, [r7, #15]
    break;
 80072ae:	e008      	b.n	80072c2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80072b0:	2301      	movs	r3, #1
 80072b2:	73fb      	strb	r3, [r7, #15]
    break;
 80072b4:	e005      	b.n	80072c2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80072b6:	2303      	movs	r3, #3
 80072b8:	73fb      	strb	r3, [r7, #15]
    break;
 80072ba:	e002      	b.n	80072c2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80072bc:	2303      	movs	r3, #3
 80072be:	73fb      	strb	r3, [r7, #15]
    break;
 80072c0:	bf00      	nop
  }
  return usb_status;
 80072c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3710      	adds	r7, #16
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b085      	sub	sp, #20
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	460b      	mov	r3, r1
 80072d6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80072de:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80072e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	da0b      	bge.n	8007300 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80072e8:	78fb      	ldrb	r3, [r7, #3]
 80072ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072ee:	68f9      	ldr	r1, [r7, #12]
 80072f0:	4613      	mov	r3, r2
 80072f2:	00db      	lsls	r3, r3, #3
 80072f4:	1a9b      	subs	r3, r3, r2
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	440b      	add	r3, r1
 80072fa:	333e      	adds	r3, #62	; 0x3e
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	e00b      	b.n	8007318 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007300:	78fb      	ldrb	r3, [r7, #3]
 8007302:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007306:	68f9      	ldr	r1, [r7, #12]
 8007308:	4613      	mov	r3, r2
 800730a:	00db      	lsls	r3, r3, #3
 800730c:	1a9b      	subs	r3, r3, r2
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	440b      	add	r3, r1
 8007312:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007316:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007318:	4618      	mov	r0, r3
 800731a:	3714      	adds	r7, #20
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	460b      	mov	r3, r1
 800732e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007330:	2300      	movs	r3, #0
 8007332:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007334:	2300      	movs	r3, #0
 8007336:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800733e:	78fa      	ldrb	r2, [r7, #3]
 8007340:	4611      	mov	r1, r2
 8007342:	4618      	mov	r0, r3
 8007344:	f7fa f937 	bl	80015b6 <HAL_PCD_SetAddress>
 8007348:	4603      	mov	r3, r0
 800734a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800734c:	7bbb      	ldrb	r3, [r7, #14]
 800734e:	2b03      	cmp	r3, #3
 8007350:	d816      	bhi.n	8007380 <USBD_LL_SetUSBAddress+0x5c>
 8007352:	a201      	add	r2, pc, #4	; (adr r2, 8007358 <USBD_LL_SetUSBAddress+0x34>)
 8007354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007358:	08007369 	.word	0x08007369
 800735c:	0800736f 	.word	0x0800736f
 8007360:	08007375 	.word	0x08007375
 8007364:	0800737b 	.word	0x0800737b
    case HAL_OK :
      usb_status = USBD_OK;
 8007368:	2300      	movs	r3, #0
 800736a:	73fb      	strb	r3, [r7, #15]
    break;
 800736c:	e00b      	b.n	8007386 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800736e:	2303      	movs	r3, #3
 8007370:	73fb      	strb	r3, [r7, #15]
    break;
 8007372:	e008      	b.n	8007386 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007374:	2301      	movs	r3, #1
 8007376:	73fb      	strb	r3, [r7, #15]
    break;
 8007378:	e005      	b.n	8007386 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800737a:	2303      	movs	r3, #3
 800737c:	73fb      	strb	r3, [r7, #15]
    break;
 800737e:	e002      	b.n	8007386 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8007380:	2303      	movs	r3, #3
 8007382:	73fb      	strb	r3, [r7, #15]
    break;
 8007384:	bf00      	nop
  }
  return usb_status;
 8007386:	7bfb      	ldrb	r3, [r7, #15]
}
 8007388:	4618      	mov	r0, r3
 800738a:	3710      	adds	r7, #16
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b086      	sub	sp, #24
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	607a      	str	r2, [r7, #4]
 800739a:	603b      	str	r3, [r7, #0]
 800739c:	460b      	mov	r3, r1
 800739e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073a0:	2300      	movs	r3, #0
 80073a2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073a4:	2300      	movs	r3, #0
 80073a6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80073ae:	7af9      	ldrb	r1, [r7, #11]
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	f7fa fa14 	bl	80017e0 <HAL_PCD_EP_Transmit>
 80073b8:	4603      	mov	r3, r0
 80073ba:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80073bc:	7dbb      	ldrb	r3, [r7, #22]
 80073be:	2b03      	cmp	r3, #3
 80073c0:	d816      	bhi.n	80073f0 <USBD_LL_Transmit+0x60>
 80073c2:	a201      	add	r2, pc, #4	; (adr r2, 80073c8 <USBD_LL_Transmit+0x38>)
 80073c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c8:	080073d9 	.word	0x080073d9
 80073cc:	080073df 	.word	0x080073df
 80073d0:	080073e5 	.word	0x080073e5
 80073d4:	080073eb 	.word	0x080073eb
    case HAL_OK :
      usb_status = USBD_OK;
 80073d8:	2300      	movs	r3, #0
 80073da:	75fb      	strb	r3, [r7, #23]
    break;
 80073dc:	e00b      	b.n	80073f6 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80073de:	2303      	movs	r3, #3
 80073e0:	75fb      	strb	r3, [r7, #23]
    break;
 80073e2:	e008      	b.n	80073f6 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80073e4:	2301      	movs	r3, #1
 80073e6:	75fb      	strb	r3, [r7, #23]
    break;
 80073e8:	e005      	b.n	80073f6 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80073ea:	2303      	movs	r3, #3
 80073ec:	75fb      	strb	r3, [r7, #23]
    break;
 80073ee:	e002      	b.n	80073f6 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 80073f0:	2303      	movs	r3, #3
 80073f2:	75fb      	strb	r3, [r7, #23]
    break;
 80073f4:	bf00      	nop
  }
  return usb_status;
 80073f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3718      	adds	r7, #24
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b086      	sub	sp, #24
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	607a      	str	r2, [r7, #4]
 800740a:	603b      	str	r3, [r7, #0]
 800740c:	460b      	mov	r3, r1
 800740e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007410:	2300      	movs	r3, #0
 8007412:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007414:	2300      	movs	r3, #0
 8007416:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800741e:	7af9      	ldrb	r1, [r7, #11]
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	f7fa f99e 	bl	8001764 <HAL_PCD_EP_Receive>
 8007428:	4603      	mov	r3, r0
 800742a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800742c:	7dbb      	ldrb	r3, [r7, #22]
 800742e:	2b03      	cmp	r3, #3
 8007430:	d816      	bhi.n	8007460 <USBD_LL_PrepareReceive+0x60>
 8007432:	a201      	add	r2, pc, #4	; (adr r2, 8007438 <USBD_LL_PrepareReceive+0x38>)
 8007434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007438:	08007449 	.word	0x08007449
 800743c:	0800744f 	.word	0x0800744f
 8007440:	08007455 	.word	0x08007455
 8007444:	0800745b 	.word	0x0800745b
    case HAL_OK :
      usb_status = USBD_OK;
 8007448:	2300      	movs	r3, #0
 800744a:	75fb      	strb	r3, [r7, #23]
    break;
 800744c:	e00b      	b.n	8007466 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800744e:	2303      	movs	r3, #3
 8007450:	75fb      	strb	r3, [r7, #23]
    break;
 8007452:	e008      	b.n	8007466 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007454:	2301      	movs	r3, #1
 8007456:	75fb      	strb	r3, [r7, #23]
    break;
 8007458:	e005      	b.n	8007466 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800745a:	2303      	movs	r3, #3
 800745c:	75fb      	strb	r3, [r7, #23]
    break;
 800745e:	e002      	b.n	8007466 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8007460:	2303      	movs	r3, #3
 8007462:	75fb      	strb	r3, [r7, #23]
    break;
 8007464:	bf00      	nop
  }
  return usb_status;
 8007466:	7dfb      	ldrb	r3, [r7, #23]
}
 8007468:	4618      	mov	r0, r3
 800746a:	3718      	adds	r7, #24
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	460b      	mov	r3, r1
 800747a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800747c:	78fb      	ldrb	r3, [r7, #3]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d002      	beq.n	8007488 <HAL_PCDEx_LPM_Callback+0x18>
 8007482:	2b01      	cmp	r3, #1
 8007484:	d01f      	beq.n	80074c6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8007486:	e03b      	b.n	8007500 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6a1b      	ldr	r3, [r3, #32]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d007      	beq.n	80074a0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8007490:	f000 f83c 	bl	800750c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007494:	4b1c      	ldr	r3, [pc, #112]	; (8007508 <HAL_PCDEx_LPM_Callback+0x98>)
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	4a1b      	ldr	r2, [pc, #108]	; (8007508 <HAL_PCDEx_LPM_Callback+0x98>)
 800749a:	f023 0306 	bic.w	r3, r3, #6
 800749e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	6812      	ldr	r2, [r2, #0]
 80074ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80074b2:	f023 0301 	bic.w	r3, r3, #1
 80074b6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074be:	4618      	mov	r0, r3
 80074c0:	f7fe f9a6 	bl	8005810 <USBD_LL_Resume>
    break;
 80074c4:	e01c      	b.n	8007500 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	6812      	ldr	r2, [r2, #0]
 80074d4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80074d8:	f043 0301 	orr.w	r3, r3, #1
 80074dc:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074e4:	4618      	mov	r0, r3
 80074e6:	f7fe f97e 	bl	80057e6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a1b      	ldr	r3, [r3, #32]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d005      	beq.n	80074fe <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80074f2:	4b05      	ldr	r3, [pc, #20]	; (8007508 <HAL_PCDEx_LPM_Callback+0x98>)
 80074f4:	691b      	ldr	r3, [r3, #16]
 80074f6:	4a04      	ldr	r2, [pc, #16]	; (8007508 <HAL_PCDEx_LPM_Callback+0x98>)
 80074f8:	f043 0306 	orr.w	r3, r3, #6
 80074fc:	6113      	str	r3, [r2, #16]
    break;
 80074fe:	bf00      	nop
}
 8007500:	bf00      	nop
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}
 8007508:	e000ed00 	.word	0xe000ed00

0800750c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007510:	f7ff f958 	bl	80067c4 <SystemClock_Config>
}
 8007514:	bf00      	nop
 8007516:	bd80      	pop	{r7, pc}

08007518 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007518:	b480      	push	{r7}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
 800751e:	4603      	mov	r3, r0
 8007520:	6039      	str	r1, [r7, #0]
 8007522:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	2212      	movs	r2, #18
 8007528:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800752a:	4b03      	ldr	r3, [pc, #12]	; (8007538 <USBD_FS_DeviceDescriptor+0x20>)
}
 800752c:	4618      	mov	r0, r3
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr
 8007538:	200001dc 	.word	0x200001dc

0800753c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	4603      	mov	r3, r0
 8007544:	6039      	str	r1, [r7, #0]
 8007546:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	2204      	movs	r2, #4
 800754c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800754e:	4b03      	ldr	r3, [pc, #12]	; (800755c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007550:	4618      	mov	r0, r3
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr
 800755c:	200001fc 	.word	0x200001fc

08007560 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	4603      	mov	r3, r0
 8007568:	6039      	str	r1, [r7, #0]
 800756a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800756c:	79fb      	ldrb	r3, [r7, #7]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d105      	bne.n	800757e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007572:	683a      	ldr	r2, [r7, #0]
 8007574:	4907      	ldr	r1, [pc, #28]	; (8007594 <USBD_FS_ProductStrDescriptor+0x34>)
 8007576:	4808      	ldr	r0, [pc, #32]	; (8007598 <USBD_FS_ProductStrDescriptor+0x38>)
 8007578:	f7fe ff47 	bl	800640a <USBD_GetString>
 800757c:	e004      	b.n	8007588 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800757e:	683a      	ldr	r2, [r7, #0]
 8007580:	4904      	ldr	r1, [pc, #16]	; (8007594 <USBD_FS_ProductStrDescriptor+0x34>)
 8007582:	4805      	ldr	r0, [pc, #20]	; (8007598 <USBD_FS_ProductStrDescriptor+0x38>)
 8007584:	f7fe ff41 	bl	800640a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007588:	4b02      	ldr	r3, [pc, #8]	; (8007594 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800758a:	4618      	mov	r0, r3
 800758c:	3708      	adds	r7, #8
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	20000b28 	.word	0x20000b28
 8007598:	080079bc 	.word	0x080079bc

0800759c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	4603      	mov	r3, r0
 80075a4:	6039      	str	r1, [r7, #0]
 80075a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80075a8:	683a      	ldr	r2, [r7, #0]
 80075aa:	4904      	ldr	r1, [pc, #16]	; (80075bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80075ac:	4804      	ldr	r0, [pc, #16]	; (80075c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80075ae:	f7fe ff2c 	bl	800640a <USBD_GetString>
  return USBD_StrDesc;
 80075b2:	4b02      	ldr	r3, [pc, #8]	; (80075bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3708      	adds	r7, #8
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	20000b28 	.word	0x20000b28
 80075c0:	080079d4 	.word	0x080079d4

080075c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	4603      	mov	r3, r0
 80075cc:	6039      	str	r1, [r7, #0]
 80075ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	221a      	movs	r2, #26
 80075d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80075d6:	f000 f855 	bl	8007684 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80075da:	4b02      	ldr	r3, [pc, #8]	; (80075e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3708      	adds	r7, #8
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}
 80075e4:	20000200 	.word	0x20000200

080075e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	4603      	mov	r3, r0
 80075f0:	6039      	str	r1, [r7, #0]
 80075f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80075f4:	79fb      	ldrb	r3, [r7, #7]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d105      	bne.n	8007606 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80075fa:	683a      	ldr	r2, [r7, #0]
 80075fc:	4907      	ldr	r1, [pc, #28]	; (800761c <USBD_FS_ConfigStrDescriptor+0x34>)
 80075fe:	4808      	ldr	r0, [pc, #32]	; (8007620 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007600:	f7fe ff03 	bl	800640a <USBD_GetString>
 8007604:	e004      	b.n	8007610 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007606:	683a      	ldr	r2, [r7, #0]
 8007608:	4904      	ldr	r1, [pc, #16]	; (800761c <USBD_FS_ConfigStrDescriptor+0x34>)
 800760a:	4805      	ldr	r0, [pc, #20]	; (8007620 <USBD_FS_ConfigStrDescriptor+0x38>)
 800760c:	f7fe fefd 	bl	800640a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007610:	4b02      	ldr	r3, [pc, #8]	; (800761c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007612:	4618      	mov	r0, r3
 8007614:	3708      	adds	r7, #8
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop
 800761c:	20000b28 	.word	0x20000b28
 8007620:	080079e8 	.word	0x080079e8

08007624 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	4603      	mov	r3, r0
 800762c:	6039      	str	r1, [r7, #0]
 800762e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007630:	79fb      	ldrb	r3, [r7, #7]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d105      	bne.n	8007642 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007636:	683a      	ldr	r2, [r7, #0]
 8007638:	4907      	ldr	r1, [pc, #28]	; (8007658 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800763a:	4808      	ldr	r0, [pc, #32]	; (800765c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800763c:	f7fe fee5 	bl	800640a <USBD_GetString>
 8007640:	e004      	b.n	800764c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007642:	683a      	ldr	r2, [r7, #0]
 8007644:	4904      	ldr	r1, [pc, #16]	; (8007658 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007646:	4805      	ldr	r0, [pc, #20]	; (800765c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007648:	f7fe fedf 	bl	800640a <USBD_GetString>
  }
  return USBD_StrDesc;
 800764c:	4b02      	ldr	r3, [pc, #8]	; (8007658 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800764e:	4618      	mov	r0, r3
 8007650:	3708      	adds	r7, #8
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	20000b28 	.word	0x20000b28
 800765c:	080079f4 	.word	0x080079f4

08007660 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
 8007666:	4603      	mov	r3, r0
 8007668:	6039      	str	r1, [r7, #0]
 800766a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	220c      	movs	r2, #12
 8007670:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8007672:	4b03      	ldr	r3, [pc, #12]	; (8007680 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8007674:	4618      	mov	r0, r3
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr
 8007680:	200001f0 	.word	0x200001f0

08007684 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800768a:	4b0f      	ldr	r3, [pc, #60]	; (80076c8 <Get_SerialNum+0x44>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007690:	4b0e      	ldr	r3, [pc, #56]	; (80076cc <Get_SerialNum+0x48>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007696:	4b0e      	ldr	r3, [pc, #56]	; (80076d0 <Get_SerialNum+0x4c>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800769c:	68fa      	ldr	r2, [r7, #12]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	4413      	add	r3, r2
 80076a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d009      	beq.n	80076be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80076aa:	2208      	movs	r2, #8
 80076ac:	4909      	ldr	r1, [pc, #36]	; (80076d4 <Get_SerialNum+0x50>)
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	f000 f814 	bl	80076dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80076b4:	2204      	movs	r2, #4
 80076b6:	4908      	ldr	r1, [pc, #32]	; (80076d8 <Get_SerialNum+0x54>)
 80076b8:	68b8      	ldr	r0, [r7, #8]
 80076ba:	f000 f80f 	bl	80076dc <IntToUnicode>
  }
}
 80076be:	bf00      	nop
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	1fff7590 	.word	0x1fff7590
 80076cc:	1fff7594 	.word	0x1fff7594
 80076d0:	1fff7598 	.word	0x1fff7598
 80076d4:	20000202 	.word	0x20000202
 80076d8:	20000212 	.word	0x20000212

080076dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80076dc:	b480      	push	{r7}
 80076de:	b087      	sub	sp, #28
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	4613      	mov	r3, r2
 80076e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80076ea:	2300      	movs	r3, #0
 80076ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80076ee:	2300      	movs	r3, #0
 80076f0:	75fb      	strb	r3, [r7, #23]
 80076f2:	e027      	b.n	8007744 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	0f1b      	lsrs	r3, r3, #28
 80076f8:	2b09      	cmp	r3, #9
 80076fa:	d80b      	bhi.n	8007714 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	0f1b      	lsrs	r3, r3, #28
 8007700:	b2da      	uxtb	r2, r3
 8007702:	7dfb      	ldrb	r3, [r7, #23]
 8007704:	005b      	lsls	r3, r3, #1
 8007706:	4619      	mov	r1, r3
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	440b      	add	r3, r1
 800770c:	3230      	adds	r2, #48	; 0x30
 800770e:	b2d2      	uxtb	r2, r2
 8007710:	701a      	strb	r2, [r3, #0]
 8007712:	e00a      	b.n	800772a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	0f1b      	lsrs	r3, r3, #28
 8007718:	b2da      	uxtb	r2, r3
 800771a:	7dfb      	ldrb	r3, [r7, #23]
 800771c:	005b      	lsls	r3, r3, #1
 800771e:	4619      	mov	r1, r3
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	440b      	add	r3, r1
 8007724:	3237      	adds	r2, #55	; 0x37
 8007726:	b2d2      	uxtb	r2, r2
 8007728:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	011b      	lsls	r3, r3, #4
 800772e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007730:	7dfb      	ldrb	r3, [r7, #23]
 8007732:	005b      	lsls	r3, r3, #1
 8007734:	3301      	adds	r3, #1
 8007736:	68ba      	ldr	r2, [r7, #8]
 8007738:	4413      	add	r3, r2
 800773a:	2200      	movs	r2, #0
 800773c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800773e:	7dfb      	ldrb	r3, [r7, #23]
 8007740:	3301      	adds	r3, #1
 8007742:	75fb      	strb	r3, [r7, #23]
 8007744:	7dfa      	ldrb	r2, [r7, #23]
 8007746:	79fb      	ldrb	r3, [r7, #7]
 8007748:	429a      	cmp	r2, r3
 800774a:	d3d3      	bcc.n	80076f4 <IntToUnicode+0x18>
  }
}
 800774c:	bf00      	nop
 800774e:	371c      	adds	r7, #28
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <Reset_Handler>:
 8007758:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007790 <LoopForever+0x2>
 800775c:	2100      	movs	r1, #0
 800775e:	e003      	b.n	8007768 <LoopCopyDataInit>

08007760 <CopyDataInit>:
 8007760:	4b0c      	ldr	r3, [pc, #48]	; (8007794 <LoopForever+0x6>)
 8007762:	585b      	ldr	r3, [r3, r1]
 8007764:	5043      	str	r3, [r0, r1]
 8007766:	3104      	adds	r1, #4

08007768 <LoopCopyDataInit>:
 8007768:	480b      	ldr	r0, [pc, #44]	; (8007798 <LoopForever+0xa>)
 800776a:	4b0c      	ldr	r3, [pc, #48]	; (800779c <LoopForever+0xe>)
 800776c:	1842      	adds	r2, r0, r1
 800776e:	429a      	cmp	r2, r3
 8007770:	d3f6      	bcc.n	8007760 <CopyDataInit>
 8007772:	4a0b      	ldr	r2, [pc, #44]	; (80077a0 <LoopForever+0x12>)
 8007774:	e002      	b.n	800777c <LoopFillZerobss>

08007776 <FillZerobss>:
 8007776:	2300      	movs	r3, #0
 8007778:	f842 3b04 	str.w	r3, [r2], #4

0800777c <LoopFillZerobss>:
 800777c:	4b09      	ldr	r3, [pc, #36]	; (80077a4 <LoopForever+0x16>)
 800777e:	429a      	cmp	r2, r3
 8007780:	d3f9      	bcc.n	8007776 <FillZerobss>
 8007782:	f7ff fa81 	bl	8006c88 <SystemInit>
 8007786:	f000 f817 	bl	80077b8 <__libc_init_array>
 800778a:	f7fe ffd7 	bl	800673c <main>

0800778e <LoopForever>:
 800778e:	e7fe      	b.n	800778e <LoopForever>
 8007790:	20018000 	.word	0x20018000
 8007794:	08007a70 	.word	0x08007a70
 8007798:	20000000 	.word	0x20000000
 800779c:	20000280 	.word	0x20000280
 80077a0:	20000280 	.word	0x20000280
 80077a4:	20000b6c 	.word	0x20000b6c

080077a8 <ADC1_2_IRQHandler>:
 80077a8:	e7fe      	b.n	80077a8 <ADC1_2_IRQHandler>
	...

080077ac <__errno>:
 80077ac:	4b01      	ldr	r3, [pc, #4]	; (80077b4 <__errno+0x8>)
 80077ae:	6818      	ldr	r0, [r3, #0]
 80077b0:	4770      	bx	lr
 80077b2:	bf00      	nop
 80077b4:	2000021c 	.word	0x2000021c

080077b8 <__libc_init_array>:
 80077b8:	b570      	push	{r4, r5, r6, lr}
 80077ba:	4e0d      	ldr	r6, [pc, #52]	; (80077f0 <__libc_init_array+0x38>)
 80077bc:	4c0d      	ldr	r4, [pc, #52]	; (80077f4 <__libc_init_array+0x3c>)
 80077be:	1ba4      	subs	r4, r4, r6
 80077c0:	10a4      	asrs	r4, r4, #2
 80077c2:	2500      	movs	r5, #0
 80077c4:	42a5      	cmp	r5, r4
 80077c6:	d109      	bne.n	80077dc <__libc_init_array+0x24>
 80077c8:	4e0b      	ldr	r6, [pc, #44]	; (80077f8 <__libc_init_array+0x40>)
 80077ca:	4c0c      	ldr	r4, [pc, #48]	; (80077fc <__libc_init_array+0x44>)
 80077cc:	f000 f8ea 	bl	80079a4 <_init>
 80077d0:	1ba4      	subs	r4, r4, r6
 80077d2:	10a4      	asrs	r4, r4, #2
 80077d4:	2500      	movs	r5, #0
 80077d6:	42a5      	cmp	r5, r4
 80077d8:	d105      	bne.n	80077e6 <__libc_init_array+0x2e>
 80077da:	bd70      	pop	{r4, r5, r6, pc}
 80077dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80077e0:	4798      	blx	r3
 80077e2:	3501      	adds	r5, #1
 80077e4:	e7ee      	b.n	80077c4 <__libc_init_array+0xc>
 80077e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80077ea:	4798      	blx	r3
 80077ec:	3501      	adds	r5, #1
 80077ee:	e7f2      	b.n	80077d6 <__libc_init_array+0x1e>
 80077f0:	08007a68 	.word	0x08007a68
 80077f4:	08007a68 	.word	0x08007a68
 80077f8:	08007a68 	.word	0x08007a68
 80077fc:	08007a6c 	.word	0x08007a6c

08007800 <malloc>:
 8007800:	4b02      	ldr	r3, [pc, #8]	; (800780c <malloc+0xc>)
 8007802:	4601      	mov	r1, r0
 8007804:	6818      	ldr	r0, [r3, #0]
 8007806:	f000 b861 	b.w	80078cc <_malloc_r>
 800780a:	bf00      	nop
 800780c:	2000021c 	.word	0x2000021c

08007810 <free>:
 8007810:	4b02      	ldr	r3, [pc, #8]	; (800781c <free+0xc>)
 8007812:	4601      	mov	r1, r0
 8007814:	6818      	ldr	r0, [r3, #0]
 8007816:	f000 b80b 	b.w	8007830 <_free_r>
 800781a:	bf00      	nop
 800781c:	2000021c 	.word	0x2000021c

08007820 <memset>:
 8007820:	4402      	add	r2, r0
 8007822:	4603      	mov	r3, r0
 8007824:	4293      	cmp	r3, r2
 8007826:	d100      	bne.n	800782a <memset+0xa>
 8007828:	4770      	bx	lr
 800782a:	f803 1b01 	strb.w	r1, [r3], #1
 800782e:	e7f9      	b.n	8007824 <memset+0x4>

08007830 <_free_r>:
 8007830:	b538      	push	{r3, r4, r5, lr}
 8007832:	4605      	mov	r5, r0
 8007834:	2900      	cmp	r1, #0
 8007836:	d045      	beq.n	80078c4 <_free_r+0x94>
 8007838:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800783c:	1f0c      	subs	r4, r1, #4
 800783e:	2b00      	cmp	r3, #0
 8007840:	bfb8      	it	lt
 8007842:	18e4      	addlt	r4, r4, r3
 8007844:	f000 f8ac 	bl	80079a0 <__malloc_lock>
 8007848:	4a1f      	ldr	r2, [pc, #124]	; (80078c8 <_free_r+0x98>)
 800784a:	6813      	ldr	r3, [r2, #0]
 800784c:	4610      	mov	r0, r2
 800784e:	b933      	cbnz	r3, 800785e <_free_r+0x2e>
 8007850:	6063      	str	r3, [r4, #4]
 8007852:	6014      	str	r4, [r2, #0]
 8007854:	4628      	mov	r0, r5
 8007856:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800785a:	f000 b8a2 	b.w	80079a2 <__malloc_unlock>
 800785e:	42a3      	cmp	r3, r4
 8007860:	d90c      	bls.n	800787c <_free_r+0x4c>
 8007862:	6821      	ldr	r1, [r4, #0]
 8007864:	1862      	adds	r2, r4, r1
 8007866:	4293      	cmp	r3, r2
 8007868:	bf04      	itt	eq
 800786a:	681a      	ldreq	r2, [r3, #0]
 800786c:	685b      	ldreq	r3, [r3, #4]
 800786e:	6063      	str	r3, [r4, #4]
 8007870:	bf04      	itt	eq
 8007872:	1852      	addeq	r2, r2, r1
 8007874:	6022      	streq	r2, [r4, #0]
 8007876:	6004      	str	r4, [r0, #0]
 8007878:	e7ec      	b.n	8007854 <_free_r+0x24>
 800787a:	4613      	mov	r3, r2
 800787c:	685a      	ldr	r2, [r3, #4]
 800787e:	b10a      	cbz	r2, 8007884 <_free_r+0x54>
 8007880:	42a2      	cmp	r2, r4
 8007882:	d9fa      	bls.n	800787a <_free_r+0x4a>
 8007884:	6819      	ldr	r1, [r3, #0]
 8007886:	1858      	adds	r0, r3, r1
 8007888:	42a0      	cmp	r0, r4
 800788a:	d10b      	bne.n	80078a4 <_free_r+0x74>
 800788c:	6820      	ldr	r0, [r4, #0]
 800788e:	4401      	add	r1, r0
 8007890:	1858      	adds	r0, r3, r1
 8007892:	4282      	cmp	r2, r0
 8007894:	6019      	str	r1, [r3, #0]
 8007896:	d1dd      	bne.n	8007854 <_free_r+0x24>
 8007898:	6810      	ldr	r0, [r2, #0]
 800789a:	6852      	ldr	r2, [r2, #4]
 800789c:	605a      	str	r2, [r3, #4]
 800789e:	4401      	add	r1, r0
 80078a0:	6019      	str	r1, [r3, #0]
 80078a2:	e7d7      	b.n	8007854 <_free_r+0x24>
 80078a4:	d902      	bls.n	80078ac <_free_r+0x7c>
 80078a6:	230c      	movs	r3, #12
 80078a8:	602b      	str	r3, [r5, #0]
 80078aa:	e7d3      	b.n	8007854 <_free_r+0x24>
 80078ac:	6820      	ldr	r0, [r4, #0]
 80078ae:	1821      	adds	r1, r4, r0
 80078b0:	428a      	cmp	r2, r1
 80078b2:	bf04      	itt	eq
 80078b4:	6811      	ldreq	r1, [r2, #0]
 80078b6:	6852      	ldreq	r2, [r2, #4]
 80078b8:	6062      	str	r2, [r4, #4]
 80078ba:	bf04      	itt	eq
 80078bc:	1809      	addeq	r1, r1, r0
 80078be:	6021      	streq	r1, [r4, #0]
 80078c0:	605c      	str	r4, [r3, #4]
 80078c2:	e7c7      	b.n	8007854 <_free_r+0x24>
 80078c4:	bd38      	pop	{r3, r4, r5, pc}
 80078c6:	bf00      	nop
 80078c8:	200002bc 	.word	0x200002bc

080078cc <_malloc_r>:
 80078cc:	b570      	push	{r4, r5, r6, lr}
 80078ce:	1ccd      	adds	r5, r1, #3
 80078d0:	f025 0503 	bic.w	r5, r5, #3
 80078d4:	3508      	adds	r5, #8
 80078d6:	2d0c      	cmp	r5, #12
 80078d8:	bf38      	it	cc
 80078da:	250c      	movcc	r5, #12
 80078dc:	2d00      	cmp	r5, #0
 80078de:	4606      	mov	r6, r0
 80078e0:	db01      	blt.n	80078e6 <_malloc_r+0x1a>
 80078e2:	42a9      	cmp	r1, r5
 80078e4:	d903      	bls.n	80078ee <_malloc_r+0x22>
 80078e6:	230c      	movs	r3, #12
 80078e8:	6033      	str	r3, [r6, #0]
 80078ea:	2000      	movs	r0, #0
 80078ec:	bd70      	pop	{r4, r5, r6, pc}
 80078ee:	f000 f857 	bl	80079a0 <__malloc_lock>
 80078f2:	4a21      	ldr	r2, [pc, #132]	; (8007978 <_malloc_r+0xac>)
 80078f4:	6814      	ldr	r4, [r2, #0]
 80078f6:	4621      	mov	r1, r4
 80078f8:	b991      	cbnz	r1, 8007920 <_malloc_r+0x54>
 80078fa:	4c20      	ldr	r4, [pc, #128]	; (800797c <_malloc_r+0xb0>)
 80078fc:	6823      	ldr	r3, [r4, #0]
 80078fe:	b91b      	cbnz	r3, 8007908 <_malloc_r+0x3c>
 8007900:	4630      	mov	r0, r6
 8007902:	f000 f83d 	bl	8007980 <_sbrk_r>
 8007906:	6020      	str	r0, [r4, #0]
 8007908:	4629      	mov	r1, r5
 800790a:	4630      	mov	r0, r6
 800790c:	f000 f838 	bl	8007980 <_sbrk_r>
 8007910:	1c43      	adds	r3, r0, #1
 8007912:	d124      	bne.n	800795e <_malloc_r+0x92>
 8007914:	230c      	movs	r3, #12
 8007916:	6033      	str	r3, [r6, #0]
 8007918:	4630      	mov	r0, r6
 800791a:	f000 f842 	bl	80079a2 <__malloc_unlock>
 800791e:	e7e4      	b.n	80078ea <_malloc_r+0x1e>
 8007920:	680b      	ldr	r3, [r1, #0]
 8007922:	1b5b      	subs	r3, r3, r5
 8007924:	d418      	bmi.n	8007958 <_malloc_r+0x8c>
 8007926:	2b0b      	cmp	r3, #11
 8007928:	d90f      	bls.n	800794a <_malloc_r+0x7e>
 800792a:	600b      	str	r3, [r1, #0]
 800792c:	50cd      	str	r5, [r1, r3]
 800792e:	18cc      	adds	r4, r1, r3
 8007930:	4630      	mov	r0, r6
 8007932:	f000 f836 	bl	80079a2 <__malloc_unlock>
 8007936:	f104 000b 	add.w	r0, r4, #11
 800793a:	1d23      	adds	r3, r4, #4
 800793c:	f020 0007 	bic.w	r0, r0, #7
 8007940:	1ac3      	subs	r3, r0, r3
 8007942:	d0d3      	beq.n	80078ec <_malloc_r+0x20>
 8007944:	425a      	negs	r2, r3
 8007946:	50e2      	str	r2, [r4, r3]
 8007948:	e7d0      	b.n	80078ec <_malloc_r+0x20>
 800794a:	428c      	cmp	r4, r1
 800794c:	684b      	ldr	r3, [r1, #4]
 800794e:	bf16      	itet	ne
 8007950:	6063      	strne	r3, [r4, #4]
 8007952:	6013      	streq	r3, [r2, #0]
 8007954:	460c      	movne	r4, r1
 8007956:	e7eb      	b.n	8007930 <_malloc_r+0x64>
 8007958:	460c      	mov	r4, r1
 800795a:	6849      	ldr	r1, [r1, #4]
 800795c:	e7cc      	b.n	80078f8 <_malloc_r+0x2c>
 800795e:	1cc4      	adds	r4, r0, #3
 8007960:	f024 0403 	bic.w	r4, r4, #3
 8007964:	42a0      	cmp	r0, r4
 8007966:	d005      	beq.n	8007974 <_malloc_r+0xa8>
 8007968:	1a21      	subs	r1, r4, r0
 800796a:	4630      	mov	r0, r6
 800796c:	f000 f808 	bl	8007980 <_sbrk_r>
 8007970:	3001      	adds	r0, #1
 8007972:	d0cf      	beq.n	8007914 <_malloc_r+0x48>
 8007974:	6025      	str	r5, [r4, #0]
 8007976:	e7db      	b.n	8007930 <_malloc_r+0x64>
 8007978:	200002bc 	.word	0x200002bc
 800797c:	200002c0 	.word	0x200002c0

08007980 <_sbrk_r>:
 8007980:	b538      	push	{r3, r4, r5, lr}
 8007982:	4c06      	ldr	r4, [pc, #24]	; (800799c <_sbrk_r+0x1c>)
 8007984:	2300      	movs	r3, #0
 8007986:	4605      	mov	r5, r0
 8007988:	4608      	mov	r0, r1
 800798a:	6023      	str	r3, [r4, #0]
 800798c:	f7ff f950 	bl	8006c30 <_sbrk>
 8007990:	1c43      	adds	r3, r0, #1
 8007992:	d102      	bne.n	800799a <_sbrk_r+0x1a>
 8007994:	6823      	ldr	r3, [r4, #0]
 8007996:	b103      	cbz	r3, 800799a <_sbrk_r+0x1a>
 8007998:	602b      	str	r3, [r5, #0]
 800799a:	bd38      	pop	{r3, r4, r5, pc}
 800799c:	20000b68 	.word	0x20000b68

080079a0 <__malloc_lock>:
 80079a0:	4770      	bx	lr

080079a2 <__malloc_unlock>:
 80079a2:	4770      	bx	lr

080079a4 <_init>:
 80079a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079a6:	bf00      	nop
 80079a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079aa:	bc08      	pop	{r3}
 80079ac:	469e      	mov	lr, r3
 80079ae:	4770      	bx	lr

080079b0 <_fini>:
 80079b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079b2:	bf00      	nop
 80079b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079b6:	bc08      	pop	{r3}
 80079b8:	469e      	mov	lr, r3
 80079ba:	4770      	bx	lr
